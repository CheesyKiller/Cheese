export module GLAD4:A5;

import GLADTypes;

export namespace GLAD {
	using PFNGLCLIPCONTROLPROC = void (*)(GLenum origin, GLenum depth);
	using PFNGLCREATETRANSFORMFEEDBACKSPROC = void (*)(GLsizei n, GLuint* ids);
	using PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC = void (*)(GLuint xfb, GLuint index, GLuint buffer);
	using PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC = void (*)(GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
	using PFNGLGETTRANSFORMFEEDBACKIVPROC = void (*)(GLuint xfb, GLenum pname, GLint* param);
	using PFNGLGETTRANSFORMFEEDBACKI_VPROC = void (*)(GLuint xfb, GLenum pname, GLuint index, GLint* param);
	using PFNGLGETTRANSFORMFEEDBACKI64_VPROC = void (*)(GLuint xfb, GLenum pname, GLuint index, GLint64* param);
	using PFNGLCREATEBUFFERSPROC = void (*)(GLsizei n, GLuint* buffers);
	using PFNGLNAMEDBUFFERSTORAGEPROC = void (*)(GLuint buffer, GLsizeiptr size, const void* data, GLbitfield flags);
	using PFNGLNAMEDBUFFERDATAPROC = void (*)(GLuint buffer, GLsizeiptr size, const void* data, GLenum usage);
	using PFNGLNAMEDBUFFERSUBDATAPROC = void (*)(GLuint buffer, GLintptr offset, GLsizeiptr size, const void* data);
	using PFNGLCOPYNAMEDBUFFERSUBDATAPROC = void (*)(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
	using PFNGLCLEARNAMEDBUFFERDATAPROC = void (*)(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void* data);
	using PFNGLCLEARNAMEDBUFFERSUBDATAPROC = void (*)(GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void* data);
	using PFNGLMAPNAMEDBUFFERPROC = void* (*)(GLuint buffer, GLenum access);
	using PFNGLMAPNAMEDBUFFERRANGEPROC = void* (*)(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access);
	using PFNGLUNMAPNAMEDBUFFERPROC = GLboolean(*)(GLuint buffer);
	using PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC = void (*)(GLuint buffer, GLintptr offset, GLsizeiptr length);
	using PFNGLGETNAMEDBUFFERPARAMETERIVPROC = void (*)(GLuint buffer, GLenum pname, GLint* params);
	using PFNGLGETNAMEDBUFFERPARAMETERI64VPROC = void (*)(GLuint buffer, GLenum pname, GLint64* params);
	using PFNGLGETNAMEDBUFFERPOINTERVPROC = void (*)(GLuint buffer, GLenum pname, void** params);
	using PFNGLGETNAMEDBUFFERSUBDATAPROC = void (*)(GLuint buffer, GLintptr offset, GLsizeiptr size, void* data);
	using PFNGLCREATEFRAMEBUFFERSPROC = void (*)(GLsizei n, GLuint* framebuffers);
	using PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC = void (*)(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
	using PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC = void (*)(GLuint framebuffer, GLenum pname, GLint param);
	using PFNGLNAMEDFRAMEBUFFERTEXTUREPROC = void (*)(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level);
	using PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC = void (*)(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer);
	using PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC = void (*)(GLuint framebuffer, GLenum buf);
	using PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC = void (*)(GLuint framebuffer, GLsizei n, const GLenum* bufs);
	using PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC = void (*)(GLuint framebuffer, GLenum src);
	using PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC = void (*)(GLuint framebuffer, GLsizei numAttachments, const GLenum* attachments);
	using PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC = void (*)(GLuint framebuffer, GLsizei numAttachments, const GLenum* attachments, GLint x, GLint y, GLsizei width, GLsizei height);
	using PFNGLCLEARNAMEDFRAMEBUFFERIVPROC = void (*)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint* value);
	using PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC = void (*)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint* value);
	using PFNGLCLEARNAMEDFRAMEBUFFERFVPROC = void (*)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat* value);
	using PFNGLCLEARNAMEDFRAMEBUFFERFIPROC = void (*)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
	using PFNGLBLITNAMEDFRAMEBUFFERPROC = void (*)(GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
	using PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC = GLenum(*)(GLuint framebuffer, GLenum target);
	using PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC = void (*)(GLuint framebuffer, GLenum pname, GLint* param);
	using PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC = void (*)(GLuint framebuffer, GLenum attachment, GLenum pname, GLint* params);
	using PFNGLCREATERENDERBUFFERSPROC = void (*)(GLsizei n, GLuint* renderbuffers);
	using PFNGLNAMEDRENDERBUFFERSTORAGEPROC = void (*)(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height);
	using PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC = void (*)(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
	using PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC = void (*)(GLuint renderbuffer, GLenum pname, GLint* params);
	using PFNGLCREATETEXTURESPROC = void (*)(GLenum target, GLsizei n, GLuint* textures);
	using PFNGLTEXTUREBUFFERPROC = void (*)(GLuint texture, GLenum internalformat, GLuint buffer);
	using PFNGLTEXTUREBUFFERRANGEPROC = void (*)(GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
	using PFNGLTEXTURESTORAGE1DPROC = void (*)(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width);
	using PFNGLTEXTURESTORAGE2DPROC = void (*)(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
	using PFNGLTEXTURESTORAGE3DPROC = void (*)(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
	using PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC = void (*)(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
	using PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC = void (*)(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
	using PFNGLTEXTURESUBIMAGE1DPROC = void (*)(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void* pixels);
	using PFNGLTEXTURESUBIMAGE2DPROC = void (*)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void* pixels);
	using PFNGLTEXTURESUBIMAGE3DPROC = void (*)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void* pixels);
	using PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC = void (*)(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void* data);
	using PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC = void (*)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void* data);
	using PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC = void (*)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void* data);
	using PFNGLCOPYTEXTURESUBIMAGE1DPROC = void (*)(GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
	using PFNGLCOPYTEXTURESUBIMAGE2DPROC = void (*)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
	using PFNGLCOPYTEXTURESUBIMAGE3DPROC = void (*)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
	using PFNGLTEXTUREPARAMETERFPROC = void (*)(GLuint texture, GLenum pname, GLfloat param);
	using PFNGLTEXTUREPARAMETERFVPROC = void (*)(GLuint texture, GLenum pname, const GLfloat* param);
	using PFNGLTEXTUREPARAMETERIPROC = void (*)(GLuint texture, GLenum pname, GLint param);
	using PFNGLTEXTUREPARAMETERIIVPROC = void (*)(GLuint texture, GLenum pname, const GLint* params);
	using PFNGLTEXTUREPARAMETERIUIVPROC = void (*)(GLuint texture, GLenum pname, const GLuint* params);
	using PFNGLTEXTUREPARAMETERIVPROC = void (*)(GLuint texture, GLenum pname, const GLint* param);
	using PFNGLGENERATETEXTUREMIPMAPPROC = void (*)(GLuint texture);
	using PFNGLBINDTEXTUREUNITPROC = void (*)(GLuint unit, GLuint texture);
	using PFNGLGETTEXTUREIMAGEPROC = void (*)(GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void* pixels);
	using PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC = void (*)(GLuint texture, GLint level, GLsizei bufSize, void* pixels);
	using PFNGLGETTEXTURELEVELPARAMETERFVPROC = void (*)(GLuint texture, GLint level, GLenum pname, GLfloat* params);
	using PFNGLGETTEXTURELEVELPARAMETERIVPROC = void (*)(GLuint texture, GLint level, GLenum pname, GLint* params);
	using PFNGLGETTEXTUREPARAMETERFVPROC = void (*)(GLuint texture, GLenum pname, GLfloat* params);
	using PFNGLGETTEXTUREPARAMETERIIVPROC = void (*)(GLuint texture, GLenum pname, GLint* params);
	using PFNGLGETTEXTUREPARAMETERIUIVPROC = void (*)(GLuint texture, GLenum pname, GLuint* params);
	using PFNGLGETTEXTUREPARAMETERIVPROC = void (*)(GLuint texture, GLenum pname, GLint* params);
	using PFNGLCREATEVERTEXARRAYSPROC = void (*)(GLsizei n, GLuint* arrays);
	using PFNGLDISABLEVERTEXARRAYATTRIBPROC = void (*)(GLuint vaobj, GLuint index);
	using PFNGLENABLEVERTEXARRAYATTRIBPROC = void (*)(GLuint vaobj, GLuint index);
	using PFNGLVERTEXARRAYELEMENTBUFFERPROC = void (*)(GLuint vaobj, GLuint buffer);
	using PFNGLVERTEXARRAYVERTEXBUFFERPROC = void (*)(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
	using PFNGLVERTEXARRAYVERTEXBUFFERSPROC = void (*)(GLuint vaobj, GLuint first, GLsizei count, const GLuint* buffers, const GLintptr* offsets, const GLsizei* strides);
	using PFNGLVERTEXARRAYATTRIBBINDINGPROC = void (*)(GLuint vaobj, GLuint attribindex, GLuint bindingindex);
	using PFNGLVERTEXARRAYATTRIBFORMATPROC = void (*)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
	using PFNGLVERTEXARRAYATTRIBIFORMATPROC = void (*)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
	using PFNGLVERTEXARRAYATTRIBLFORMATPROC = void (*)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
	using PFNGLVERTEXARRAYBINDINGDIVISORPROC = void (*)(GLuint vaobj, GLuint bindingindex, GLuint divisor);
	using PFNGLGETVERTEXARRAYIVPROC = void (*)(GLuint vaobj, GLenum pname, GLint* param);
	using PFNGLGETVERTEXARRAYINDEXEDIVPROC = void (*)(GLuint vaobj, GLuint index, GLenum pname, GLint* param);
	using PFNGLGETVERTEXARRAYINDEXED64IVPROC = void (*)(GLuint vaobj, GLuint index, GLenum pname, GLint64* param);
	using PFNGLCREATESAMPLERSPROC = void (*)(GLsizei n, GLuint* samplers);
	using PFNGLCREATEPROGRAMPIPELINESPROC = void (*)(GLsizei n, GLuint* pipelines);
	using PFNGLCREATEQUERIESPROC = void (*)(GLenum target, GLsizei n, GLuint* ids);
	using PFNGLGETQUERYBUFFEROBJECTI64VPROC = void (*)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
	using PFNGLGETQUERYBUFFEROBJECTIVPROC = void (*)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
	using PFNGLGETQUERYBUFFEROBJECTUI64VPROC = void (*)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
	using PFNGLGETQUERYBUFFEROBJECTUIVPROC = void (*)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
	using PFNGLMEMORYBARRIERBYREGIONPROC = void (*)(GLbitfield barriers);
	using PFNGLGETTEXTURESUBIMAGEPROC = void (*)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void* pixels);
	using PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC = void (*)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void* pixels);
	using PFNGLGETGRAPHICSRESETSTATUSPROC = GLenum(*)(void);
	using PFNGLGETNCOMPRESSEDTEXIMAGEPROC = void (*)(GLenum target, GLint lod, GLsizei bufSize, void* pixels);
	using PFNGLGETNTEXIMAGEPROC = void (*)(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void* pixels);
	using PFNGLGETNUNIFORMDVPROC = void (*)(GLuint program, GLint location, GLsizei bufSize, GLdouble* params);
	using PFNGLGETNUNIFORMFVPROC = void (*)(GLuint program, GLint location, GLsizei bufSize, GLfloat* params);
	using PFNGLGETNUNIFORMIVPROC = void (*)(GLuint program, GLint location, GLsizei bufSize, GLint* params);
	using PFNGLGETNUNIFORMUIVPROC = void (*)(GLuint program, GLint location, GLsizei bufSize, GLuint* params);
	using PFNGLREADNPIXELSPROC = void (*)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void* data);
	using PFNGLGETNMAPDVPROC = void (*)(GLenum target, GLenum query, GLsizei bufSize, GLdouble* v);
	using PFNGLGETNMAPFVPROC = void (*)(GLenum target, GLenum query, GLsizei bufSize, GLfloat* v);
	using PFNGLGETNMAPIVPROC = void (*)(GLenum target, GLenum query, GLsizei bufSize, GLint* v);
	using PFNGLGETNPIXELMAPFVPROC = void (*)(GLenum map, GLsizei bufSize, GLfloat* values);
	using PFNGLGETNPIXELMAPUIVPROC = void (*)(GLenum map, GLsizei bufSize, GLuint* values);
	using PFNGLGETNPIXELMAPUSVPROC = void (*)(GLenum map, GLsizei bufSize, GLushort* values);
	using PFNGLGETNPOLYGONSTIPPLEPROC = void (*)(GLsizei bufSize, GLubyte* pattern);
	using PFNGLGETNCOLORTABLEPROC = void (*)(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void* table);
	using PFNGLGETNCONVOLUTIONFILTERPROC = void (*)(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void* image);
	using PFNGLGETNSEPARABLEFILTERPROC = void (*)(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void* row, GLsizei columnBufSize, void* column, void* span);
	using PFNGLGETNHISTOGRAMPROC = void (*)(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void* values);
	using PFNGLGETNMINMAXPROC = void (*)(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void* values);
	using PFNGLTEXTUREBARRIERPROC = void (*)(void);
}