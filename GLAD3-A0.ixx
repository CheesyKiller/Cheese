export module GLAD3:A0;

import GLADTypes;

export namespace GLAD {
	// Alias for function pointer types
	using PFNGLCOLORMASKIPROC = void(*)(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
	using PFNGLGETBOOLEANI_VPROC = void(*)(GLenum target, GLuint index, GLboolean* data);
	using PFNGLGETINTEGERI_VPROC = void(*)(GLenum target, GLuint index, GLint* data);
	using PFNGLENABLEIPROC = void(*)(GLenum target, GLuint index);
	using PFNGLDISABLEIPROC = void(*)(GLenum target, GLuint index);
	using PFNGLISENABLEDIPROC = GLboolean(*)(GLenum target, GLuint index);
	using PFNGLBEGINTRANSFORMFEEDBACKPROC = void(*)(GLenum primitiveMode);
	using PFNGLENDTRANSFORMFEEDBACKPROC = void(*)(void);
	using PFNGLBINDBUFFERRANGEPROC = void(*)(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
	using PFNGLBINDBUFFERBASEPROC = void(*)(GLenum target, GLuint index, GLuint buffer);
	using PFNGLTRANSFORMFEEDBACKVARYINGSPROC = void(*)(GLuint program, GLsizei count, const GLchar* const* varyings, GLenum bufferMode);
	using PFNGLGETTRANSFORMFEEDBACKVARYINGPROC = void(*)(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLsizei* size, GLenum* type, GLchar* name);
	using PFNGLCLAMPCOLORPROC = void(*)(GLenum target, GLenum clamp);
	using PFNGLBEGINCONDITIONALRENDERPROC = void(*)(GLuint id, GLenum mode);
	using PFNGLENDCONDITIONALRENDERPROC = void(*)(void);
	using PFNGLVERTEXATTRIBIPOINTERPROC = void(*)(GLuint index, GLint size, GLenum type, GLsizei stride, const void* pointer);
	using PFNGLGETVERTEXATTRIBIIVPROC = void(*)(GLuint index, GLenum pname, GLint* params);
	using PFNGLGETVERTEXATTRIBIUIVPROC = void(*)(GLuint index, GLenum pname, GLuint* params);
	using PFNGLVERTEXATTRIBI1IPROC = void(*)(GLuint index, GLint x);
	using PFNGLVERTEXATTRIBI2IPROC = void(*)(GLuint index, GLint x, GLint y);
	using PFNGLVERTEXATTRIBI3IPROC = void(*)(GLuint index, GLint x, GLint y, GLint z);
	using PFNGLVERTEXATTRIBI4IPROC = void(*)(GLuint index, GLint x, GLint y, GLint z, GLint w);
	using PFNGLVERTEXATTRIBI1UIPROC = void(*)(GLuint index, GLuint x);
	using PFNGLVERTEXATTRIBI2UIPROC = void(*)(GLuint index, GLuint x, GLuint y);
	using PFNGLVERTEXATTRIBI3UIPROC = void(*)(GLuint index, GLuint x, GLuint y, GLuint z);
	using PFNGLVERTEXATTRIBI4UIPROC = void(*)(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
	using PFNGLVERTEXATTRIBI1IVPROC = void(*)(GLuint index, const GLint* v);
	using PFNGLVERTEXATTRIBI2IVPROC = void(*)(GLuint index, const GLint* v);
	using PFNGLVERTEXATTRIBI3IVPROC = void(*)(GLuint index, const GLint* v);
	using PFNGLVERTEXATTRIBI4IVPROC = void(*)(GLuint index, const GLint* v);
	using PFNGLVERTEXATTRIBI1UIVPROC = void(*)(GLuint index, const GLuint* v);
	using PFNGLVERTEXATTRIBI2UIVPROC = void(*)(GLuint index, const GLuint* v);
	using PFNGLVERTEXATTRIBI3UIVPROC = void(*)(GLuint index, const GLuint* v);
	using PFNGLVERTEXATTRIBI4UIVPROC = void(*)(GLuint index, const GLuint* v);
	using PFNGLVERTEXATTRIBI4BVPROC = void(*)(GLuint index, const GLbyte* v);
	using PFNGLVERTEXATTRIBI4SVPROC = void(*)(GLuint index, const GLshort* v);
	using PFNGLVERTEXATTRIBI4UBVPROC = void(*)(GLuint index, const GLubyte* v);
	using PFNGLVERTEXATTRIBI4USVPROC = void(*)(GLuint index, const GLushort* v);
	using PFNGLGETUNIFORMUIVPROC = void(*)(GLuint program, GLint location, GLuint* params);
	using PFNGLBINDFRAGDATALOCATIONPROC = void(*)(GLuint program, GLuint color, const GLchar* name);
	using PFNGLGETFRAGDATALOCATIONPROC = GLint(*)(GLuint program, const GLchar* name);
	using PFNGLUNIFORM1UIPROC = void(*)(GLint location, GLuint v0);
	using PFNGLUNIFORM2UIPROC = void(*)(GLint location, GLuint v0, GLuint v1);
	using PFNGLUNIFORM3UIPROC = void(*)(GLint location, GLuint v0, GLuint v1, GLuint v2);
	using PFNGLUNIFORM4UIPROC = void(*)(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
	using PFNGLUNIFORM1UIVPROC = void(*)(GLint location, GLsizei count, const GLuint* value);
	using PFNGLUNIFORM2UIVPROC = void(*)(GLint location, GLsizei count, const GLuint* value);
	using PFNGLUNIFORM3UIVPROC = void(*)(GLint location, GLsizei count, const GLuint* value);
	using PFNGLUNIFORM4UIVPROC = void(*)(GLint location, GLsizei count, const GLuint* value);
	using PFNGLTEXPARAMETERIIVPROC = void(*)(GLenum target, GLenum pname, const GLint* params);
	using PFNGLTEXPARAMETERIUIVPROC = void(*)(GLenum target, GLenum pname, const GLuint* params);
	using PFNGLGETTEXPARAMETERIIVPROC = void(*)(GLenum target, GLenum pname, GLint* params);
	using PFNGLGETTEXPARAMETERIUIVPROC = void(*)(GLenum target, GLenum pname, GLuint* params);
	using PFNGLCLEARBUFFERIVPROC = void(*)(GLenum buffer, GLint drawbuffer, const GLint* value);
	using PFNGLCLEARBUFFERUIVPROC = void(*)(GLenum buffer, GLint drawbuffer, const GLuint* value);
	using PFNGLCLEARBUFFERFVPROC = void(*)(GLenum buffer, GLint drawbuffer, const GLfloat* value);
	using PFNGLCLEARBUFFERFIPROC = void(*)(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
	using PFNGLGETSTRINGIPROC = const GLubyte* (*)(GLenum name, GLuint index);
	using PFNGLISRENDERBUFFERPROC = GLboolean(*)(GLuint renderbuffer);
	using PFNGLBINDRENDERBUFFERPROC = void(*)(GLenum target, GLuint renderbuffer);
	using PFNGLDELETERENDERBUFFERSPROC = void(*)(GLsizei n, const GLuint* renderbuffers);
	using PFNGLGENRENDERBUFFERSPROC = void(*)(GLsizei n, GLuint* renderbuffers);
	using PFNGLRENDERBUFFERSTORAGEPROC = void(*)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
	using PFNGLGETRENDERBUFFERPARAMETERIVPROC = void(*)(GLenum target, GLenum pname, GLint* params);
	using PFNGLISFRAMEBUFFERPROC = GLboolean(*)(GLuint framebuffer);
	using PFNGLBINDFRAMEBUFFERPROC = void(*)(GLenum target, GLuint framebuffer);
	using PFNGLDELETEFRAMEBUFFERSPROC = void(*)(GLsizei n, const GLuint* framebuffers);
	using PFNGLGENFRAMEBUFFERSPROC = void(*)(GLsizei n, GLuint* framebuffers);
	using PFNGLCHECKFRAMEBUFFERSTATUSPROC = GLenum(*)(GLenum target);
	using PFNGLFRAMEBUFFERTEXTURE1DPROC = void(*)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
	using PFNGLFRAMEBUFFERTEXTURE2DPROC = void(*)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
	using PFNGLFRAMEBUFFERTEXTURE3DPROC = void(*)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
	using PFNGLFRAMEBUFFERRENDERBUFFERPROC = void(*)(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
	using PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC = void(*)(GLenum target, GLenum attachment, GLenum pname, GLint* params);
	using PFNGLGENERATEMIPMAPPROC = void(*)(GLenum target);
	using PFNGLBLITFRAMEBUFFERPROC = void(*)(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
	using PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC = void(*)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
	using PFNGLFRAMEBUFFERTEXTURELAYERPROC = void(*)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
	using PFNGLMAPBUFFERRANGEPROC = void* (*)(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
	using PFNGLFLUSHMAPPEDBUFFERRANGEPROC = void(*)(GLenum target, GLintptr offset, GLsizeiptr length);
	using PFNGLBINDVERTEXARRAYPROC = void(*)(GLuint array);
	using PFNGLDELETEVERTEXARRAYSPROC = void(*)(GLsizei n, const GLuint* arrays);
	using PFNGLGENVERTEXARRAYSPROC = void(*)(GLsizei n, GLuint* arrays);
	using PFNGLISVERTEXARRAYPROC = GLboolean(*)(GLuint array);
}