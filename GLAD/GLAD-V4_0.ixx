export module GLAD:V4_0;

export import :V3_3;

export namespace GLAD {
	// Alias for function pointer types
	using PFNGLMINSAMPLESHADINGPROC = void(*)(GLfloat value);
	using PFNGLBLENDEQUATIONIPROC = void(*)(GLuint buf, GLenum mode);
	using PFNGLBLENDEQUATIONSEPARATEIPROC = void(*)(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
	using PFNGLBLENDFUNCIPROC = void(*)(GLuint buf, GLenum src, GLenum dst);
	using PFNGLBLENDFUNCSEPARATEIPROC = void(*)(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
	using PFNGLDRAWARRAYSINDIRECTPROC = void(*)(GLenum mode, const void* indirect);
	using PFNGLDRAWELEMENTSINDIRECTPROC = void(*)(GLenum mode, GLenum type, const void* indirect);
	using PFNGLUNIFORM1DPROC = void(*)(GLint location, GLdouble x);
	using PFNGLUNIFORM2DPROC = void(*)(GLint location, GLdouble x, GLdouble y);
	using PFNGLUNIFORM3DPROC = void(*)(GLint location, GLdouble x, GLdouble y, GLdouble z);
	using PFNGLUNIFORM4DPROC = void(*)(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
	using PFNGLUNIFORM1DVPROC = void(*)(GLint location, GLsizei count, const GLdouble* value);
	using PFNGLUNIFORM2DVPROC = void(*)(GLint location, GLsizei count, const GLdouble* value);
	using PFNGLUNIFORM3DVPROC = void(*)(GLint location, GLsizei count, const GLdouble* value);
	using PFNGLUNIFORM4DVPROC = void(*)(GLint location, GLsizei count, const GLdouble* value);
	using PFNGLUNIFORMMATRIX2DVPROC = void(*)(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
	using PFNGLUNIFORMMATRIX3DVPROC = void(*)(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
	using PFNGLUNIFORMMATRIX4DVPROC = void(*)(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
	using PFNGLUNIFORMMATRIX2X3DVPROC = void(*)(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
	using PFNGLUNIFORMMATRIX2X4DVPROC = void(*)(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
	using PFNGLUNIFORMMATRIX3X2DVPROC = void(*)(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
	using PFNGLUNIFORMMATRIX3X4DVPROC = void(*)(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
	using PFNGLUNIFORMMATRIX4X2DVPROC = void(*)(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
	using PFNGLUNIFORMMATRIX4X3DVPROC = void(*)(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
	using PFNGLGETUNIFORMDVPROC = void(*)(GLuint program, GLint location, GLdouble* params);
	using PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC = GLint(*)(GLuint program, GLenum shadertype, const GLchar* name);
	using PFNGLGETSUBROUTINEINDEXPROC = GLuint(*)(GLuint program, GLenum shadertype, const GLchar* name);
	using PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC = void(*)(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint* values);
	using PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC = void(*)(GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, GLsizei* length, GLchar* name);
	using PFNGLGETACTIVESUBROUTINENAMEPROC = void(*)(GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, GLsizei* length, GLchar* name);
	using PFNGLUNIFORMSUBROUTINESUIVPROC = void(*)(GLenum shadertype, GLsizei count, const GLuint* indices);
	using PFNGLGETUNIFORMSUBROUTINEUIVPROC = void(*)(GLenum shadertype, GLint location, GLuint* params);
	using PFNGLGETPROGRAMSTAGEIVPROC = void(*)(GLuint program, GLenum shadertype, GLenum pname, GLint* values);
	using PFNGLPATCHPARAMETERIPROC = void(*)(GLenum pname, GLint value);
	using PFNGLPATCHPARAMETERFVPROC = void(*)(GLenum pname, const GLfloat* values);
	using PFNGLBINDTRANSFORMFEEDBACKPROC = void(*)(GLenum target, GLuint id);
	using PFNGLDELETETRANSFORMFEEDBACKSPROC = void(*)(GLsizei n, const GLuint* ids);
	using PFNGLGENTRANSFORMFEEDBACKSPROC = void(*)(GLsizei n, GLuint* ids);
	using PFNGLISTRANSFORMFEEDBACKPROC = GLboolean(*)(GLuint id);
	using PFNGLPAUSETRANSFORMFEEDBACKPROC = void(*)();
	using PFNGLRESUMETRANSFORMFEEDBACKPROC = void(*)();
	using PFNGLDRAWTRANSFORMFEEDBACKPROC = void(*)(GLenum mode, GLuint id);
	using PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC = void(*)(GLenum mode, GLuint id, GLuint stream);
	using PFNGLBEGINQUERYINDEXEDPROC = void(*)(GLenum target, GLuint index, GLuint id);
	using PFNGLENDQUERYINDEXEDPROC = void(*)(GLenum target, GLuint index);
	using PFNGLGETQUERYINDEXEDIVPROC = void(*)(GLenum target, GLuint index, GLenum pname, GLint* params);

	// Declare function pointers as variables
	PFNGLMINSAMPLESHADINGPROC glMinSampleShading = nullptr;
	PFNGLBLENDEQUATIONIPROC glBlendEquationi = nullptr;
	PFNGLBLENDEQUATIONSEPARATEIPROC glBlendEquationSeparatei = nullptr;
	PFNGLBLENDFUNCIPROC glBlendFunci = nullptr;
	PFNGLBLENDFUNCSEPARATEIPROC glBlendFuncSeparatei = nullptr;
	PFNGLDRAWARRAYSINDIRECTPROC glDrawArraysIndirect = nullptr;
	PFNGLDRAWELEMENTSINDIRECTPROC glDrawElementsIndirect = nullptr;
	PFNGLUNIFORM1DPROC glUniform1d = nullptr;
	PFNGLUNIFORM2DPROC glUniform2d = nullptr;
	PFNGLUNIFORM3DPROC glUniform3d = nullptr;
	PFNGLUNIFORM4DPROC glUniform4d = nullptr;
	PFNGLUNIFORM1DVPROC glUniform1dv = nullptr;
	PFNGLUNIFORM2DVPROC glUniform2dv = nullptr;
	PFNGLUNIFORM3DVPROC glUniform3dv = nullptr;
	PFNGLUNIFORM4DVPROC glUniform4dv = nullptr;
	PFNGLUNIFORMMATRIX2DVPROC glUniformMatrix2dv = nullptr;
	PFNGLUNIFORMMATRIX3DVPROC glUniformMatrix3dv = nullptr;
	PFNGLUNIFORMMATRIX4DVPROC glUniformMatrix4dv = nullptr;
	PFNGLUNIFORMMATRIX2X3DVPROC glUniformMatrix2x3dv = nullptr;
	PFNGLUNIFORMMATRIX2X4DVPROC glUniformMatrix2x4dv = nullptr;
	PFNGLUNIFORMMATRIX3X2DVPROC glUniformMatrix3x2dv = nullptr;
	PFNGLUNIFORMMATRIX3X4DVPROC glUniformMatrix3x4dv = nullptr;
	PFNGLUNIFORMMATRIX4X2DVPROC glUniformMatrix4x2dv = nullptr;
	PFNGLUNIFORMMATRIX4X3DVPROC glUniformMatrix4x3dv = nullptr;
	PFNGLGETUNIFORMDVPROC glGetUniformdv = nullptr;
	PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC glGetSubroutineUniformLocation = nullptr;
	PFNGLGETSUBROUTINEINDEXPROC glGetSubroutineIndex = nullptr;
	PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC glGetActiveSubroutineUniformiv = nullptr;
	PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC glGetActiveSubroutineUniformName = nullptr;
	PFNGLGETACTIVESUBROUTINENAMEPROC glGetActiveSubroutineName = nullptr;
	PFNGLUNIFORMSUBROUTINESUIVPROC glUniformSubroutinesuiv = nullptr;
	PFNGLGETUNIFORMSUBROUTINEUIVPROC glGetUniformSubroutineuiv = nullptr;
	PFNGLGETPROGRAMSTAGEIVPROC glGetProgramStageiv = nullptr;
	PFNGLPATCHPARAMETERIPROC glPatchParameteri = nullptr;
	PFNGLPATCHPARAMETERFVPROC glPatchParameterfv = nullptr;
	PFNGLBINDTRANSFORMFEEDBACKPROC glBindTransformFeedback = nullptr;
	PFNGLDELETETRANSFORMFEEDBACKSPROC glDeleteTransformFeedbacks = nullptr;
	PFNGLGENTRANSFORMFEEDBACKSPROC glGenTransformFeedbacks = nullptr;
	PFNGLISTRANSFORMFEEDBACKPROC glIsTransformFeedback = nullptr;
	PFNGLPAUSETRANSFORMFEEDBACKPROC glPauseTransformFeedback = nullptr;
	PFNGLRESUMETRANSFORMFEEDBACKPROC glResumeTransformFeedback = nullptr;
	PFNGLDRAWTRANSFORMFEEDBACKPROC glDrawTransformFeedback = nullptr;
	PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC glDrawTransformFeedbackStream = nullptr;
	PFNGLBEGINQUERYINDEXEDPROC glBeginQueryIndexed = nullptr;
	PFNGLENDQUERYINDEXEDPROC glEndQueryIndexed = nullptr;
	PFNGLGETQUERYINDEXEDIVPROC glGetQueryIndexediv = nullptr;

	namespace GLAD_4_0 {
		void load_GL_RECURSIVE(GLADloadproc load) {
			glMinSampleShading = GLAD::gladLoadFunction<PFNGLMINSAMPLESHADINGPROC>("glMinSampleShading", load);
			glBlendEquationi = GLAD::gladLoadFunction<PFNGLBLENDEQUATIONIPROC>("glBlendEquationi", load);
			glBlendEquationSeparatei = GLAD::gladLoadFunction<PFNGLBLENDEQUATIONSEPARATEIPROC>("glBlendEquationSeparatei", load);
			glBlendFunci = GLAD::gladLoadFunction<PFNGLBLENDFUNCIPROC>("glBlendFunci", load);
			glBlendFuncSeparatei = GLAD::gladLoadFunction<PFNGLBLENDFUNCSEPARATEIPROC>("glBlendFuncSeparatei", load);
			glDrawArraysIndirect = GLAD::gladLoadFunction<PFNGLDRAWARRAYSINDIRECTPROC>("glDrawArraysIndirect", load);
			glDrawElementsIndirect = GLAD::gladLoadFunction<PFNGLDRAWELEMENTSINDIRECTPROC>("glDrawElementsIndirect", load);
			glUniform1d = GLAD::gladLoadFunction<PFNGLUNIFORM1DPROC>("glUniform1d", load);
			glUniform2d = GLAD::gladLoadFunction<PFNGLUNIFORM2DPROC>("glUniform2d", load);
			glUniform3d = GLAD::gladLoadFunction<PFNGLUNIFORM3DPROC>("glUniform3d", load);
			glUniform4d = GLAD::gladLoadFunction<PFNGLUNIFORM4DPROC>("glUniform4d", load);
			glUniform1dv = GLAD::gladLoadFunction<PFNGLUNIFORM1DVPROC>("glUniform1dv", load);
			glUniform2dv = GLAD::gladLoadFunction<PFNGLUNIFORM2DVPROC>("glUniform2dv", load);
			glUniform3dv = GLAD::gladLoadFunction<PFNGLUNIFORM3DVPROC>("glUniform3dv", load);
			glUniform4dv = GLAD::gladLoadFunction<PFNGLUNIFORM4DVPROC>("glUniform4dv", load);
			glUniformMatrix2dv = GLAD::gladLoadFunction<PFNGLUNIFORMMATRIX2DVPROC>("glUniformMatrix2dv", load);
			glUniformMatrix3dv = GLAD::gladLoadFunction<PFNGLUNIFORMMATRIX3DVPROC>("glUniformMatrix3dv", load);
			glUniformMatrix4dv = GLAD::gladLoadFunction<PFNGLUNIFORMMATRIX4DVPROC>("glUniformMatrix4dv", load);
			glUniformMatrix2x3dv = GLAD::gladLoadFunction<PFNGLUNIFORMMATRIX2X3DVPROC>("glUniformMatrix2x3dv", load);
			glUniformMatrix2x4dv = GLAD::gladLoadFunction<PFNGLUNIFORMMATRIX2X4DVPROC>("glUniformMatrix2x4dv", load);
			glUniformMatrix3x2dv = GLAD::gladLoadFunction<PFNGLUNIFORMMATRIX3X2DVPROC>("glUniformMatrix3x2dv", load);
			glUniformMatrix3x4dv = GLAD::gladLoadFunction<PFNGLUNIFORMMATRIX3X4DVPROC>("glUniformMatrix3x4dv", load);
			glUniformMatrix4x2dv = GLAD::gladLoadFunction<PFNGLUNIFORMMATRIX4X2DVPROC>("glUniformMatrix4x2dv", load);
			glUniformMatrix4x3dv = GLAD::gladLoadFunction<PFNGLUNIFORMMATRIX4X3DVPROC>("glUniformMatrix4x3dv", load);
			glGetUniformdv = GLAD::gladLoadFunction<PFNGLGETUNIFORMDVPROC>("glGetUniformdv", load);
			glGetSubroutineUniformLocation = GLAD::gladLoadFunction<PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC>("glGetSubroutineUniformLocation", load);
			glGetSubroutineIndex = GLAD::gladLoadFunction<PFNGLGETSUBROUTINEINDEXPROC>("glGetSubroutineIndex", load);
			glGetActiveSubroutineUniformiv = GLAD::gladLoadFunction<PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC>("glGetActiveSubroutineUniformiv", load);
			glGetActiveSubroutineUniformName = GLAD::gladLoadFunction<PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC>("glGetActiveSubroutineUniformName", load);
			glGetActiveSubroutineName = GLAD::gladLoadFunction<PFNGLGETACTIVESUBROUTINENAMEPROC>("glGetActiveSubroutineName", load);
			glUniformSubroutinesuiv = GLAD::gladLoadFunction<PFNGLUNIFORMSUBROUTINESUIVPROC>("glUniformSubroutinesuiv", load);
			glGetUniformSubroutineuiv = GLAD::gladLoadFunction<PFNGLGETUNIFORMSUBROUTINEUIVPROC>("glGetUniformSubroutineuiv", load);
			glGetProgramStageiv = GLAD::gladLoadFunction<PFNGLGETPROGRAMSTAGEIVPROC>("glGetProgramStageiv", load);
			glPatchParameteri = GLAD::gladLoadFunction<PFNGLPATCHPARAMETERIPROC>("glPatchParameteri", load);
			glPatchParameterfv = GLAD::gladLoadFunction<PFNGLPATCHPARAMETERFVPROC>("glPatchParameterfv", load);
			glBindTransformFeedback = GLAD::gladLoadFunction<PFNGLBINDTRANSFORMFEEDBACKPROC>("glBindTransformFeedback", load);
			glDeleteTransformFeedbacks = GLAD::gladLoadFunction<PFNGLDELETETRANSFORMFEEDBACKSPROC>("glDeleteTransformFeedbacks", load);
			glGenTransformFeedbacks = GLAD::gladLoadFunction<PFNGLGENTRANSFORMFEEDBACKSPROC>("glGenTransformFeedbacks", load);
			glIsTransformFeedback = GLAD::gladLoadFunction<PFNGLISTRANSFORMFEEDBACKPROC>("glIsTransformFeedback", load);
			glPauseTransformFeedback = GLAD::gladLoadFunction<PFNGLPAUSETRANSFORMFEEDBACKPROC>("glPauseTransformFeedback", load);
			glResumeTransformFeedback = GLAD::gladLoadFunction<PFNGLRESUMETRANSFORMFEEDBACKPROC>("glResumeTransformFeedback", load);
			glDrawTransformFeedback = GLAD::gladLoadFunction<PFNGLDRAWTRANSFORMFEEDBACKPROC>("glDrawTransformFeedback", load);
			glDrawTransformFeedbackStream = GLAD::gladLoadFunction<PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC>("glDrawTransformFeedbackStream", load);
			glBeginQueryIndexed = GLAD::gladLoadFunction<PFNGLBEGINQUERYINDEXEDPROC>("glBeginQueryIndexed", load);
			glEndQueryIndexed = GLAD::gladLoadFunction<PFNGLENDQUERYINDEXEDPROC>("glEndQueryIndexed", load);
			glGetQueryIndexediv = GLAD::gladLoadFunction<PFNGLGETQUERYINDEXEDIVPROC>("glGetQueryIndexediv", load);

			GLAD::GLAD_3_3::load_GL_RECURSIVE(load);
		}
	}
}