export module GLAD:V4_5;

export import :V4_4;

export using PFNGLCLIPCONTROLPROC = void (*)(GLenum origin, GLenum depth);
export using PFNGLCREATETRANSFORMFEEDBACKSPROC = void (*)(GLsizei n, GLuint* ids);
export using PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC = void (*)(GLuint xfb, GLuint index, GLuint buffer);
export using PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC = void (*)(GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
export using PFNGLGETTRANSFORMFEEDBACKIVPROC = void (*)(GLuint xfb, GLenum pname, GLint* param);
export using PFNGLGETTRANSFORMFEEDBACKI_VPROC = void (*)(GLuint xfb, GLenum pname, GLuint index, GLint* param);
export using PFNGLGETTRANSFORMFEEDBACKI64_VPROC = void (*)(GLuint xfb, GLenum pname, GLuint index, GLint64* param);
export using PFNGLCREATEBUFFERSPROC = void (*)(GLsizei n, GLuint* buffers);
export using PFNGLNAMEDBUFFERSTORAGEPROC = void (*)(GLuint buffer, GLsizeiptr size, const void* data, GLbitfield flags);
export using PFNGLNAMEDBUFFERDATAPROC = void (*)(GLuint buffer, GLsizeiptr size, const void* data, GLenum usage);
export using PFNGLNAMEDBUFFERSUBDATAPROC = void (*)(GLuint buffer, GLintptr offset, GLsizeiptr size, const void* data);
export using PFNGLCOPYNAMEDBUFFERSUBDATAPROC = void (*)(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
export using PFNGLCLEARNAMEDBUFFERDATAPROC = void (*)(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void* data);
export using PFNGLCLEARNAMEDBUFFERSUBDATAPROC = void (*)(GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void* data);
export using PFNGLMAPNAMEDBUFFERPROC = void* (*)(GLuint buffer, GLenum access);
export using PFNGLMAPNAMEDBUFFERRANGEPROC = void* (*)(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access);
export using PFNGLUNMAPNAMEDBUFFERPROC = GLboolean(*)(GLuint buffer);
export using PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC = void (*)(GLuint buffer, GLintptr offset, GLsizeiptr length);
export using PFNGLGETNAMEDBUFFERPARAMETERIVPROC = void (*)(GLuint buffer, GLenum pname, GLint* params);
export using PFNGLGETNAMEDBUFFERPARAMETERI64VPROC = void (*)(GLuint buffer, GLenum pname, GLint64* params);
export using PFNGLGETNAMEDBUFFERPOINTERVPROC = void (*)(GLuint buffer, GLenum pname, void** params);
export using PFNGLGETNAMEDBUFFERSUBDATAPROC = void (*)(GLuint buffer, GLintptr offset, GLsizeiptr size, void* data);
export using PFNGLCREATEFRAMEBUFFERSPROC = void (*)(GLsizei n, GLuint* framebuffers);
export using PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC = void (*)(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
export using PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC = void (*)(GLuint framebuffer, GLenum pname, GLint param);
export using PFNGLNAMEDFRAMEBUFFERTEXTUREPROC = void (*)(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level);
export using PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC = void (*)(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer);
export using PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC = void (*)(GLuint framebuffer, GLenum buf);
export using PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC = void (*)(GLuint framebuffer, GLsizei n, const GLenum* bufs);
export using PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC = void (*)(GLuint framebuffer, GLenum src);
export using PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC = void (*)(GLuint framebuffer, GLsizei numAttachments, const GLenum* attachments);
export using PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC = void (*)(GLuint framebuffer, GLsizei numAttachments, const GLenum* attachments, GLint x, GLint y, GLsizei width, GLsizei height);
export using PFNGLCLEARNAMEDFRAMEBUFFERIVPROC = void (*)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint* value);
export using PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC = void (*)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint* value);
export using PFNGLCLEARNAMEDFRAMEBUFFERFVPROC = void (*)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat* value);
export using PFNGLCLEARNAMEDFRAMEBUFFERFIPROC = void (*)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
export using PFNGLBLITNAMEDFRAMEBUFFERPROC = void (*)(GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
export using PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC = GLenum(*)(GLuint framebuffer, GLenum target);
export using PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC = void (*)(GLuint framebuffer, GLenum pname, GLint* param);
export using PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC = void (*)(GLuint framebuffer, GLenum attachment, GLenum pname, GLint* params);
export using PFNGLCREATERENDERBUFFERSPROC = void (*)(GLsizei n, GLuint* renderbuffers);
export using PFNGLNAMEDRENDERBUFFERSTORAGEPROC = void (*)(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height);
export using PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC = void (*)(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
export using PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC = void (*)(GLuint renderbuffer, GLenum pname, GLint* params);
export using PFNGLCREATETEXTURESPROC = void (*)(GLenum target, GLsizei n, GLuint* textures);
export using PFNGLTEXTUREBUFFERPROC = void (*)(GLuint texture, GLenum internalformat, GLuint buffer);
export using PFNGLTEXTUREBUFFERRANGEPROC = void (*)(GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
export using PFNGLTEXTURESTORAGE1DPROC = void (*)(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width);
export using PFNGLTEXTURESTORAGE2DPROC = void (*)(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
export using PFNGLTEXTURESTORAGE3DPROC = void (*)(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
export using PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC = void (*)(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
export using PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC = void (*)(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
export using PFNGLTEXTURESUBIMAGE1DPROC = void (*)(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void* pixels);
export using PFNGLTEXTURESUBIMAGE2DPROC = void (*)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void* pixels);
export using PFNGLTEXTURESUBIMAGE3DPROC = void (*)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void* pixels);
export using PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC = void (*)(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void* data);
export using PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC = void (*)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void* data);
export using PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC = void (*)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void* data);
export using PFNGLCOPYTEXTURESUBIMAGE1DPROC = void (*)(GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
export using PFNGLCOPYTEXTURESUBIMAGE2DPROC = void (*)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
export using PFNGLCOPYTEXTURESUBIMAGE3DPROC = void (*)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
export using PFNGLTEXTUREPARAMETERFPROC = void (*)(GLuint texture, GLenum pname, GLfloat param);
export using PFNGLTEXTUREPARAMETERFVPROC = void (*)(GLuint texture, GLenum pname, const GLfloat* param);
export using PFNGLTEXTUREPARAMETERIPROC = void (*)(GLuint texture, GLenum pname, GLint param);
export using PFNGLTEXTUREPARAMETERIIVPROC = void (*)(GLuint texture, GLenum pname, const GLint* params);
export using PFNGLTEXTUREPARAMETERIUIVPROC = void (*)(GLuint texture, GLenum pname, const GLuint* params);
export using PFNGLTEXTUREPARAMETERIVPROC = void (*)(GLuint texture, GLenum pname, const GLint* param);
export using PFNGLGENERATETEXTUREMIPMAPPROC = void (*)(GLuint texture);
export using PFNGLBINDTEXTUREUNITPROC = void (*)(GLuint unit, GLuint texture);
export using PFNGLGETTEXTUREIMAGEPROC = void (*)(GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void* pixels);
export using PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC = void (*)(GLuint texture, GLint level, GLsizei bufSize, void* pixels);
export using PFNGLGETTEXTURELEVELPARAMETERFVPROC = void (*)(GLuint texture, GLint level, GLenum pname, GLfloat* params);
export using PFNGLGETTEXTURELEVELPARAMETERIVPROC = void (*)(GLuint texture, GLint level, GLenum pname, GLint* params);
export using PFNGLGETTEXTUREPARAMETERFVPROC = void (*)(GLuint texture, GLenum pname, GLfloat* params);
export using PFNGLGETTEXTUREPARAMETERIIVPROC = void (*)(GLuint texture, GLenum pname, GLint* params);
export using PFNGLGETTEXTUREPARAMETERIUIVPROC = void (*)(GLuint texture, GLenum pname, GLuint* params);
export using PFNGLGETTEXTUREPARAMETERIVPROC = void (*)(GLuint texture, GLenum pname, GLint* params);
export using PFNGLCREATEVERTEXARRAYSPROC = void (*)(GLsizei n, GLuint* arrays);
export using PFNGLDISABLEVERTEXARRAYATTRIBPROC = void (*)(GLuint vaobj, GLuint index);
export using PFNGLENABLEVERTEXARRAYATTRIBPROC = void (*)(GLuint vaobj, GLuint index);
export using PFNGLVERTEXARRAYELEMENTBUFFERPROC = void (*)(GLuint vaobj, GLuint buffer);
export using PFNGLVERTEXARRAYVERTEXBUFFERPROC = void (*)(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
export using PFNGLVERTEXARRAYVERTEXBUFFERSPROC = void (*)(GLuint vaobj, GLuint first, GLsizei count, const GLuint* buffers, const GLintptr* offsets, const GLsizei* strides);
export using PFNGLVERTEXARRAYATTRIBBINDINGPROC = void (*)(GLuint vaobj, GLuint attribindex, GLuint bindingindex);
export using PFNGLVERTEXARRAYATTRIBFORMATPROC = void (*)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
export using PFNGLVERTEXARRAYATTRIBIFORMATPROC = void (*)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
export using PFNGLVERTEXARRAYATTRIBLFORMATPROC = void (*)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
export using PFNGLVERTEXARRAYBINDINGDIVISORPROC = void (*)(GLuint vaobj, GLuint bindingindex, GLuint divisor);
export using PFNGLGETVERTEXARRAYIVPROC = void (*)(GLuint vaobj, GLenum pname, GLint* param);
export using PFNGLGETVERTEXARRAYINDEXEDIVPROC = void (*)(GLuint vaobj, GLuint index, GLenum pname, GLint* param);
export using PFNGLGETVERTEXARRAYINDEXED64IVPROC = void (*)(GLuint vaobj, GLuint index, GLenum pname, GLint64* param);
export using PFNGLCREATESAMPLERSPROC = void (*)(GLsizei n, GLuint* samplers);
export using PFNGLCREATEPROGRAMPIPELINESPROC = void (*)(GLsizei n, GLuint* pipelines);
export using PFNGLCREATEQUERIESPROC = void (*)(GLenum target, GLsizei n, GLuint* ids);
export using PFNGLGETQUERYBUFFEROBJECTI64VPROC = void (*)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
export using PFNGLGETQUERYBUFFEROBJECTIVPROC = void (*)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
export using PFNGLGETQUERYBUFFEROBJECTUI64VPROC = void (*)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
export using PFNGLGETQUERYBUFFEROBJECTUIVPROC = void (*)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
export using PFNGLMEMORYBARRIERBYREGIONPROC = void (*)(GLbitfield barriers);
export using PFNGLGETTEXTURESUBIMAGEPROC = void (*)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void* pixels);
export using PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC = void (*)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void* pixels);
export using PFNGLGETGRAPHICSRESETSTATUSPROC = GLenum(*)(void);
export using PFNGLGETNCOMPRESSEDTEXIMAGEPROC = void (*)(GLenum target, GLint lod, GLsizei bufSize, void* pixels);
export using PFNGLGETNTEXIMAGEPROC = void (*)(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void* pixels);
export using PFNGLGETNUNIFORMDVPROC = void (*)(GLuint program, GLint location, GLsizei bufSize, GLdouble* params);
export using PFNGLGETNUNIFORMFVPROC = void (*)(GLuint program, GLint location, GLsizei bufSize, GLfloat* params);
export using PFNGLGETNUNIFORMIVPROC = void (*)(GLuint program, GLint location, GLsizei bufSize, GLint* params);
export using PFNGLGETNUNIFORMUIVPROC = void (*)(GLuint program, GLint location, GLsizei bufSize, GLuint* params);
export using PFNGLREADNPIXELSPROC = void (*)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void* data);
export using PFNGLGETNMAPDVPROC = void (*)(GLenum target, GLenum query, GLsizei bufSize, GLdouble* v);
export using PFNGLGETNMAPFVPROC = void (*)(GLenum target, GLenum query, GLsizei bufSize, GLfloat* v);
export using PFNGLGETNMAPIVPROC = void (*)(GLenum target, GLenum query, GLsizei bufSize, GLint* v);
export using PFNGLGETNPIXELMAPFVPROC = void (*)(GLenum map, GLsizei bufSize, GLfloat* values);
export using PFNGLGETNPIXELMAPUIVPROC = void (*)(GLenum map, GLsizei bufSize, GLuint* values);
export using PFNGLGETNPIXELMAPUSVPROC = void (*)(GLenum map, GLsizei bufSize, GLushort* values);
export using PFNGLGETNPOLYGONSTIPPLEPROC = void (*)(GLsizei bufSize, GLubyte* pattern);
export using PFNGLGETNCOLORTABLEPROC = void (*)(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void* table);
export using PFNGLGETNCONVOLUTIONFILTERPROC = void (*)(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void* image);
export using PFNGLGETNSEPARABLEFILTERPROC = void (*)(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void* row, GLsizei columnBufSize, void* column, void* span);
export using PFNGLGETNHISTOGRAMPROC = void (*)(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void* values);
export using PFNGLGETNMINMAXPROC = void (*)(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void* values);
export using PFNGLTEXTUREBARRIERPROC = void (*)(void);

// Export the function pointers
export PFNGLCLIPCONTROLPROC glClipControl = nullptr;
export PFNGLCREATETRANSFORMFEEDBACKSPROC glCreateTransformFeedbacks = nullptr;
export PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC glTransformFeedbackBufferBase = nullptr;
export PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC glTransformFeedbackBufferRange = nullptr;
export PFNGLGETTRANSFORMFEEDBACKIVPROC glGetTransformFeedbackiv = nullptr;
export PFNGLGETTRANSFORMFEEDBACKI_VPROC glGetTransformFeedbacki_v = nullptr;
export PFNGLGETTRANSFORMFEEDBACKI64_VPROC glGetTransformFeedbacki64_v = nullptr;
export PFNGLCREATEBUFFERSPROC glCreateBuffers = nullptr;
export PFNGLNAMEDBUFFERSTORAGEPROC glNamedBufferStorage = nullptr;
export PFNGLNAMEDBUFFERDATAPROC glNamedBufferData = nullptr;
export PFNGLNAMEDBUFFERSUBDATAPROC glNamedBufferSubData = nullptr;
export PFNGLCOPYNAMEDBUFFERSUBDATAPROC glCopyNamedBufferSubData = nullptr;
export PFNGLCLEARNAMEDBUFFERDATAPROC glClearNamedBufferData = nullptr;
export PFNGLCLEARNAMEDBUFFERSUBDATAPROC glClearNamedBufferSubData = nullptr;
export PFNGLMAPNAMEDBUFFERPROC glMapNamedBuffer = nullptr;
export PFNGLMAPNAMEDBUFFERRANGEPROC glMapNamedBufferRange = nullptr;
export PFNGLUNMAPNAMEDBUFFERPROC glUnmapNamedBuffer = nullptr;
export PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC glFlushMappedNamedBufferRange = nullptr;
export PFNGLGETNAMEDBUFFERPARAMETERIVPROC glGetNamedBufferParameteriv = nullptr;
export PFNGLGETNAMEDBUFFERPARAMETERI64VPROC glGetNamedBufferParameteri64v = nullptr;
export PFNGLGETNAMEDBUFFERPOINTERVPROC glGetNamedBufferPointerv = nullptr;
export PFNGLGETNAMEDBUFFERSUBDATAPROC glGetNamedBufferSubData = nullptr;
export PFNGLCREATEFRAMEBUFFERSPROC glCreateFramebuffers = nullptr;
export PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC glNamedFramebufferRenderbuffer = nullptr;
export PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC glNamedFramebufferParameteri = nullptr;
export PFNGLNAMEDFRAMEBUFFERTEXTUREPROC glNamedFramebufferTexture = nullptr;
export PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC glNamedFramebufferTextureLayer = nullptr;
export PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC glNamedFramebufferDrawBuffer = nullptr;
export PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC glNamedFramebufferDrawBuffers = nullptr;
export PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC glNamedFramebufferReadBuffer = nullptr;
export PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC glInvalidateNamedFramebufferData = nullptr;
export PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC glInvalidateNamedFramebufferSubData = nullptr;
export PFNGLCLEARNAMEDFRAMEBUFFERIVPROC glClearNamedFramebufferiv = nullptr;
export PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC glClearNamedFramebufferuiv = nullptr;
export PFNGLCLEARNAMEDFRAMEBUFFERFVPROC glClearNamedFramebufferfv = nullptr;
export PFNGLCLEARNAMEDFRAMEBUFFERFIPROC glClearNamedFramebufferfi = nullptr;
export PFNGLBLITNAMEDFRAMEBUFFERPROC glBlitNamedFramebuffer = nullptr;
export PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC glCheckNamedFramebufferStatus = nullptr;
export PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC glGetNamedFramebufferParameteriv = nullptr;
export PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC glGetNamedFramebufferAttachmentParameteriv = nullptr;
export PFNGLCREATERENDERBUFFERSPROC glCreateRenderbuffers = nullptr;
export PFNGLNAMEDRENDERBUFFERSTORAGEPROC glNamedRenderbufferStorage = nullptr;
export PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC glNamedRenderbufferStorageMultisample = nullptr;
export PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC glGetNamedRenderbufferParameteriv = nullptr;
export PFNGLCREATETEXTURESPROC glCreateTextures = nullptr;
export PFNGLTEXTUREBUFFERPROC glTextureBuffer = nullptr;
export PFNGLTEXTUREBUFFERRANGEPROC glTextureBufferRange = nullptr;
export PFNGLTEXTURESTORAGE1DPROC glTextureStorage1D = nullptr;
export PFNGLTEXTURESTORAGE2DPROC glTextureStorage2D = nullptr;
export PFNGLTEXTURESTORAGE3DPROC glTextureStorage3D = nullptr;
export PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC glTextureStorage2DMultisample = nullptr;
export PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC glTextureStorage3DMultisample = nullptr;
export PFNGLTEXTURESUBIMAGE1DPROC glTextureSubImage1D = nullptr;
export PFNGLTEXTURESUBIMAGE2DPROC glTextureSubImage2D = nullptr;
export PFNGLTEXTURESUBIMAGE3DPROC glTextureSubImage3D = nullptr;
export PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC glCompressedTextureSubImage1D = nullptr;
export PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC glCompressedTextureSubImage2D = nullptr;
export PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC glCompressedTextureSubImage3D = nullptr;
export PFNGLCOPYTEXTURESUBIMAGE1DPROC glCopyTextureSubImage1D = nullptr;
export PFNGLCOPYTEXTURESUBIMAGE2DPROC glCopyTextureSubImage2D = nullptr;
export PFNGLCOPYTEXTURESUBIMAGE3DPROC glCopyTextureSubImage3D = nullptr;
export PFNGLTEXTUREPARAMETERFPROC glTextureParameterf = nullptr;
export PFNGLTEXTUREPARAMETERFVPROC glTextureParameterfv = nullptr;
export PFNGLTEXTUREPARAMETERIPROC glTextureParameteri = nullptr;
export PFNGLTEXTUREPARAMETERIIVPROC glTextureParameterIiv = nullptr;
export PFNGLTEXTUREPARAMETERIUIVPROC glTextureParameterIuiv = nullptr;
export PFNGLTEXTUREPARAMETERIVPROC glTextureParameteriv = nullptr;
export PFNGLGENERATETEXTUREMIPMAPPROC glGenerateTextureMipmap = nullptr;
export PFNGLBINDTEXTUREUNITPROC glBindTextureUnit = nullptr;
export PFNGLGETTEXTUREIMAGEPROC glGetTextureImage = nullptr;
export PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC glGetCompressedTextureImage = nullptr;
export PFNGLGETTEXTURELEVELPARAMETERFVPROC glGetTextureLevelParameterfv = nullptr;
export PFNGLGETTEXTURELEVELPARAMETERIVPROC glGetTextureLevelParameteriv = nullptr;
export PFNGLGETTEXTUREPARAMETERFVPROC glGetTextureParameterfv = nullptr;
export PFNGLGETTEXTUREPARAMETERIIVPROC glGetTextureParameterIiv = nullptr;
export PFNGLGETTEXTUREPARAMETERIUIVPROC glGetTextureParameterIuiv = nullptr;
export PFNGLGETTEXTUREPARAMETERIVPROC glGetTextureParameteriv = nullptr;
export PFNGLCREATEVERTEXARRAYSPROC glCreateVertexArrays = nullptr;
export PFNGLDISABLEVERTEXARRAYATTRIBPROC glDisableVertexArrayAttrib = nullptr;
export PFNGLENABLEVERTEXARRAYATTRIBPROC glEnableVertexArrayAttrib = nullptr;
export PFNGLVERTEXARRAYELEMENTBUFFERPROC glVertexArrayElementBuffer = nullptr;
export PFNGLVERTEXARRAYVERTEXBUFFERPROC glVertexArrayVertexBuffer = nullptr;
export PFNGLVERTEXARRAYVERTEXBUFFERSPROC glVertexArrayVertexBuffers = nullptr;
export PFNGLVERTEXARRAYATTRIBBINDINGPROC glVertexArrayAttribBinding = nullptr;
export PFNGLVERTEXARRAYATTRIBFORMATPROC glVertexArrayAttribFormat = nullptr;
export PFNGLVERTEXARRAYATTRIBIFORMATPROC glVertexArrayAttribIFormat = nullptr;
export PFNGLVERTEXARRAYATTRIBLFORMATPROC glVertexArrayAttribLFormat = nullptr;
export PFNGLVERTEXARRAYBINDINGDIVISORPROC glVertexArrayBindingDivisor = nullptr;
export PFNGLGETVERTEXARRAYIVPROC glGetVertexArrayiv = nullptr;
export PFNGLGETVERTEXARRAYINDEXEDIVPROC glGetVertexArrayIndexediv = nullptr;
export PFNGLGETVERTEXARRAYINDEXED64IVPROC glGetVertexArrayIndexed64iv = nullptr;
export PFNGLCREATESAMPLERSPROC glCreateSamplers = nullptr;
export PFNGLCREATEPROGRAMPIPELINESPROC glCreateProgramPipelines = nullptr;
export PFNGLCREATEQUERIESPROC glCreateQueries = nullptr;
export PFNGLGETQUERYBUFFEROBJECTI64VPROC glGetQueryBufferObjecti64v = nullptr;
export PFNGLGETQUERYBUFFEROBJECTIVPROC glGetQueryBufferObjectiv = nullptr;
export PFNGLGETQUERYBUFFEROBJECTUI64VPROC glGetQueryBufferObjectui64v = nullptr;
export PFNGLGETQUERYBUFFEROBJECTUIVPROC glGetQueryBufferObjectuiv = nullptr;
export PFNGLMEMORYBARRIERBYREGIONPROC glMemoryBarrierByRegion = nullptr;
export PFNGLGETTEXTURESUBIMAGEPROC glGetTextureSubImage = nullptr;
export PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC glGetCompressedTextureSubImage = nullptr;
export PFNGLGETGRAPHICSRESETSTATUSPROC glGetGraphicsResetStatus = nullptr;
export PFNGLGETNCOMPRESSEDTEXIMAGEPROC glGetnCompressedTexImage = nullptr;
export PFNGLGETNTEXIMAGEPROC glGetnTexImage = nullptr;
export PFNGLGETNUNIFORMDVPROC glGetnUniformdv = nullptr;
export PFNGLGETNUNIFORMFVPROC glGetnUniformfv = nullptr;
export PFNGLGETNUNIFORMIVPROC glGetnUniformiv = nullptr;
export PFNGLGETNUNIFORMUIVPROC glGetnUniformuiv = nullptr;
export PFNGLREADNPIXELSPROC glReadnPixels = nullptr;
export PFNGLGETNMAPDVPROC glGetnMapdv = nullptr;
export PFNGLGETNMAPFVPROC glGetnMapfv = nullptr;
export PFNGLGETNMAPIVPROC glGetnMapiv = nullptr;
export PFNGLGETNPIXELMAPFVPROC glGetnPixelMapfv = nullptr;
export PFNGLGETNPIXELMAPUIVPROC glGetnPixelMapuiv = nullptr;
export PFNGLGETNPIXELMAPUSVPROC glGetnPixelMapusv = nullptr;
export PFNGLGETNPOLYGONSTIPPLEPROC glGetnPolygonStipple = nullptr;
export PFNGLGETNCOLORTABLEPROC glGetnColorTable = nullptr;
export PFNGLGETNCONVOLUTIONFILTERPROC glGetnConvolutionFilter = nullptr;
export PFNGLGETNSEPARABLEFILTERPROC glGetnSeparableFilter = nullptr;
export PFNGLGETNHISTOGRAMPROC glGetnHistogram = nullptr;
export PFNGLGETNMINMAXPROC glGetnMinmax = nullptr;
export PFNGLTEXTUREBARRIERPROC glTextureBarrier = nullptr;

export namespace GLAD_4_5 {
	void load_GL_RECURSIVE(GLADloadproc load) {
		glClipControl = gladLoadFunction<PFNGLCLIPCONTROLPROC>("glClipControl", load);
		glCreateTransformFeedbacks = gladLoadFunction<PFNGLCREATETRANSFORMFEEDBACKSPROC>("glCreateTransformFeedbacks", load);
		glTransformFeedbackBufferBase = gladLoadFunction<PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC>("glTransformFeedbackBufferBase", load);
		glTransformFeedbackBufferRange = gladLoadFunction<PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC>("glTransformFeedbackBufferRange", load);
		glGetTransformFeedbackiv = gladLoadFunction<PFNGLGETTRANSFORMFEEDBACKIVPROC>("glGetTransformFeedbackiv", load);
		glGetTransformFeedbacki_v = gladLoadFunction<PFNGLGETTRANSFORMFEEDBACKI_VPROC>("glGetTransformFeedbacki_v", load);
		glGetTransformFeedbacki64_v = gladLoadFunction<PFNGLGETTRANSFORMFEEDBACKI64_VPROC>("glGetTransformFeedbacki64_v", load);
		glCreateBuffers = gladLoadFunction<PFNGLCREATEBUFFERSPROC>("glCreateBuffers", load);
		glNamedBufferStorage = gladLoadFunction<PFNGLNAMEDBUFFERSTORAGEPROC>("glNamedBufferStorage", load);
		glNamedBufferData = gladLoadFunction<PFNGLNAMEDBUFFERDATAPROC>("glNamedBufferData", load);
		glNamedBufferSubData = gladLoadFunction<PFNGLNAMEDBUFFERSUBDATAPROC>("glNamedBufferSubData", load);
		glCopyNamedBufferSubData = gladLoadFunction<PFNGLCOPYNAMEDBUFFERSUBDATAPROC>("glCopyNamedBufferSubData", load);
		glClearNamedBufferData = gladLoadFunction<PFNGLCLEARNAMEDBUFFERDATAPROC>("glClearNamedBufferData", load);
		glClearNamedBufferSubData = gladLoadFunction<PFNGLCLEARNAMEDBUFFERSUBDATAPROC>("glClearNamedBufferSubData", load);
		glMapNamedBuffer = gladLoadFunction<PFNGLMAPNAMEDBUFFERPROC>("glMapNamedBuffer", load);
		glMapNamedBufferRange = gladLoadFunction<PFNGLMAPNAMEDBUFFERRANGEPROC>("glMapNamedBufferRange", load);
		glUnmapNamedBuffer = gladLoadFunction<PFNGLUNMAPNAMEDBUFFERPROC>("glUnmapNamedBuffer", load);
		glFlushMappedNamedBufferRange = gladLoadFunction<PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC>("glFlushMappedNamedBufferRange", load);
		glGetNamedBufferParameteriv = gladLoadFunction<PFNGLGETNAMEDBUFFERPARAMETERIVPROC>("glGetNamedBufferParameteriv", load);
		glGetNamedBufferParameteri64v = gladLoadFunction<PFNGLGETNAMEDBUFFERPARAMETERI64VPROC>("glGetNamedBufferParameteri64v", load);
		glGetNamedBufferPointerv = gladLoadFunction<PFNGLGETNAMEDBUFFERPOINTERVPROC>("glGetNamedBufferPointerv", load);
		glGetNamedBufferSubData = gladLoadFunction<PFNGLGETNAMEDBUFFERSUBDATAPROC>("glGetNamedBufferSubData", load);
		glCreateFramebuffers = gladLoadFunction<PFNGLCREATEFRAMEBUFFERSPROC>("glCreateFramebuffers", load);
		glNamedFramebufferRenderbuffer = gladLoadFunction<PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC>("glNamedFramebufferRenderbuffer", load);
		glNamedFramebufferParameteri = gladLoadFunction<PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC>("glNamedFramebufferParameteri", load);
		glNamedFramebufferTexture = gladLoadFunction<PFNGLNAMEDFRAMEBUFFERTEXTUREPROC>("glNamedFramebufferTexture", load);
		glNamedFramebufferTextureLayer = gladLoadFunction<PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC>("glNamedFramebufferTextureLayer", load);
		glNamedFramebufferDrawBuffer = gladLoadFunction<PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC>("glNamedFramebufferDrawBuffer", load);
		glNamedFramebufferDrawBuffers = gladLoadFunction<PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC>("glNamedFramebufferDrawBuffers", load);
		glNamedFramebufferReadBuffer = gladLoadFunction<PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC>("glNamedFramebufferReadBuffer", load);
		glInvalidateNamedFramebufferData = gladLoadFunction<PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC>("glInvalidateNamedFramebufferData", load);
		glInvalidateNamedFramebufferSubData = gladLoadFunction<PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC>("glInvalidateNamedFramebufferSubData", load);
		glClearNamedFramebufferiv = gladLoadFunction<PFNGLCLEARNAMEDFRAMEBUFFERIVPROC>("glClearNamedFramebufferiv", load);
		glClearNamedFramebufferuiv = gladLoadFunction<PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC>("glClearNamedFramebufferuiv", load);
		glClearNamedFramebufferfv = gladLoadFunction<PFNGLCLEARNAMEDFRAMEBUFFERFVPROC>("glClearNamedFramebufferfv", load);
		glClearNamedFramebufferfi = gladLoadFunction<PFNGLCLEARNAMEDFRAMEBUFFERFIPROC>("glClearNamedFramebufferfi", load);
		glBlitNamedFramebuffer = gladLoadFunction<PFNGLBLITNAMEDFRAMEBUFFERPROC>("glBlitNamedFramebuffer", load);
		glCheckNamedFramebufferStatus = gladLoadFunction<PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC>("glCheckNamedFramebufferStatus", load);
		glGetNamedFramebufferParameteriv = gladLoadFunction<PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC>("glGetNamedFramebufferParameteriv", load);
		glGetNamedFramebufferAttachmentParameteriv = gladLoadFunction<PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC>("glGetNamedFramebufferAttachmentParameteriv", load);
		glCreateRenderbuffers = gladLoadFunction<PFNGLCREATERENDERBUFFERSPROC>("glCreateRenderbuffers", load);
		glNamedRenderbufferStorage = gladLoadFunction<PFNGLNAMEDRENDERBUFFERSTORAGEPROC>("glNamedRenderbufferStorage", load);
		glNamedRenderbufferStorageMultisample = gladLoadFunction<PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC>("glNamedRenderbufferStorageMultisample", load);
		glGetNamedRenderbufferParameteriv = gladLoadFunction<PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC>("glGetNamedRenderbufferParameteriv", load);
		glCreateTextures = gladLoadFunction<PFNGLCREATETEXTURESPROC>("glCreateTextures", load);
		glTextureBuffer = gladLoadFunction<PFNGLTEXTUREBUFFERPROC>("glTextureBuffer", load);
		glTextureBufferRange = gladLoadFunction<PFNGLTEXTUREBUFFERRANGEPROC>("glTextureBufferRange", load);
		glTextureStorage1D = gladLoadFunction<PFNGLTEXTURESTORAGE1DPROC>("glTextureStorage1D", load);
		glTextureStorage2D = gladLoadFunction<PFNGLTEXTURESTORAGE2DPROC>("glTextureStorage2D", load);
		glTextureStorage3D = gladLoadFunction<PFNGLTEXTURESTORAGE3DPROC>("glTextureStorage3D", load);
		glTextureStorage2DMultisample = gladLoadFunction<PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC>("glTextureStorage2DMultisample", load);
		glTextureStorage3DMultisample = gladLoadFunction<PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC>("glTextureStorage3DMultisample", load);
		glTextureSubImage1D = gladLoadFunction<PFNGLTEXTURESUBIMAGE1DPROC>("glTextureSubImage1D", load);
		glTextureSubImage2D = gladLoadFunction<PFNGLTEXTURESUBIMAGE2DPROC>("glTextureSubImage2D", load);
		glTextureSubImage3D = gladLoadFunction<PFNGLTEXTURESUBIMAGE3DPROC>("glTextureSubImage3D", load);
		glCompressedTextureSubImage1D = gladLoadFunction<PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC>("glCompressedTextureSubImage1D", load);
		glCompressedTextureSubImage2D = gladLoadFunction<PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC>("glCompressedTextureSubImage2D", load);
		glCompressedTextureSubImage3D = gladLoadFunction<PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC>("glCompressedTextureSubImage3D", load);
		glCopyTextureSubImage1D = gladLoadFunction<PFNGLCOPYTEXTURESUBIMAGE1DPROC>("glCopyTextureSubImage1D", load);
		glCopyTextureSubImage2D = gladLoadFunction<PFNGLCOPYTEXTURESUBIMAGE2DPROC>("glCopyTextureSubImage2D", load);
		glCopyTextureSubImage3D = gladLoadFunction<PFNGLCOPYTEXTURESUBIMAGE3DPROC>("glCopyTextureSubImage3D", load);
		glTextureParameterf = gladLoadFunction<PFNGLTEXTUREPARAMETERFPROC>("glTextureParameterf", load);
		glTextureParameterfv = gladLoadFunction<PFNGLTEXTUREPARAMETERFVPROC>("glTextureParameterfv", load);
		glTextureParameteri = gladLoadFunction<PFNGLTEXTUREPARAMETERIPROC>("glTextureParameteri", load);
		glTextureParameterIiv = gladLoadFunction<PFNGLTEXTUREPARAMETERIIVPROC>("glTextureParameterIiv", load);
		glTextureParameterIuiv = gladLoadFunction<PFNGLTEXTUREPARAMETERIUIVPROC>("glTextureParameterIuiv", load);
		glTextureParameteriv = gladLoadFunction<PFNGLTEXTUREPARAMETERIVPROC>("glTextureParameteriv", load);
		glGenerateTextureMipmap = gladLoadFunction<PFNGLGENERATETEXTUREMIPMAPPROC>("glGenerateTextureMipmap", load);
		glBindTextureUnit = gladLoadFunction<PFNGLBINDTEXTUREUNITPROC>("glBindTextureUnit", load);
		glGetTextureImage = gladLoadFunction<PFNGLGETTEXTUREIMAGEPROC>("glGetTextureImage", load);
		glGetCompressedTextureImage = gladLoadFunction<PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC>("glGetCompressedTextureImage", load);
		glGetTextureLevelParameterfv = gladLoadFunction<PFNGLGETTEXTURELEVELPARAMETERFVPROC>("glGetTextureLevelParameterfv", load);
		glGetTextureLevelParameteriv = gladLoadFunction<PFNGLGETTEXTURELEVELPARAMETERIVPROC>("glGetTextureLevelParameteriv", load);
		glGetTextureParameterfv = gladLoadFunction<PFNGLGETTEXTUREPARAMETERFVPROC>("glGetTextureParameterfv", load);
		glGetTextureParameterIiv = gladLoadFunction<PFNGLGETTEXTUREPARAMETERIIVPROC>("glGetTextureParameterIiv", load);
		glGetTextureParameterIuiv = gladLoadFunction<PFNGLGETTEXTUREPARAMETERIUIVPROC>("glGetTextureParameterIuiv", load);
		glGetTextureParameteriv = gladLoadFunction<PFNGLGETTEXTUREPARAMETERIVPROC>("glGetTextureParameteriv", load);
		glCreateVertexArrays = gladLoadFunction<PFNGLCREATEVERTEXARRAYSPROC>("glCreateVertexArrays", load);
		glDisableVertexArrayAttrib = gladLoadFunction<PFNGLDISABLEVERTEXARRAYATTRIBPROC>("glDisableVertexArrayAttrib", load);
		glEnableVertexArrayAttrib = gladLoadFunction<PFNGLENABLEVERTEXARRAYATTRIBPROC>("glEnableVertexArrayAttrib", load);
		glVertexArrayElementBuffer = gladLoadFunction<PFNGLVERTEXARRAYELEMENTBUFFERPROC>("glVertexArrayElementBuffer", load);
		glVertexArrayVertexBuffer = gladLoadFunction<PFNGLVERTEXARRAYVERTEXBUFFERPROC>("glVertexArrayVertexBuffer", load);
		glVertexArrayVertexBuffers = gladLoadFunction<PFNGLVERTEXARRAYVERTEXBUFFERSPROC>("glVertexArrayVertexBuffers", load);
		glVertexArrayAttribBinding = gladLoadFunction<PFNGLVERTEXARRAYATTRIBBINDINGPROC>("glVertexArrayAttribBinding", load);
		glVertexArrayAttribFormat = gladLoadFunction<PFNGLVERTEXARRAYATTRIBFORMATPROC>("glVertexArrayAttribFormat", load);
		glVertexArrayAttribIFormat = gladLoadFunction<PFNGLVERTEXARRAYATTRIBIFORMATPROC>("glVertexArrayAttribIFormat", load);
		glVertexArrayAttribLFormat = gladLoadFunction<PFNGLVERTEXARRAYATTRIBLFORMATPROC>("glVertexArrayAttribLFormat", load);
		glVertexArrayBindingDivisor = gladLoadFunction<PFNGLVERTEXARRAYBINDINGDIVISORPROC>("glVertexArrayBindingDivisor", load);
		glGetVertexArrayiv = gladLoadFunction<PFNGLGETVERTEXARRAYIVPROC>("glGetVertexArrayiv", load);
		glGetVertexArrayIndexediv = gladLoadFunction<PFNGLGETVERTEXARRAYINDEXEDIVPROC>("glGetVertexArrayIndexediv", load);
		glGetVertexArrayIndexed64iv = gladLoadFunction<PFNGLGETVERTEXARRAYINDEXED64IVPROC>("glGetVertexArrayIndexed64iv", load);
		glCreateSamplers = gladLoadFunction<PFNGLCREATESAMPLERSPROC>("glCreateSamplers", load);
		glCreateProgramPipelines = gladLoadFunction<PFNGLCREATEPROGRAMPIPELINESPROC>("glCreateProgramPipelines", load);
		glCreateQueries = gladLoadFunction<PFNGLCREATEQUERIESPROC>("glCreateQueries", load);
		glGetQueryBufferObjecti64v = gladLoadFunction<PFNGLGETQUERYBUFFEROBJECTI64VPROC>("glGetQueryBufferObjecti64v", load);
		glGetQueryBufferObjectiv = gladLoadFunction<PFNGLGETQUERYBUFFEROBJECTIVPROC>("glGetQueryBufferObjectiv", load);
		glGetQueryBufferObjectui64v = gladLoadFunction<PFNGLGETQUERYBUFFEROBJECTUI64VPROC>("glGetQueryBufferObjectui64v", load);
		glGetQueryBufferObjectuiv = gladLoadFunction<PFNGLGETQUERYBUFFEROBJECTUIVPROC>("glGetQueryBufferObjectuiv", load);
		glMemoryBarrierByRegion = gladLoadFunction<PFNGLMEMORYBARRIERBYREGIONPROC>("glMemoryBarrierByRegion", load);
		glGetTextureSubImage = gladLoadFunction<PFNGLGETTEXTURESUBIMAGEPROC>("glGetTextureSubImage", load);
		glGetCompressedTextureSubImage = gladLoadFunction<PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC>("glGetCompressedTextureSubImage", load);
		glGetGraphicsResetStatus = gladLoadFunction<PFNGLGETGRAPHICSRESETSTATUSPROC>("glGetGraphicsResetStatus", load);
		glGetnCompressedTexImage = gladLoadFunction<PFNGLGETNCOMPRESSEDTEXIMAGEPROC>("glGetnCompressedTexImage", load);
		glGetnTexImage = gladLoadFunction<PFNGLGETNTEXIMAGEPROC>("glGetnTexImage", load);
		glGetnUniformdv = gladLoadFunction<PFNGLGETNUNIFORMDVPROC>("glGetnUniformdv", load);
		glGetnUniformfv = gladLoadFunction<PFNGLGETNUNIFORMFVPROC>("glGetnUniformfv", load);
		glGetnUniformiv = gladLoadFunction<PFNGLGETNUNIFORMIVPROC>("glGetnUniformiv", load);
		glGetnUniformuiv = gladLoadFunction<PFNGLGETNUNIFORMUIVPROC>("glGetnUniformuiv", load);
		glReadnPixels = gladLoadFunction<PFNGLREADNPIXELSPROC>("glReadnPixels", load);
		glGetnMapdv = gladLoadFunction<PFNGLGETNMAPDVPROC>("glGetnMapdv", load);
		glGetnMapfv = gladLoadFunction<PFNGLGETNMAPFVPROC>("glGetnMapfv", load);
		glGetnMapiv = gladLoadFunction<PFNGLGETNMAPIVPROC>("glGetnMapiv", load);
		glGetnPixelMapfv = gladLoadFunction<PFNGLGETNPIXELMAPFVPROC>("glGetnPixelMapfv", load);
		glGetnPixelMapuiv = gladLoadFunction<PFNGLGETNPIXELMAPUIVPROC>("glGetnPixelMapuiv", load);
		glGetnPixelMapusv = gladLoadFunction<PFNGLGETNPIXELMAPUSVPROC>("glGetnPixelMapusv", load);
		glGetnPolygonStipple = gladLoadFunction<PFNGLGETNPOLYGONSTIPPLEPROC>("glGetnPolygonStipple", load);
		glGetnColorTable = gladLoadFunction<PFNGLGETNCOLORTABLEPROC>("glGetnColorTable", load);
		glGetnConvolutionFilter = gladLoadFunction<PFNGLGETNCONVOLUTIONFILTERPROC>("glGetnConvolutionFilter", load);
		glGetnSeparableFilter = gladLoadFunction<PFNGLGETNSEPARABLEFILTERPROC>("glGetnSeparableFilter", load);
		glGetnHistogram = gladLoadFunction<PFNGLGETNHISTOGRAMPROC>("glGetnHistogram", load);
		glGetnMinmax = gladLoadFunction<PFNGLGETNMINMAXPROC>("glGetnMinmax", load);
		glTextureBarrier = gladLoadFunction<PFNGLTEXTUREBARRIERPROC>("glTextureBarrier", load);

		GLAD_4_4::load_GL_RECURSIVE(load);
	}
}