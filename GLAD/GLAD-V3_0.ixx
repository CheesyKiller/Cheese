export module GLAD:V3_0;

export import :V2_1;

export namespace GLAD {
	// Alias for function pointer types
	using PFNGLCOLORMASKIPROC = void(*)(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
	using PFNGLGETBOOLEANI_VPROC = void(*)(GLenum target, GLuint index, GLboolean* data);
	using PFNGLGETINTEGERI_VPROC = void(*)(GLenum target, GLuint index, GLint* data);
	using PFNGLENABLEIPROC = void(*)(GLenum target, GLuint index);
	using PFNGLDISABLEIPROC = void(*)(GLenum target, GLuint index);
	using PFNGLISENABLEDIPROC = GLboolean(*)(GLenum target, GLuint index);
	using PFNGLBEGINTRANSFORMFEEDBACKPROC = void(*)(GLenum primitiveMode);
	using PFNGLENDTRANSFORMFEEDBACKPROC = void(*)(void);
	using PFNGLBINDBUFFERRANGEPROC = void(*)(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
	using PFNGLBINDBUFFERBASEPROC = void(*)(GLenum target, GLuint index, GLuint buffer);
	using PFNGLTRANSFORMFEEDBACKVARYINGSPROC = void(*)(GLuint program, GLsizei count, const GLchar* const* varyings, GLenum bufferMode);
	using PFNGLGETTRANSFORMFEEDBACKVARYINGPROC = void(*)(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLsizei* size, GLenum* type, GLchar* name);
	using PFNGLCLAMPCOLORPROC = void(*)(GLenum target, GLenum clamp);
	using PFNGLBEGINCONDITIONALRENDERPROC = void(*)(GLuint id, GLenum mode);
	using PFNGLENDCONDITIONALRENDERPROC = void(*)(void);
	using PFNGLVERTEXATTRIBIPOINTERPROC = void(*)(GLuint index, GLint size, GLenum type, GLsizei stride, const void* pointer);
	using PFNGLGETVERTEXATTRIBIIVPROC = void(*)(GLuint index, GLenum pname, GLint* params);
	using PFNGLGETVERTEXATTRIBIUIVPROC = void(*)(GLuint index, GLenum pname, GLuint* params);
	using PFNGLVERTEXATTRIBI1IPROC = void(*)(GLuint index, GLint x);
	using PFNGLVERTEXATTRIBI2IPROC = void(*)(GLuint index, GLint x, GLint y);
	using PFNGLVERTEXATTRIBI3IPROC = void(*)(GLuint index, GLint x, GLint y, GLint z);
	using PFNGLVERTEXATTRIBI4IPROC = void(*)(GLuint index, GLint x, GLint y, GLint z, GLint w);
	using PFNGLVERTEXATTRIBI1UIPROC = void(*)(GLuint index, GLuint x);
	using PFNGLVERTEXATTRIBI2UIPROC = void(*)(GLuint index, GLuint x, GLuint y);
	using PFNGLVERTEXATTRIBI3UIPROC = void(*)(GLuint index, GLuint x, GLuint y, GLuint z);
	using PFNGLVERTEXATTRIBI4UIPROC = void(*)(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
	using PFNGLVERTEXATTRIBI1IVPROC = void(*)(GLuint index, const GLint* v);
	using PFNGLVERTEXATTRIBI2IVPROC = void(*)(GLuint index, const GLint* v);
	using PFNGLVERTEXATTRIBI3IVPROC = void(*)(GLuint index, const GLint* v);
	using PFNGLVERTEXATTRIBI4IVPROC = void(*)(GLuint index, const GLint* v);
	using PFNGLVERTEXATTRIBI1UIVPROC = void(*)(GLuint index, const GLuint* v);
	using PFNGLVERTEXATTRIBI2UIVPROC = void(*)(GLuint index, const GLuint* v);
	using PFNGLVERTEXATTRIBI3UIVPROC = void(*)(GLuint index, const GLuint* v);
	using PFNGLVERTEXATTRIBI4UIVPROC = void(*)(GLuint index, const GLuint* v);
	using PFNGLVERTEXATTRIBI4BVPROC = void(*)(GLuint index, const GLbyte* v);
	using PFNGLVERTEXATTRIBI4SVPROC = void(*)(GLuint index, const GLshort* v);
	using PFNGLVERTEXATTRIBI4UBVPROC = void(*)(GLuint index, const GLubyte* v);
	using PFNGLVERTEXATTRIBI4USVPROC = void(*)(GLuint index, const GLushort* v);
	using PFNGLGETUNIFORMUIVPROC = void(*)(GLuint program, GLint location, GLuint* params);
	using PFNGLBINDFRAGDATALOCATIONPROC = void(*)(GLuint program, GLuint color, const GLchar* name);
	using PFNGLGETFRAGDATALOCATIONPROC = GLint(*)(GLuint program, const GLchar* name);
	using PFNGLUNIFORM1UIPROC = void(*)(GLint location, GLuint v0);
	using PFNGLUNIFORM2UIPROC = void(*)(GLint location, GLuint v0, GLuint v1);
	using PFNGLUNIFORM3UIPROC = void(*)(GLint location, GLuint v0, GLuint v1, GLuint v2);
	using PFNGLUNIFORM4UIPROC = void(*)(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
	using PFNGLUNIFORM1UIVPROC = void(*)(GLint location, GLsizei count, const GLuint* value);
	using PFNGLUNIFORM2UIVPROC = void(*)(GLint location, GLsizei count, const GLuint* value);
	using PFNGLUNIFORM3UIVPROC = void(*)(GLint location, GLsizei count, const GLuint* value);
	using PFNGLUNIFORM4UIVPROC = void(*)(GLint location, GLsizei count, const GLuint* value);
	using PFNGLTEXPARAMETERIIVPROC = void(*)(GLenum target, GLenum pname, const GLint* params);
	using PFNGLTEXPARAMETERIUIVPROC = void(*)(GLenum target, GLenum pname, const GLuint* params);
	using PFNGLGETTEXPARAMETERIIVPROC = void(*)(GLenum target, GLenum pname, GLint* params);
	using PFNGLGETTEXPARAMETERIUIVPROC = void(*)(GLenum target, GLenum pname, GLuint* params);
	using PFNGLCLEARBUFFERIVPROC = void(*)(GLenum buffer, GLint drawbuffer, const GLint* value);
	using PFNGLCLEARBUFFERUIVPROC = void(*)(GLenum buffer, GLint drawbuffer, const GLuint* value);
	using PFNGLCLEARBUFFERFVPROC = void(*)(GLenum buffer, GLint drawbuffer, const GLfloat* value);
	using PFNGLCLEARBUFFERFIPROC = void(*)(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
	using PFNGLGETSTRINGIPROC = const GLubyte* (*)(GLenum name, GLuint index);
	using PFNGLISRENDERBUFFERPROC = GLboolean(*)(GLuint renderbuffer);
	using PFNGLBINDRENDERBUFFERPROC = void(*)(GLenum target, GLuint renderbuffer);
	using PFNGLDELETERENDERBUFFERSPROC = void(*)(GLsizei n, const GLuint* renderbuffers);
	using PFNGLGENRENDERBUFFERSPROC = void(*)(GLsizei n, GLuint* renderbuffers);
	using PFNGLRENDERBUFFERSTORAGEPROC = void(*)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
	using PFNGLGETRENDERBUFFERPARAMETERIVPROC = void(*)(GLenum target, GLenum pname, GLint* params);
	using PFNGLISFRAMEBUFFERPROC = GLboolean(*)(GLuint framebuffer);
	using PFNGLBINDFRAMEBUFFERPROC = void(*)(GLenum target, GLuint framebuffer);
	using PFNGLDELETEFRAMEBUFFERSPROC = void(*)(GLsizei n, const GLuint* framebuffers);
	using PFNGLGENFRAMEBUFFERSPROC = void(*)(GLsizei n, GLuint* framebuffers);
	using PFNGLCHECKFRAMEBUFFERSTATUSPROC = GLenum(*)(GLenum target);
	using PFNGLFRAMEBUFFERTEXTURE1DPROC = void(*)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
	using PFNGLFRAMEBUFFERTEXTURE2DPROC = void(*)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
	using PFNGLFRAMEBUFFERTEXTURE3DPROC = void(*)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
	using PFNGLFRAMEBUFFERRENDERBUFFERPROC = void(*)(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
	using PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC = void(*)(GLenum target, GLenum attachment, GLenum pname, GLint* params);
	using PFNGLGENERATEMIPMAPPROC = void(*)(GLenum target);
	using PFNGLBLITFRAMEBUFFERPROC = void(*)(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
	using PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC = void(*)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
	using PFNGLFRAMEBUFFERTEXTURELAYERPROC = void(*)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
	using PFNGLMAPBUFFERRANGEPROC = void* (*)(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
	using PFNGLFLUSHMAPPEDBUFFERRANGEPROC = void(*)(GLenum target, GLintptr offset, GLsizeiptr length);
	using PFNGLBINDVERTEXARRAYPROC = void(*)(GLuint array);
	using PFNGLDELETEVERTEXARRAYSPROC = void(*)(GLsizei n, const GLuint* arrays);
	using PFNGLGENVERTEXARRAYSPROC = void(*)(GLsizei n, GLuint* arrays);
	using PFNGLISVERTEXARRAYPROC = GLboolean(*)(GLuint array);

	// Declare function pointers as variables
	PFNGLCOLORMASKIPROC glColorMaski = nullptr;
	PFNGLGETBOOLEANI_VPROC glGetBooleani_v = nullptr;
	PFNGLGETINTEGERI_VPROC glGetIntegeri_v = nullptr;
	PFNGLENABLEIPROC glEnablei = nullptr;
	PFNGLDISABLEIPROC glDisablei = nullptr;
	PFNGLISENABLEDIPROC glIsEnabledi = nullptr;
	PFNGLBEGINTRANSFORMFEEDBACKPROC glBeginTransformFeedback = nullptr;
	PFNGLENDTRANSFORMFEEDBACKPROC glEndTransformFeedback = nullptr;
	PFNGLBINDBUFFERRANGEPROC glBindBufferRange = nullptr;
	PFNGLBINDBUFFERBASEPROC glBindBufferBase = nullptr;
	PFNGLTRANSFORMFEEDBACKVARYINGSPROC glTransformFeedbackVaryings = nullptr;
	PFNGLGETTRANSFORMFEEDBACKVARYINGPROC glGetTransformFeedbackVarying = nullptr;
	PFNGLCLAMPCOLORPROC glClampColor = nullptr;
	PFNGLBEGINCONDITIONALRENDERPROC glBeginConditionalRender = nullptr;
	PFNGLENDCONDITIONALRENDERPROC glEndConditionalRender = nullptr;
	PFNGLVERTEXATTRIBIPOINTERPROC glVertexAttribIPointer = nullptr;
	PFNGLGETVERTEXATTRIBIIVPROC glGetVertexAttribIiv = nullptr;
	PFNGLGETVERTEXATTRIBIUIVPROC glGetVertexAttribIuiv = nullptr;
	PFNGLVERTEXATTRIBI1IPROC glVertexAttribI1i = nullptr;
	PFNGLVERTEXATTRIBI2IPROC glVertexAttribI2i = nullptr;
	PFNGLVERTEXATTRIBI3IPROC glVertexAttribI3i = nullptr;
	PFNGLVERTEXATTRIBI4IPROC glVertexAttribI4i = nullptr;
	PFNGLVERTEXATTRIBI1UIPROC glVertexAttribI1ui = nullptr;
	PFNGLVERTEXATTRIBI2UIPROC glVertexAttribI2ui = nullptr;
	PFNGLVERTEXATTRIBI3UIPROC glVertexAttribI3ui = nullptr;
	PFNGLVERTEXATTRIBI4UIPROC glVertexAttribI4ui = nullptr;
	PFNGLVERTEXATTRIBI1IVPROC glVertexAttribI1iv = nullptr;
	PFNGLVERTEXATTRIBI2IVPROC glVertexAttribI2iv = nullptr;
	PFNGLVERTEXATTRIBI3IVPROC glVertexAttribI3iv = nullptr;
	PFNGLVERTEXATTRIBI4IVPROC glVertexAttribI4iv = nullptr;
	PFNGLVERTEXATTRIBI1UIVPROC glVertexAttribI1uiv = nullptr;
	PFNGLVERTEXATTRIBI2UIVPROC glVertexAttribI2uiv = nullptr;
	PFNGLVERTEXATTRIBI3UIVPROC glVertexAttribI3uiv = nullptr;
	PFNGLVERTEXATTRIBI4UIVPROC glVertexAttribI4uiv = nullptr;
	PFNGLVERTEXATTRIBI4BVPROC glVertexAttribI4bv = nullptr;
	PFNGLVERTEXATTRIBI4SVPROC glVertexAttribI4sv = nullptr;
	PFNGLVERTEXATTRIBI4UBVPROC glVertexAttribI4ubv = nullptr;
	PFNGLVERTEXATTRIBI4USVPROC glVertexAttribI4usv = nullptr;
	PFNGLGETUNIFORMUIVPROC glGetUniformuiv = nullptr;
	PFNGLBINDFRAGDATALOCATIONPROC glBindFragDataLocation = nullptr;
	PFNGLGETFRAGDATALOCATIONPROC glGetFragDataLocation = nullptr;
	PFNGLUNIFORM1UIPROC glUniform1ui = nullptr;
	PFNGLUNIFORM2UIPROC glUniform2ui = nullptr;
	PFNGLUNIFORM3UIPROC glUniform3ui = nullptr;
	PFNGLUNIFORM4UIPROC glUniform4ui = nullptr;
	PFNGLUNIFORM1UIVPROC glUniform1uiv = nullptr;
	PFNGLUNIFORM2UIVPROC glUniform2uiv = nullptr;
	PFNGLUNIFORM3UIVPROC glUniform3uiv = nullptr;
	PFNGLUNIFORM4UIVPROC glUniform4uiv = nullptr;
	PFNGLTEXPARAMETERIIVPROC glTexParameterIiv = nullptr;
	PFNGLTEXPARAMETERIUIVPROC glTexParameterIuiv = nullptr;
	PFNGLGETTEXPARAMETERIIVPROC glGetTexParameterIiv = nullptr;
	PFNGLGETTEXPARAMETERIUIVPROC glGetTexParameterIuiv = nullptr;
	PFNGLCLEARBUFFERIVPROC glClearBufferiv = nullptr;
	PFNGLCLEARBUFFERUIVPROC glClearBufferuiv = nullptr;
	PFNGLCLEARBUFFERFVPROC glClearBufferfv = nullptr;
	PFNGLCLEARBUFFERFIPROC glClearBufferfi = nullptr;
	PFNGLGETSTRINGIPROC glGetStringi = nullptr;
	PFNGLISRENDERBUFFERPROC glIsRenderbuffer = nullptr;
	PFNGLBINDRENDERBUFFERPROC glBindRenderbuffer = nullptr;
	PFNGLDELETERENDERBUFFERSPROC glDeleteRenderbuffers = nullptr;
	PFNGLGENRENDERBUFFERSPROC glGenRenderbuffers = nullptr;
	PFNGLRENDERBUFFERSTORAGEPROC glRenderbufferStorage = nullptr;
	PFNGLGETRENDERBUFFERPARAMETERIVPROC glGetRenderbufferParameteriv = nullptr;
	PFNGLISFRAMEBUFFERPROC glIsFramebuffer = nullptr;
	PFNGLBINDFRAMEBUFFERPROC glBindFramebuffer = nullptr;
	PFNGLDELETEFRAMEBUFFERSPROC glDeleteFramebuffers = nullptr;
	PFNGLGENFRAMEBUFFERSPROC glGenFramebuffers = nullptr;
	PFNGLCHECKFRAMEBUFFERSTATUSPROC glCheckFramebufferStatus = nullptr;
	PFNGLFRAMEBUFFERTEXTURE1DPROC glFramebufferTexture1D = nullptr;
	PFNGLFRAMEBUFFERTEXTURE2DPROC glFramebufferTexture2D = nullptr;
	PFNGLFRAMEBUFFERTEXTURE3DPROC glFramebufferTexture3D = nullptr;
	PFNGLFRAMEBUFFERRENDERBUFFERPROC glFramebufferRenderbuffer = nullptr;
	PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC glGetFramebufferAttachmentParameteriv = nullptr;
	PFNGLGENERATEMIPMAPPROC glGenerateMipmap = nullptr;
	PFNGLBLITFRAMEBUFFERPROC glBlitFramebuffer = nullptr;
	PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC glRenderbufferStorageMultisample = nullptr;
	PFNGLFRAMEBUFFERTEXTURELAYERPROC glFramebufferTextureLayer = nullptr;
	PFNGLMAPBUFFERRANGEPROC glMapBufferRange = nullptr;
	PFNGLFLUSHMAPPEDBUFFERRANGEPROC glFlushMappedBufferRange = nullptr;
	PFNGLBINDVERTEXARRAYPROC glBindVertexArray = nullptr;
	PFNGLDELETEVERTEXARRAYSPROC glDeleteVertexArrays = nullptr;
	PFNGLGENVERTEXARRAYSPROC glGenVertexArrays = nullptr;
	PFNGLISVERTEXARRAYPROC glIsVertexArray = nullptr;

	namespace GLAD_3_0 {
		void load_GL_RECURSIVE(GLADloadproc load) {
			glColorMaski = GLAD::gladLoadFunction<PFNGLCOLORMASKIPROC>("glColorMaski", load);
			glGetBooleani_v = GLAD::gladLoadFunction<PFNGLGETBOOLEANI_VPROC>("glGetBooleani_v", load);
			glGetIntegeri_v = GLAD::gladLoadFunction<PFNGLGETINTEGERI_VPROC>("glGetIntegeri_v", load);
			glEnablei = GLAD::gladLoadFunction<PFNGLENABLEIPROC>("glEnablei", load);
			glDisablei = GLAD::gladLoadFunction<PFNGLDISABLEIPROC>("glDisablei", load);
			glIsEnabledi = GLAD::gladLoadFunction<PFNGLISENABLEDIPROC>("glIsEnabledi", load);
			glBeginTransformFeedback = GLAD::gladLoadFunction<PFNGLBEGINTRANSFORMFEEDBACKPROC>("glBeginTransformFeedback", load);
			glEndTransformFeedback = GLAD::gladLoadFunction<PFNGLENDTRANSFORMFEEDBACKPROC>("glEndTransformFeedback", load);
			glBindBufferRange = GLAD::gladLoadFunction<PFNGLBINDBUFFERRANGEPROC>("glBindBufferRange", load);
			glBindBufferBase = GLAD::gladLoadFunction<PFNGLBINDBUFFERBASEPROC>("glBindBufferBase", load);
			glTransformFeedbackVaryings = GLAD::gladLoadFunction<PFNGLTRANSFORMFEEDBACKVARYINGSPROC>("glTransformFeedbackVaryings", load);
			glGetTransformFeedbackVarying = GLAD::gladLoadFunction<PFNGLGETTRANSFORMFEEDBACKVARYINGPROC>("glGetTransformFeedbackVarying", load);
			glClampColor = GLAD::gladLoadFunction<PFNGLCLAMPCOLORPROC>("glClampColor", load);
			glBeginConditionalRender = GLAD::gladLoadFunction<PFNGLBEGINCONDITIONALRENDERPROC>("glBeginConditionalRender", load);
			glEndConditionalRender = GLAD::gladLoadFunction<PFNGLENDCONDITIONALRENDERPROC>("glEndConditionalRender", load);
			glVertexAttribIPointer = GLAD::gladLoadFunction<PFNGLVERTEXATTRIBIPOINTERPROC>("glVertexAttribIPointer", load);
			glGetVertexAttribIiv = GLAD::gladLoadFunction<PFNGLGETVERTEXATTRIBIIVPROC>("glGetVertexAttribIiv", load);
			glGetVertexAttribIuiv = GLAD::gladLoadFunction<PFNGLGETVERTEXATTRIBIUIVPROC>("glGetVertexAttribIuiv", load);
			glVertexAttribI1i = GLAD::gladLoadFunction<PFNGLVERTEXATTRIBI1IPROC>("glVertexAttribI1i", load);
			glVertexAttribI2i = GLAD::gladLoadFunction<PFNGLVERTEXATTRIBI2IPROC>("glVertexAttribI2i", load);
			glVertexAttribI3i = GLAD::gladLoadFunction<PFNGLVERTEXATTRIBI3IPROC>("glVertexAttribI3i", load);
			glVertexAttribI4i = GLAD::gladLoadFunction<PFNGLVERTEXATTRIBI4IPROC>("glVertexAttribI4i", load);
			glVertexAttribI1ui = GLAD::gladLoadFunction<PFNGLVERTEXATTRIBI1UIPROC>("glVertexAttribI1ui", load);
			glVertexAttribI2ui = GLAD::gladLoadFunction<PFNGLVERTEXATTRIBI2UIPROC>("glVertexAttribI2ui", load);
			glVertexAttribI3ui = GLAD::gladLoadFunction<PFNGLVERTEXATTRIBI3UIPROC>("glVertexAttribI3ui", load);
			glVertexAttribI4ui = GLAD::gladLoadFunction<PFNGLVERTEXATTRIBI4UIPROC>("glVertexAttribI4ui", load);
			glVertexAttribI1iv = GLAD::gladLoadFunction<PFNGLVERTEXATTRIBI1IVPROC>("glVertexAttribI1iv", load);
			glVertexAttribI2iv = GLAD::gladLoadFunction<PFNGLVERTEXATTRIBI2IVPROC>("glVertexAttribI2iv", load);
			glVertexAttribI3iv = GLAD::gladLoadFunction<PFNGLVERTEXATTRIBI3IVPROC>("glVertexAttribI3iv", load);
			glVertexAttribI4iv = GLAD::gladLoadFunction<PFNGLVERTEXATTRIBI4IVPROC>("glVertexAttribI4iv", load);
			glVertexAttribI1uiv = GLAD::gladLoadFunction<PFNGLVERTEXATTRIBI1UIVPROC>("glVertexAttribI1uiv", load);
			glVertexAttribI2uiv = GLAD::gladLoadFunction<PFNGLVERTEXATTRIBI2UIVPROC>("glVertexAttribI2uiv", load);
			glVertexAttribI3uiv = GLAD::gladLoadFunction<PFNGLVERTEXATTRIBI3UIVPROC>("glVertexAttribI3uiv", load);
			glVertexAttribI4uiv = GLAD::gladLoadFunction<PFNGLVERTEXATTRIBI4UIVPROC>("glVertexAttribI4uiv", load);
			glVertexAttribI4bv = GLAD::gladLoadFunction<PFNGLVERTEXATTRIBI4BVPROC>("glVertexAttribI4bv", load);
			glVertexAttribI4sv = GLAD::gladLoadFunction<PFNGLVERTEXATTRIBI4SVPROC>("glVertexAttribI4sv", load);
			glVertexAttribI4ubv = GLAD::gladLoadFunction<PFNGLVERTEXATTRIBI4UBVPROC>("glVertexAttribI4ubv", load);
			glVertexAttribI4usv = GLAD::gladLoadFunction<PFNGLVERTEXATTRIBI4USVPROC>("glVertexAttribI4usv", load);
			glGetUniformuiv = GLAD::gladLoadFunction<PFNGLGETUNIFORMUIVPROC>("glGetUniformuiv", load);
			glBindFragDataLocation = GLAD::gladLoadFunction<PFNGLBINDFRAGDATALOCATIONPROC>("glBindFragDataLocation", load);
			glGetFragDataLocation = GLAD::gladLoadFunction<PFNGLGETFRAGDATALOCATIONPROC>("glGetFragDataLocation", load);
			glUniform1ui = GLAD::gladLoadFunction<PFNGLUNIFORM1UIPROC>("glUniform1ui", load);
			glUniform2ui = GLAD::gladLoadFunction<PFNGLUNIFORM2UIPROC>("glUniform2ui", load);
			glUniform3ui = GLAD::gladLoadFunction<PFNGLUNIFORM3UIPROC>("glUniform3ui", load);
			glUniform4ui = GLAD::gladLoadFunction<PFNGLUNIFORM4UIPROC>("glUniform4ui", load);
			glUniform1uiv = GLAD::gladLoadFunction<PFNGLUNIFORM1UIVPROC>("glUniform1uiv", load);
			glUniform2uiv = GLAD::gladLoadFunction<PFNGLUNIFORM2UIVPROC>("glUniform2uiv", load);
			glUniform3uiv = GLAD::gladLoadFunction<PFNGLUNIFORM3UIVPROC>("glUniform3uiv", load);
			glUniform4uiv = GLAD::gladLoadFunction<PFNGLUNIFORM4UIVPROC>("glUniform4uiv", load);
			glTexParameterIiv = GLAD::gladLoadFunction<PFNGLTEXPARAMETERIIVPROC>("glTexParameterIiv", load);
			glTexParameterIuiv = GLAD::gladLoadFunction<PFNGLTEXPARAMETERIUIVPROC>("glTexParameterIuiv", load);
			glGetTexParameterIiv = GLAD::gladLoadFunction<PFNGLGETTEXPARAMETERIIVPROC>("glGetTexParameterIiv", load);
			glGetTexParameterIuiv = GLAD::gladLoadFunction<PFNGLGETTEXPARAMETERIUIVPROC>("glGetTexParameterIuiv", load);
			glClearBufferiv = GLAD::gladLoadFunction<PFNGLCLEARBUFFERIVPROC>("glClearBufferiv", load);
			glClearBufferuiv = GLAD::gladLoadFunction<PFNGLCLEARBUFFERUIVPROC>("glClearBufferuiv", load);
			glClearBufferfv = GLAD::gladLoadFunction<PFNGLCLEARBUFFERFVPROC>("glClearBufferfv", load);
			glClearBufferfi = GLAD::gladLoadFunction<PFNGLCLEARBUFFERFIPROC>("glClearBufferfi", load);
			glGetStringi = GLAD::gladLoadFunction<PFNGLGETSTRINGIPROC>("glGetStringi", load);
			glIsRenderbuffer = GLAD::gladLoadFunction<PFNGLISRENDERBUFFERPROC>("glIsRenderbuffer", load);
			glBindRenderbuffer = GLAD::gladLoadFunction<PFNGLBINDRENDERBUFFERPROC>("glBindRenderbuffer", load);
			glDeleteRenderbuffers = GLAD::gladLoadFunction<PFNGLDELETERENDERBUFFERSPROC>("glDeleteRenderbuffers", load);
			glGenRenderbuffers = GLAD::gladLoadFunction<PFNGLGENRENDERBUFFERSPROC>("glGenRenderbuffers", load);
			glRenderbufferStorage = GLAD::gladLoadFunction<PFNGLRENDERBUFFERSTORAGEPROC>("glRenderbufferStorage", load);
			glGetRenderbufferParameteriv = GLAD::gladLoadFunction<PFNGLGETRENDERBUFFERPARAMETERIVPROC>("glGetRenderbufferParameteriv", load);
			glIsFramebuffer = GLAD::gladLoadFunction<PFNGLISFRAMEBUFFERPROC>("glIsFramebuffer", load);
			glBindFramebuffer = GLAD::gladLoadFunction<PFNGLBINDFRAMEBUFFERPROC>("glBindFramebuffer", load);
			glDeleteFramebuffers = GLAD::gladLoadFunction<PFNGLDELETEFRAMEBUFFERSPROC>("glDeleteFramebuffers", load);
			glGenFramebuffers = GLAD::gladLoadFunction<PFNGLGENFRAMEBUFFERSPROC>("glGenFramebuffers", load);
			glCheckFramebufferStatus = GLAD::gladLoadFunction<PFNGLCHECKFRAMEBUFFERSTATUSPROC>("glCheckFramebufferStatus", load);
			glFramebufferTexture1D = GLAD::gladLoadFunction<PFNGLFRAMEBUFFERTEXTURE1DPROC>("glFramebufferTexture1D", load);
			glFramebufferTexture2D = GLAD::gladLoadFunction<PFNGLFRAMEBUFFERTEXTURE2DPROC>("glFramebufferTexture2D", load);
			glFramebufferTexture3D = GLAD::gladLoadFunction<PFNGLFRAMEBUFFERTEXTURE3DPROC>("glFramebufferTexture3D", load);
			glFramebufferRenderbuffer = GLAD::gladLoadFunction<PFNGLFRAMEBUFFERRENDERBUFFERPROC>("glFramebufferRenderbuffer", load);
			glGetFramebufferAttachmentParameteriv = GLAD::gladLoadFunction<PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC>("glGetFramebufferAttachmentParameteriv", load);
			glGenerateMipmap = GLAD::gladLoadFunction<PFNGLGENERATEMIPMAPPROC>("glGenerateMipmap", load);
			glBlitFramebuffer = GLAD::gladLoadFunction<PFNGLBLITFRAMEBUFFERPROC>("glBlitFramebuffer", load);
			glRenderbufferStorageMultisample = GLAD::gladLoadFunction<PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC>("glRenderbufferStorageMultisample", load);
			glFramebufferTextureLayer = GLAD::gladLoadFunction<PFNGLFRAMEBUFFERTEXTURELAYERPROC>("glFramebufferTextureLayer", load);
			glMapBufferRange = GLAD::gladLoadFunction<PFNGLMAPBUFFERRANGEPROC>("glMapBufferRange", load);
			glFlushMappedBufferRange = GLAD::gladLoadFunction<PFNGLFLUSHMAPPEDBUFFERRANGEPROC>("glFlushMappedBufferRange", load);
			glBindVertexArray = GLAD::gladLoadFunction<PFNGLBINDVERTEXARRAYPROC>("glBindVertexArray", load);
			glDeleteVertexArrays = GLAD::gladLoadFunction<PFNGLDELETEVERTEXARRAYSPROC>("glDeleteVertexArrays", load);
			glGenVertexArrays = GLAD::gladLoadFunction<PFNGLGENVERTEXARRAYSPROC>("glGenVertexArrays", load);
			glIsVertexArray = GLAD::gladLoadFunction<PFNGLISVERTEXARRAYPROC>("glIsVertexArray", load);

			GLAD::GLAD_2_1::load_GL_RECURSIVE(load);
		}
	}
}