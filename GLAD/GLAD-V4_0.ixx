export module GLAD:V4_0;

export import :V3_3;

// Alias for function pointer types
export using PFNGLMINSAMPLESHADINGPROC = void(*)(GLfloat value);
export using PFNGLBLENDEQUATIONIPROC = void(*)(GLuint buf, GLenum mode);
export using PFNGLBLENDEQUATIONSEPARATEIPROC = void(*)(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
export using PFNGLBLENDFUNCIPROC = void(*)(GLuint buf, GLenum src, GLenum dst);
export using PFNGLBLENDFUNCSEPARATEIPROC = void(*)(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
export using PFNGLDRAWARRAYSINDIRECTPROC = void(*)(GLenum mode, const void* indirect);
export using PFNGLDRAWELEMENTSINDIRECTPROC = void(*)(GLenum mode, GLenum type, const void* indirect);
export using PFNGLUNIFORM1DPROC = void(*)(GLint location, GLdouble x);
export using PFNGLUNIFORM2DPROC = void(*)(GLint location, GLdouble x, GLdouble y);
export using PFNGLUNIFORM3DPROC = void(*)(GLint location, GLdouble x, GLdouble y, GLdouble z);
export using PFNGLUNIFORM4DPROC = void(*)(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
export using PFNGLUNIFORM1DVPROC = void(*)(GLint location, GLsizei count, const GLdouble* value);
export using PFNGLUNIFORM2DVPROC = void(*)(GLint location, GLsizei count, const GLdouble* value);
export using PFNGLUNIFORM3DVPROC = void(*)(GLint location, GLsizei count, const GLdouble* value);
export using PFNGLUNIFORM4DVPROC = void(*)(GLint location, GLsizei count, const GLdouble* value);
export using PFNGLUNIFORMMATRIX2DVPROC = void(*)(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
export using PFNGLUNIFORMMATRIX3DVPROC = void(*)(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
export using PFNGLUNIFORMMATRIX4DVPROC = void(*)(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
export using PFNGLUNIFORMMATRIX2X3DVPROC = void(*)(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
export using PFNGLUNIFORMMATRIX2X4DVPROC = void(*)(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
export using PFNGLUNIFORMMATRIX3X2DVPROC = void(*)(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
export using PFNGLUNIFORMMATRIX3X4DVPROC = void(*)(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
export using PFNGLUNIFORMMATRIX4X2DVPROC = void(*)(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
export using PFNGLUNIFORMMATRIX4X3DVPROC = void(*)(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
export using PFNGLGETUNIFORMDVPROC = void(*)(GLuint program, GLint location, GLdouble* params);
export using PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC = GLint(*)(GLuint program, GLenum shadertype, const GLchar* name);
export using PFNGLGETSUBROUTINEINDEXPROC = GLuint(*)(GLuint program, GLenum shadertype, const GLchar* name);
export using PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC = void(*)(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint* values);
export using PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC = void(*)(GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, GLsizei* length, GLchar* name);
export using PFNGLGETACTIVESUBROUTINENAMEPROC = void(*)(GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, GLsizei* length, GLchar* name);
export using PFNGLUNIFORMSUBROUTINESUIVPROC = void(*)(GLenum shadertype, GLsizei count, const GLuint* indices);
export using PFNGLGETUNIFORMSUBROUTINEUIVPROC = void(*)(GLenum shadertype, GLint location, GLuint* params);
export using PFNGLGETPROGRAMSTAGEIVPROC = void(*)(GLuint program, GLenum shadertype, GLenum pname, GLint* values);
export using PFNGLPATCHPARAMETERIPROC = void(*)(GLenum pname, GLint value);
export using PFNGLPATCHPARAMETERFVPROC = void(*)(GLenum pname, const GLfloat* values);
export using PFNGLBINDTRANSFORMFEEDBACKPROC = void(*)(GLenum target, GLuint id);
export using PFNGLDELETETRANSFORMFEEDBACKSPROC = void(*)(GLsizei n, const GLuint* ids);
export using PFNGLGENTRANSFORMFEEDBACKSPROC = void(*)(GLsizei n, GLuint* ids);
export using PFNGLISTRANSFORMFEEDBACKPROC = GLboolean(*)(GLuint id);
export using PFNGLPAUSETRANSFORMFEEDBACKPROC = void(*)();
export using PFNGLRESUMETRANSFORMFEEDBACKPROC = void(*)();
export using PFNGLDRAWTRANSFORMFEEDBACKPROC = void(*)(GLenum mode, GLuint id);
export using PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC = void(*)(GLenum mode, GLuint id, GLuint stream);
export using PFNGLBEGINQUERYINDEXEDPROC = void(*)(GLenum target, GLuint index, GLuint id);
export using PFNGLENDQUERYINDEXEDPROC = void(*)(GLenum target, GLuint index);
export using PFNGLGETQUERYINDEXEDIVPROC = void(*)(GLenum target, GLuint index, GLenum pname, GLint* params);

// Declare function pointers as variables
export PFNGLMINSAMPLESHADINGPROC glMinSampleShading = nullptr;
export PFNGLBLENDEQUATIONIPROC glBlendEquationi = nullptr;
export PFNGLBLENDEQUATIONSEPARATEIPROC glBlendEquationSeparatei = nullptr;
export PFNGLBLENDFUNCIPROC glBlendFunci = nullptr;
export PFNGLBLENDFUNCSEPARATEIPROC glBlendFuncSeparatei = nullptr;
export PFNGLDRAWARRAYSINDIRECTPROC glDrawArraysIndirect = nullptr;
export PFNGLDRAWELEMENTSINDIRECTPROC glDrawElementsIndirect = nullptr;
export PFNGLUNIFORM1DPROC glUniform1d = nullptr;
export PFNGLUNIFORM2DPROC glUniform2d = nullptr;
export PFNGLUNIFORM3DPROC glUniform3d = nullptr;
export PFNGLUNIFORM4DPROC glUniform4d = nullptr;
export PFNGLUNIFORM1DVPROC glUniform1dv = nullptr;
export PFNGLUNIFORM2DVPROC glUniform2dv = nullptr;
export PFNGLUNIFORM3DVPROC glUniform3dv = nullptr;
export PFNGLUNIFORM4DVPROC glUniform4dv = nullptr;
export PFNGLUNIFORMMATRIX2DVPROC glUniformMatrix2dv = nullptr;
export PFNGLUNIFORMMATRIX3DVPROC glUniformMatrix3dv = nullptr;
export PFNGLUNIFORMMATRIX4DVPROC glUniformMatrix4dv = nullptr;
export PFNGLUNIFORMMATRIX2X3DVPROC glUniformMatrix2x3dv = nullptr;
export PFNGLUNIFORMMATRIX2X4DVPROC glUniformMatrix2x4dv = nullptr;
export PFNGLUNIFORMMATRIX3X2DVPROC glUniformMatrix3x2dv = nullptr;
export PFNGLUNIFORMMATRIX3X4DVPROC glUniformMatrix3x4dv = nullptr;
export PFNGLUNIFORMMATRIX4X2DVPROC glUniformMatrix4x2dv = nullptr;
export PFNGLUNIFORMMATRIX4X3DVPROC glUniformMatrix4x3dv = nullptr;
export PFNGLGETUNIFORMDVPROC glGetUniformdv = nullptr;
export PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC glGetSubroutineUniformLocation = nullptr;
export PFNGLGETSUBROUTINEINDEXPROC glGetSubroutineIndex = nullptr;
export PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC glGetActiveSubroutineUniformiv = nullptr;
export PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC glGetActiveSubroutineUniformName = nullptr;
export PFNGLGETACTIVESUBROUTINENAMEPROC glGetActiveSubroutineName = nullptr;
export PFNGLUNIFORMSUBROUTINESUIVPROC glUniformSubroutinesuiv = nullptr;
export PFNGLGETUNIFORMSUBROUTINEUIVPROC glGetUniformSubroutineuiv = nullptr;
export PFNGLGETPROGRAMSTAGEIVPROC glGetProgramStageiv = nullptr;
export PFNGLPATCHPARAMETERIPROC glPatchParameteri = nullptr;
export PFNGLPATCHPARAMETERFVPROC glPatchParameterfv = nullptr;
export PFNGLBINDTRANSFORMFEEDBACKPROC glBindTransformFeedback = nullptr;
export PFNGLDELETETRANSFORMFEEDBACKSPROC glDeleteTransformFeedbacks = nullptr;
export PFNGLGENTRANSFORMFEEDBACKSPROC glGenTransformFeedbacks = nullptr;
export PFNGLISTRANSFORMFEEDBACKPROC glIsTransformFeedback = nullptr;
export PFNGLPAUSETRANSFORMFEEDBACKPROC glPauseTransformFeedback = nullptr;
export PFNGLRESUMETRANSFORMFEEDBACKPROC glResumeTransformFeedback = nullptr;
export PFNGLDRAWTRANSFORMFEEDBACKPROC glDrawTransformFeedback = nullptr;
export PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC glDrawTransformFeedbackStream = nullptr;
export PFNGLBEGINQUERYINDEXEDPROC glBeginQueryIndexed = nullptr;
export PFNGLENDQUERYINDEXEDPROC glEndQueryIndexed = nullptr;
export PFNGLGETQUERYINDEXEDIVPROC glGetQueryIndexediv = nullptr;

export namespace GLAD_4_0 {
	void load_GL_RECURSIVE(GLADloadproc load) {
		glMinSampleShading = gladLoadFunction<PFNGLMINSAMPLESHADINGPROC>("glMinSampleShading", load);
		glBlendEquationi = gladLoadFunction<PFNGLBLENDEQUATIONIPROC>("glBlendEquationi", load);
		glBlendEquationSeparatei = gladLoadFunction<PFNGLBLENDEQUATIONSEPARATEIPROC>("glBlendEquationSeparatei", load);
		glBlendFunci = gladLoadFunction<PFNGLBLENDFUNCIPROC>("glBlendFunci", load);
		glBlendFuncSeparatei = gladLoadFunction<PFNGLBLENDFUNCSEPARATEIPROC>("glBlendFuncSeparatei", load);
		glDrawArraysIndirect = gladLoadFunction<PFNGLDRAWARRAYSINDIRECTPROC>("glDrawArraysIndirect", load);
		glDrawElementsIndirect = gladLoadFunction<PFNGLDRAWELEMENTSINDIRECTPROC>("glDrawElementsIndirect", load);
		glUniform1d = gladLoadFunction<PFNGLUNIFORM1DPROC>("glUniform1d", load);
		glUniform2d = gladLoadFunction<PFNGLUNIFORM2DPROC>("glUniform2d", load);
		glUniform3d = gladLoadFunction<PFNGLUNIFORM3DPROC>("glUniform3d", load);
		glUniform4d = gladLoadFunction<PFNGLUNIFORM4DPROC>("glUniform4d", load);
		glUniform1dv = gladLoadFunction<PFNGLUNIFORM1DVPROC>("glUniform1dv", load);
		glUniform2dv = gladLoadFunction<PFNGLUNIFORM2DVPROC>("glUniform2dv", load);
		glUniform3dv = gladLoadFunction<PFNGLUNIFORM3DVPROC>("glUniform3dv", load);
		glUniform4dv = gladLoadFunction<PFNGLUNIFORM4DVPROC>("glUniform4dv", load);
		glUniformMatrix2dv = gladLoadFunction<PFNGLUNIFORMMATRIX2DVPROC>("glUniformMatrix2dv", load);
		glUniformMatrix3dv = gladLoadFunction<PFNGLUNIFORMMATRIX3DVPROC>("glUniformMatrix3dv", load);
		glUniformMatrix4dv = gladLoadFunction<PFNGLUNIFORMMATRIX4DVPROC>("glUniformMatrix4dv", load);
		glUniformMatrix2x3dv = gladLoadFunction<PFNGLUNIFORMMATRIX2X3DVPROC>("glUniformMatrix2x3dv", load);
		glUniformMatrix2x4dv = gladLoadFunction<PFNGLUNIFORMMATRIX2X4DVPROC>("glUniformMatrix2x4dv", load);
		glUniformMatrix3x2dv = gladLoadFunction<PFNGLUNIFORMMATRIX3X2DVPROC>("glUniformMatrix3x2dv", load);
		glUniformMatrix3x4dv = gladLoadFunction<PFNGLUNIFORMMATRIX3X4DVPROC>("glUniformMatrix3x4dv", load);
		glUniformMatrix4x2dv = gladLoadFunction<PFNGLUNIFORMMATRIX4X2DVPROC>("glUniformMatrix4x2dv", load);
		glUniformMatrix4x3dv = gladLoadFunction<PFNGLUNIFORMMATRIX4X3DVPROC>("glUniformMatrix4x3dv", load);
		glGetUniformdv = gladLoadFunction<PFNGLGETUNIFORMDVPROC>("glGetUniformdv", load);
		glGetSubroutineUniformLocation = gladLoadFunction<PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC>("glGetSubroutineUniformLocation", load);
		glGetSubroutineIndex = gladLoadFunction<PFNGLGETSUBROUTINEINDEXPROC>("glGetSubroutineIndex", load);
		glGetActiveSubroutineUniformiv = gladLoadFunction<PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC>("glGetActiveSubroutineUniformiv", load);
		glGetActiveSubroutineUniformName = gladLoadFunction<PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC>("glGetActiveSubroutineUniformName", load);
		glGetActiveSubroutineName = gladLoadFunction<PFNGLGETACTIVESUBROUTINENAMEPROC>("glGetActiveSubroutineName", load);
		glUniformSubroutinesuiv = gladLoadFunction<PFNGLUNIFORMSUBROUTINESUIVPROC>("glUniformSubroutinesuiv", load);
		glGetUniformSubroutineuiv = gladLoadFunction<PFNGLGETUNIFORMSUBROUTINEUIVPROC>("glGetUniformSubroutineuiv", load);
		glGetProgramStageiv = gladLoadFunction<PFNGLGETPROGRAMSTAGEIVPROC>("glGetProgramStageiv", load);
		glPatchParameteri = gladLoadFunction<PFNGLPATCHPARAMETERIPROC>("glPatchParameteri", load);
		glPatchParameterfv = gladLoadFunction<PFNGLPATCHPARAMETERFVPROC>("glPatchParameterfv", load);
		glBindTransformFeedback = gladLoadFunction<PFNGLBINDTRANSFORMFEEDBACKPROC>("glBindTransformFeedback", load);
		glDeleteTransformFeedbacks = gladLoadFunction<PFNGLDELETETRANSFORMFEEDBACKSPROC>("glDeleteTransformFeedbacks", load);
		glGenTransformFeedbacks = gladLoadFunction<PFNGLGENTRANSFORMFEEDBACKSPROC>("glGenTransformFeedbacks", load);
		glIsTransformFeedback = gladLoadFunction<PFNGLISTRANSFORMFEEDBACKPROC>("glIsTransformFeedback", load);
		glPauseTransformFeedback = gladLoadFunction<PFNGLPAUSETRANSFORMFEEDBACKPROC>("glPauseTransformFeedback", load);
		glResumeTransformFeedback = gladLoadFunction<PFNGLRESUMETRANSFORMFEEDBACKPROC>("glResumeTransformFeedback", load);
		glDrawTransformFeedback = gladLoadFunction<PFNGLDRAWTRANSFORMFEEDBACKPROC>("glDrawTransformFeedback", load);
		glDrawTransformFeedbackStream = gladLoadFunction<PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC>("glDrawTransformFeedbackStream", load);
		glBeginQueryIndexed = gladLoadFunction<PFNGLBEGINQUERYINDEXEDPROC>("glBeginQueryIndexed", load);
		glEndQueryIndexed = gladLoadFunction<PFNGLENDQUERYINDEXEDPROC>("glEndQueryIndexed", load);
		glGetQueryIndexediv = gladLoadFunction<PFNGLGETQUERYINDEXEDIVPROC>("glGetQueryIndexediv", load);

		GLAD_3_3::load_GL_RECURSIVE(load);
	}
}