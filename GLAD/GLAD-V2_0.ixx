export module GLAD:V2_0;

export import :V1_5;

export namespace GLAD {
	// Alias for function pointer types
	using PFNGLBLENDEQUATIONSEPARATEPROC = void(*)(GLenum modeRGB, GLenum modeAlpha);
	using PFNGLDRAWBUFFERSPROC = void(*)(GLsizei n, const GLenum* bufs);
	using PFNGLSTENCILOPSEPARATEPROC = void(*)(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
	using PFNGLSTENCILFUNCSEPARATEPROC = void(*)(GLenum face, GLenum func, GLint ref, GLuint mask);
	using PFNGLSTENCILMASKSEPARATEPROC = void(*)(GLenum face, GLuint mask);
	using PFNGLATTACHSHADERPROC = void(*)(GLuint program, GLuint shader);
	using PFNGLBINDATTRIBLOCATIONPROC = void(*)(GLuint program, GLuint index, const GLchar* name);
	using PFNGLCOMPILESHADERPROC = void(*)(GLuint shader);
	using PFNGLCREATEPROGRAMPROC = GLuint(*)(void);
	using PFNGLCREATESHADERPROC = GLuint(*)(GLenum type);
	using PFNGLDELETEPROGRAMPROC = void(*)(GLuint program);
	using PFNGLDELETESHADERPROC = void(*)(GLuint shader);
	using PFNGLDETACHSHADERPROC = void(*)(GLuint program, GLuint shader);
	using PFNGLDISABLEVERTEXATTRIBARRAYPROC = void(*)(GLuint index);
	using PFNGLENABLEVERTEXATTRIBARRAYPROC = void(*)(GLuint index);
	using PFNGLGETACTIVEATTRIBPROC = void(*)(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLint* size, GLenum* type, GLchar* name);
	using PFNGLGETACTIVEUNIFORMPROC = void(*)(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLint* size, GLenum* type, GLchar* name);
	using PFNGLGETATTACHEDSHADERSPROC = void(*)(GLuint program, GLsizei maxCount, GLsizei* count, GLuint* shaders);
	using PFNGLGETATTRIBLOCATIONPROC = GLint(*)(GLuint program, const GLchar* name);
	using PFNGLGETPROGRAMIVPROC = void(*)(GLuint program, GLenum pname, GLint* params);
	using PFNGLGETPROGRAMINFOLOGPROC = void(*)(GLuint program, GLsizei bufSize, GLsizei* length, GLchar* infoLog);
	using PFNGLGETSHADERIVPROC = void(*)(GLuint shader, GLenum pname, GLint* params);
	using PFNGLGETSHADERINFOLOGPROC = void(*)(GLuint shader, GLsizei bufSize, GLsizei* length, GLchar* infoLog);
	using PFNGLGETSHADERSOURCEPROC = void(*)(GLuint shader, GLsizei bufSize, GLsizei* length, GLchar* source);
	using PFNGLGETUNIFORMLOCATIONPROC = GLint(*)(GLuint program, const GLchar* name);
	using PFNGLGETUNIFORMFVPROC = void(*)(GLuint program, GLint location, GLfloat* params);
	using PFNGLGETUNIFORMIVPROC = void(*)(GLuint program, GLint location, GLint* params);
	using PFNGLGETVERTEXATTRIBDVPROC = void(*)(GLuint index, GLenum pname, GLdouble* params);
	using PFNGLGETVERTEXATTRIBFVPROC = void(*)(GLuint index, GLenum pname, GLfloat* params);
	using PFNGLGETVERTEXATTRIBIVPROC = void(*)(GLuint index, GLenum pname, GLint* params);
	using PFNGLGETVERTEXATTRIBPOINTERVPROC = void(*)(GLuint index, GLenum pname, void** pointer);
	using PFNGLISPROGRAMPROC = GLboolean(*)(GLuint program);
	using PFNGLISSHADERPROC = GLboolean(*)(GLuint shader);
	using PFNGLLINKPROGRAMPROC = void(*)(GLuint program);
	using PFNGLSHADERSOURCEPROC = void(*)(GLuint shader, GLsizei count, const GLchar* const* string, const GLint* length);
	using PFNGLUSEPROGRAMPROC = void(*)(GLuint program);
	using PFNGLUNIFORM1FPROC = void(*)(GLint location, GLfloat v0);
	using PFNGLUNIFORM2FPROC = void(*)(GLint location, GLfloat v0, GLfloat v1);
	using PFNGLUNIFORM3FPROC = void(*)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
	using PFNGLUNIFORM4FPROC = void(*)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
	using PFNGLUNIFORM1IPROC = void(*)(GLint location, GLint v0);
	using PFNGLUNIFORM2IPROC = void(*)(GLint location, GLint v0, GLint v1);
	using PFNGLUNIFORM3IPROC = void(*)(GLint location, GLint v0, GLint v1, GLint v2);
	using PFNGLUNIFORM4IPROC = void(*)(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
	using PFNGLUNIFORM1FVPROC = void(*)(GLint location, GLsizei count, const GLfloat* value);
	using PFNGLUNIFORM2FVPROC = void(*)(GLint location, GLsizei count, const GLfloat* value);
	using PFNGLUNIFORM3FVPROC = void(*)(GLint location, GLsizei count, const GLfloat* value);
	using PFNGLUNIFORM4FVPROC = void(*)(GLint location, GLsizei count, const GLfloat* value);
	using PFNGLUNIFORM1IVPROC = void(*)(GLint location, GLsizei count, const GLint* value);
	using PFNGLUNIFORM2IVPROC = void(*)(GLint location, GLsizei count, const GLint* value);
	using PFNGLUNIFORM3IVPROC = void(*)(GLint location, GLsizei count, const GLint* value);
	using PFNGLUNIFORM4IVPROC = void(*)(GLint location, GLsizei count, const GLint* value);
	using PFNGLUNIFORMMATRIX2FVPROC = void(*)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
	using PFNGLUNIFORMMATRIX3FVPROC = void(*)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
	using PFNGLUNIFORMMATRIX4FVPROC = void(*)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
	using PFNGLVALIDATEPROGRAMPROC = void(*)(GLuint program);
	using PFNGLVERTEXATTRIB1DPROC = void(*)(GLuint index, GLdouble x);
	using PFNGLVERTEXATTRIB1DVPROC = void(*)(GLuint index, const GLdouble* v);
	using PFNGLVERTEXATTRIB1FPROC = void(*)(GLuint index, GLfloat x);
	using PFNGLVERTEXATTRIB1FVPROC = void(*)(GLuint index, const GLfloat* v);
	using PFNGLVERTEXATTRIB1SPROC = void(*)(GLuint index, GLshort x);
	using PFNGLVERTEXATTRIB1SVPROC = void(*)(GLuint index, const GLshort* v);
	using PFNGLVERTEXATTRIB2DPROC = void(*)(GLuint index, GLdouble x, GLdouble y);
	using PFNGLVERTEXATTRIB2DVPROC = void(*)(GLuint index, const GLdouble* v);
	using PFNGLVERTEXATTRIB2FPROC = void(*)(GLuint index, GLfloat x, GLfloat y);
	using PFNGLVERTEXATTRIB2FVPROC = void(*)(GLuint index, const GLfloat* v);
	using PFNGLVERTEXATTRIB2SPROC = void(*)(GLuint index, GLshort x, GLshort y);
	using PFNGLVERTEXATTRIB2SVPROC = void(*)(GLuint index, const GLshort* v);
	using PFNGLVERTEXATTRIB3DPROC = void(*)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
	using PFNGLVERTEXATTRIB3DVPROC = void(*)(GLuint index, const GLdouble* v);
	using PFNGLVERTEXATTRIB3FPROC = void(*)(GLuint index, GLfloat x, GLfloat y, GLfloat z);
	using PFNGLVERTEXATTRIB3FVPROC = void(*)(GLuint index, const GLfloat* v);
	using PFNGLVERTEXATTRIB3SPROC = void(*)(GLuint index, GLshort x, GLshort y, GLshort z);
	using PFNGLVERTEXATTRIB3SVPROC = void(*)(GLuint index, const GLshort* v);
	using PFNGLVERTEXATTRIB4NBVPROC = void(*)(GLuint index, const GLbyte* v);
	using PFNGLVERTEXATTRIB4NIVPROC = void(*)(GLuint index, const GLint* v);
	using PFNGLVERTEXATTRIB4NSVPROC = void(*)(GLuint index, const GLshort* v);
	using PFNGLVERTEXATTRIB4NUBPROC = void(*)(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
	using PFNGLVERTEXATTRIB4NUBVPROC = void(*)(GLuint index, const GLubyte* v);
	using PFNGLVERTEXATTRIB4NUIVPROC = void(*)(GLuint index, const GLuint* v);
	using PFNGLVERTEXATTRIB4NUSVPROC = void(*)(GLuint index, const GLushort* v);
	using PFNGLVERTEXATTRIB4BVPROC = void(*)(GLuint index, const GLbyte* v);
	using PFNGLVERTEXATTRIB4DPROC = void(*)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
	using PFNGLVERTEXATTRIB4DVPROC = void(*)(GLuint index, const GLdouble* v);
	using PFNGLVERTEXATTRIB4FPROC = void(*)(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
	using PFNGLVERTEXATTRIB4FVPROC = void(*)(GLuint index, const GLfloat* v);
	using PFNGLVERTEXATTRIB4IVPROC = void(*)(GLuint index, const GLint* v);
	using PFNGLVERTEXATTRIB4SPROC = void(*)(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
	using PFNGLVERTEXATTRIB4SVPROC = void(*)(GLuint index, const GLshort* v);
	using PFNGLVERTEXATTRIB4UBVPROC = void(*)(GLuint index, const GLubyte* v);
	using PFNGLVERTEXATTRIB4UIVPROC = void(*)(GLuint index, const GLuint* v);
	using PFNGLVERTEXATTRIB4USVPROC = void(*)(GLuint index, const GLushort* v);
	using PFNGLVERTEXATTRIBPOINTERPROC = void(*)(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void* pointer);

	// Declare function pointers as variables
	PFNGLBLENDEQUATIONSEPARATEPROC glBlendEquationSeparate = nullptr;
	PFNGLDRAWBUFFERSPROC glDrawBuffers = nullptr;
	PFNGLSTENCILOPSEPARATEPROC glStencilOpSeparate = nullptr;
	PFNGLSTENCILFUNCSEPARATEPROC glStencilFuncSeparate = nullptr;
	PFNGLSTENCILMASKSEPARATEPROC glStencilMaskSeparate = nullptr;
	PFNGLATTACHSHADERPROC glAttachShader = nullptr;
	PFNGLBINDATTRIBLOCATIONPROC glBindAttribLocation = nullptr;
	PFNGLCOMPILESHADERPROC glCompileShader = nullptr;
	PFNGLCREATEPROGRAMPROC glCreateProgram = nullptr;
	PFNGLCREATESHADERPROC glCreateShader = nullptr;
	PFNGLDELETEPROGRAMPROC glDeleteProgram = nullptr;
	PFNGLDELETESHADERPROC glDeleteShader = nullptr;
	PFNGLDETACHSHADERPROC glDetachShader = nullptr;
	PFNGLDISABLEVERTEXATTRIBARRAYPROC glDisableVertexAttribArray = nullptr;
	PFNGLENABLEVERTEXATTRIBARRAYPROC glEnableVertexAttribArray = nullptr;
	PFNGLGETACTIVEATTRIBPROC glGetActiveAttrib = nullptr;
	PFNGLGETACTIVEUNIFORMPROC glGetActiveUniform = nullptr;
	PFNGLGETATTACHEDSHADERSPROC glGetAttachedShaders = nullptr;
	PFNGLGETATTRIBLOCATIONPROC glGetAttribLocation = nullptr;
	PFNGLGETPROGRAMIVPROC glGetProgramiv = nullptr;
	PFNGLGETPROGRAMINFOLOGPROC glGetProgramInfoLog = nullptr;
	PFNGLGETSHADERIVPROC glGetShaderiv = nullptr;
	PFNGLGETSHADERINFOLOGPROC glGetShaderInfoLog = nullptr;
	PFNGLGETSHADERSOURCEPROC glGetShaderSource = nullptr;
	PFNGLGETUNIFORMLOCATIONPROC glGetUniformLocation = nullptr;
	PFNGLGETUNIFORMFVPROC glGetUniformfv = nullptr;
	PFNGLGETUNIFORMIVPROC glGetUniformiv = nullptr;
	PFNGLGETVERTEXATTRIBDVPROC glGetVertexAttribdv = nullptr;
	PFNGLGETVERTEXATTRIBFVPROC glGetVertexAttribfv = nullptr;
	PFNGLGETVERTEXATTRIBIVPROC glGetVertexAttribiv = nullptr;
	PFNGLGETVERTEXATTRIBPOINTERVPROC glGetVertexAttribPointerv = nullptr;
	PFNGLISPROGRAMPROC glIsProgram = nullptr;
	PFNGLISSHADERPROC glIsShader = nullptr;
	PFNGLLINKPROGRAMPROC glLinkProgram = nullptr;
	PFNGLSHADERSOURCEPROC glShaderSource = nullptr;
	PFNGLUSEPROGRAMPROC glUseProgram = nullptr;
	PFNGLUNIFORM1FPROC glUniform1f = nullptr;
	PFNGLUNIFORM2FPROC glUniform2f = nullptr;
	PFNGLUNIFORM3FPROC glUniform3f = nullptr;
	PFNGLUNIFORM4FPROC glUniform4f = nullptr;
	PFNGLUNIFORM1IPROC glUniform1i = nullptr;
	PFNGLUNIFORM2IPROC glUniform2i = nullptr;
	PFNGLUNIFORM3IPROC glUniform3i = nullptr;
	PFNGLUNIFORM4IPROC glUniform4i = nullptr;
	PFNGLUNIFORM1FVPROC glUniform1fv = nullptr;
	PFNGLUNIFORM2FVPROC glUniform2fv = nullptr;
	PFNGLUNIFORM3FVPROC glUniform3fv = nullptr;
	PFNGLUNIFORM4FVPROC glUniform4fv = nullptr;
	PFNGLUNIFORM1IVPROC glUniform1iv = nullptr;
	PFNGLUNIFORM2IVPROC glUniform2iv = nullptr;
	PFNGLUNIFORM3IVPROC glUniform3iv = nullptr;
	PFNGLUNIFORM4IVPROC glUniform4iv = nullptr;
	PFNGLUNIFORMMATRIX2FVPROC glUniformMatrix2fv = nullptr;
	PFNGLUNIFORMMATRIX3FVPROC glUniformMatrix3fv = nullptr;
	PFNGLUNIFORMMATRIX4FVPROC glUniformMatrix4fv = nullptr;
	PFNGLVALIDATEPROGRAMPROC glValidateProgram = nullptr;
	PFNGLVERTEXATTRIB1DPROC glVertexAttrib1d = nullptr;
	PFNGLVERTEXATTRIB1DVPROC glVertexAttrib1dv = nullptr;
	PFNGLVERTEXATTRIB1FPROC glVertexAttrib1f = nullptr;
	PFNGLVERTEXATTRIB1FVPROC glVertexAttrib1fv = nullptr;
	PFNGLVERTEXATTRIB1SPROC glVertexAttrib1s = nullptr;
	PFNGLVERTEXATTRIB1SVPROC glVertexAttrib1sv = nullptr;
	PFNGLVERTEXATTRIB2DPROC glVertexAttrib2d = nullptr;
	PFNGLVERTEXATTRIB2DVPROC glVertexAttrib2dv = nullptr;
	PFNGLVERTEXATTRIB2FPROC glVertexAttrib2f = nullptr;
	PFNGLVERTEXATTRIB2FVPROC glVertexAttrib2fv = nullptr;
	PFNGLVERTEXATTRIB2SPROC glVertexAttrib2s = nullptr;
	PFNGLVERTEXATTRIB2SVPROC glVertexAttrib2sv = nullptr;
	PFNGLVERTEXATTRIB3DPROC glVertexAttrib3d = nullptr;
	PFNGLVERTEXATTRIB3DVPROC glVertexAttrib3dv = nullptr;
	PFNGLVERTEXATTRIB3FPROC glVertexAttrib3f = nullptr;
	PFNGLVERTEXATTRIB3FVPROC glVertexAttrib3fv = nullptr;
	PFNGLVERTEXATTRIB3SPROC glVertexAttrib3s = nullptr;
	PFNGLVERTEXATTRIB3SVPROC glVertexAttrib3sv = nullptr;
	PFNGLVERTEXATTRIB4NBVPROC glVertexAttrib4Nbv = nullptr;
	PFNGLVERTEXATTRIB4NIVPROC glVertexAttrib4Niv = nullptr;
	PFNGLVERTEXATTRIB4NSVPROC glVertexAttrib4Nsv = nullptr;
	PFNGLVERTEXATTRIB4NUBPROC glVertexAttrib4Nub = nullptr;
	PFNGLVERTEXATTRIB4NUBVPROC glVertexAttrib4Nubv = nullptr;
	PFNGLVERTEXATTRIB4NUIVPROC glVertexAttrib4Nuiv = nullptr;
	PFNGLVERTEXATTRIB4NUSVPROC glVertexAttrib4Nusv = nullptr;
	PFNGLVERTEXATTRIB4BVPROC glVertexAttrib4bv = nullptr;
	PFNGLVERTEXATTRIB4DPROC glVertexAttrib4d = nullptr;
	PFNGLVERTEXATTRIB4DVPROC glVertexAttrib4dv = nullptr;
	PFNGLVERTEXATTRIB4FPROC glVertexAttrib4f = nullptr;
	PFNGLVERTEXATTRIB4FVPROC glVertexAttrib4fv = nullptr;
	PFNGLVERTEXATTRIB4IVPROC glVertexAttrib4iv = nullptr;
	PFNGLVERTEXATTRIB4SPROC glVertexAttrib4s = nullptr;
	PFNGLVERTEXATTRIB4SVPROC glVertexAttrib4sv = nullptr;
	PFNGLVERTEXATTRIB4UBVPROC glVertexAttrib4ubv = nullptr;
	PFNGLVERTEXATTRIB4UIVPROC glVertexAttrib4uiv = nullptr;
	PFNGLVERTEXATTRIB4USVPROC glVertexAttrib4usv = nullptr;
	PFNGLVERTEXATTRIBPOINTERPROC glVertexAttribPointer = nullptr;

	namespace GLAD_2_0 {
		void load_GL_RECURSIVE(GLADloadproc load) {
			glBlendEquationSeparate = GLAD::gladLoadFunction<PFNGLBLENDEQUATIONSEPARATEPROC>("glBlendEquationSeparate", load);
			glDrawBuffers = GLAD::gladLoadFunction<PFNGLDRAWBUFFERSPROC>("glDrawBuffers", load);
			glStencilOpSeparate = GLAD::gladLoadFunction<PFNGLSTENCILOPSEPARATEPROC>("glStencilOpSeparate", load);
			glStencilFuncSeparate = GLAD::gladLoadFunction<PFNGLSTENCILFUNCSEPARATEPROC>("glStencilFuncSeparate", load);
			glStencilMaskSeparate = GLAD::gladLoadFunction<PFNGLSTENCILMASKSEPARATEPROC>("glStencilMaskSeparate", load);
			glAttachShader = GLAD::gladLoadFunction<PFNGLATTACHSHADERPROC>("glAttachShader", load);
			glBindAttribLocation = GLAD::gladLoadFunction<PFNGLBINDATTRIBLOCATIONPROC>("glBindAttribLocation", load);
			glCompileShader = GLAD::gladLoadFunction<PFNGLCOMPILESHADERPROC>("glCompileShader", load);
			glCreateProgram = GLAD::gladLoadFunction<PFNGLCREATEPROGRAMPROC>("glCreateProgram", load);
			glCreateShader = GLAD::gladLoadFunction<PFNGLCREATESHADERPROC>("glCreateShader", load);
			glDeleteProgram = GLAD::gladLoadFunction<PFNGLDELETEPROGRAMPROC>("glDeleteProgram", load);
			glDeleteShader = GLAD::gladLoadFunction<PFNGLDELETESHADERPROC>("glDeleteShader", load);
			glDetachShader = GLAD::gladLoadFunction<PFNGLDETACHSHADERPROC>("glDetachShader", load);
			glDisableVertexAttribArray = GLAD::gladLoadFunction<PFNGLDISABLEVERTEXATTRIBARRAYPROC>("glDisableVertexAttribArray", load);
			glEnableVertexAttribArray = GLAD::gladLoadFunction<PFNGLENABLEVERTEXATTRIBARRAYPROC>("glEnableVertexAttribArray", load);
			glGetActiveAttrib = GLAD::gladLoadFunction<PFNGLGETACTIVEATTRIBPROC>("glGetActiveAttrib", load);
			glGetActiveUniform = GLAD::gladLoadFunction<PFNGLGETACTIVEUNIFORMPROC>("glGetActiveUniform", load);
			glGetAttachedShaders = GLAD::gladLoadFunction<PFNGLGETATTACHEDSHADERSPROC>("glGetAttachedShaders", load);
			glGetAttribLocation = GLAD::gladLoadFunction<PFNGLGETATTRIBLOCATIONPROC>("glGetAttribLocation", load);
			glGetProgramiv = GLAD::gladLoadFunction<PFNGLGETPROGRAMIVPROC>("glGetProgramiv", load);
			glGetProgramInfoLog = GLAD::gladLoadFunction<PFNGLGETPROGRAMINFOLOGPROC>("glGetProgramInfoLog", load);
			glGetShaderiv = GLAD::gladLoadFunction<PFNGLGETSHADERIVPROC>("glGetShaderiv", load);
			glGetShaderInfoLog = GLAD::gladLoadFunction<PFNGLGETSHADERINFOLOGPROC>("glGetShaderInfoLog", load);
			glGetShaderSource = GLAD::gladLoadFunction<PFNGLGETSHADERSOURCEPROC>("glGetShaderSource", load);
			glGetUniformLocation = GLAD::gladLoadFunction<PFNGLGETUNIFORMLOCATIONPROC>("glGetUniformLocation", load);
			glGetUniformfv = GLAD::gladLoadFunction<PFNGLGETUNIFORMFVPROC>("glGetUniformfv", load);
			glGetUniformiv = GLAD::gladLoadFunction<PFNGLGETUNIFORMIVPROC>("glGetUniformiv", load);
			glGetVertexAttribdv = GLAD::gladLoadFunction<PFNGLGETVERTEXATTRIBDVPROC>("glGetVertexAttribdv", load);
			glGetVertexAttribfv = GLAD::gladLoadFunction<PFNGLGETVERTEXATTRIBFVPROC>("glGetVertexAttribfv", load);
			glGetVertexAttribiv = GLAD::gladLoadFunction<PFNGLGETVERTEXATTRIBIVPROC>("glGetVertexAttribiv", load);
			glGetVertexAttribPointerv = GLAD::gladLoadFunction<PFNGLGETVERTEXATTRIBPOINTERVPROC>("glGetVertexAttribPointerv", load);
			glIsProgram = GLAD::gladLoadFunction<PFNGLISPROGRAMPROC>("glIsProgram", load);
			glIsShader = GLAD::gladLoadFunction<PFNGLISSHADERPROC>("glIsShader", load);
			glLinkProgram = GLAD::gladLoadFunction<PFNGLLINKPROGRAMPROC>("glLinkProgram", load);
			glShaderSource = GLAD::gladLoadFunction<PFNGLSHADERSOURCEPROC>("glShaderSource", load);
			glUseProgram = GLAD::gladLoadFunction<PFNGLUSEPROGRAMPROC>("glUseProgram", load);
			glUniform1f = GLAD::gladLoadFunction<PFNGLUNIFORM1FPROC>("glUniform1f", load);
			glUniform2f = GLAD::gladLoadFunction<PFNGLUNIFORM2FPROC>("glUniform2f", load);
			glUniform3f = GLAD::gladLoadFunction<PFNGLUNIFORM3FPROC>("glUniform3f", load);
			glUniform4f = GLAD::gladLoadFunction<PFNGLUNIFORM4FPROC>("glUniform4f", load);
			glUniform1i = GLAD::gladLoadFunction<PFNGLUNIFORM1IPROC>("glUniform1i", load);
			glUniform2i = GLAD::gladLoadFunction<PFNGLUNIFORM2IPROC>("glUniform2i", load);
			glUniform3i = GLAD::gladLoadFunction<PFNGLUNIFORM3IPROC>("glUniform3i", load);
			glUniform4i = GLAD::gladLoadFunction<PFNGLUNIFORM4IPROC>("glUniform4i", load);
			glUniform1fv = GLAD::gladLoadFunction<PFNGLUNIFORM1FVPROC>("glUniform1fv", load);
			glUniform2fv = GLAD::gladLoadFunction<PFNGLUNIFORM2FVPROC>("glUniform2fv", load);
			glUniform3fv = GLAD::gladLoadFunction<PFNGLUNIFORM3FVPROC>("glUniform3fv", load);
			glUniform4fv = GLAD::gladLoadFunction<PFNGLUNIFORM4FVPROC>("glUniform4fv", load);
			glUniform1iv = GLAD::gladLoadFunction<PFNGLUNIFORM1IVPROC>("glUniform1iv", load);
			glUniform2iv = GLAD::gladLoadFunction<PFNGLUNIFORM2IVPROC>("glUniform2iv", load);
			glUniform3iv = GLAD::gladLoadFunction<PFNGLUNIFORM3IVPROC>("glUniform3iv", load);
			glUniform4iv = GLAD::gladLoadFunction<PFNGLUNIFORM4IVPROC>("glUniform4iv", load);
			glUniformMatrix2fv = GLAD::gladLoadFunction<PFNGLUNIFORMMATRIX2FVPROC>("glUniformMatrix2fv", load);
			glUniformMatrix3fv = GLAD::gladLoadFunction<PFNGLUNIFORMMATRIX3FVPROC>("glUniformMatrix3fv", load);
			glUniformMatrix4fv = GLAD::gladLoadFunction<PFNGLUNIFORMMATRIX4FVPROC>("glUniformMatrix4fv", load);
			glValidateProgram = GLAD::gladLoadFunction<PFNGLVALIDATEPROGRAMPROC>("glValidateProgram", load);
			glVertexAttrib1d = GLAD::gladLoadFunction<PFNGLVERTEXATTRIB1DPROC>("glVertexAttrib1d", load);
			glVertexAttrib1dv = GLAD::gladLoadFunction<PFNGLVERTEXATTRIB1DVPROC>("glVertexAttrib1dv", load);
			glVertexAttrib1f = GLAD::gladLoadFunction<PFNGLVERTEXATTRIB1FPROC>("glVertexAttrib1f", load);
			glVertexAttrib1fv = GLAD::gladLoadFunction<PFNGLVERTEXATTRIB1FVPROC>("glVertexAttrib1fv", load);
			glVertexAttrib1s = GLAD::gladLoadFunction<PFNGLVERTEXATTRIB1SPROC>("glVertexAttrib1s", load);
			glVertexAttrib1sv = GLAD::gladLoadFunction<PFNGLVERTEXATTRIB1SVPROC>("glVertexAttrib1sv", load);
			glVertexAttrib2d = GLAD::gladLoadFunction<PFNGLVERTEXATTRIB2DPROC>("glVertexAttrib2d", load);
			glVertexAttrib2dv = GLAD::gladLoadFunction<PFNGLVERTEXATTRIB2DVPROC>("glVertexAttrib2dv", load);
			glVertexAttrib2f = GLAD::gladLoadFunction<PFNGLVERTEXATTRIB2FPROC>("glVertexAttrib2f", load);
			glVertexAttrib2fv = GLAD::gladLoadFunction<PFNGLVERTEXATTRIB2FVPROC>("glVertexAttrib2fv", load);
			glVertexAttrib2s = GLAD::gladLoadFunction<PFNGLVERTEXATTRIB2SPROC>("glVertexAttrib2s", load);
			glVertexAttrib2sv = GLAD::gladLoadFunction<PFNGLVERTEXATTRIB2SVPROC>("glVertexAttrib2sv", load);
			glVertexAttrib3d = GLAD::gladLoadFunction<PFNGLVERTEXATTRIB3DPROC>("glVertexAttrib3d", load);
			glVertexAttrib3dv = GLAD::gladLoadFunction<PFNGLVERTEXATTRIB3DVPROC>("glVertexAttrib3dv", load);
			glVertexAttrib3f = GLAD::gladLoadFunction<PFNGLVERTEXATTRIB3FPROC>("glVertexAttrib3f", load);
			glVertexAttrib3fv = GLAD::gladLoadFunction<PFNGLVERTEXATTRIB3FVPROC>("glVertexAttrib3fv", load);
			glVertexAttrib3s = GLAD::gladLoadFunction<PFNGLVERTEXATTRIB3SPROC>("glVertexAttrib3s", load);
			glVertexAttrib3sv = GLAD::gladLoadFunction<PFNGLVERTEXATTRIB3SVPROC>("glVertexAttrib3sv", load);
			glVertexAttrib4Nbv = GLAD::gladLoadFunction<PFNGLVERTEXATTRIB4NBVPROC>("glVertexAttrib4Nbv", load);
			glVertexAttrib4Niv = GLAD::gladLoadFunction<PFNGLVERTEXATTRIB4NIVPROC>("glVertexAttrib4Niv", load);
			glVertexAttrib4Nsv = GLAD::gladLoadFunction<PFNGLVERTEXATTRIB4NSVPROC>("glVertexAttrib4Nsv", load);
			glVertexAttrib4Nub = GLAD::gladLoadFunction<PFNGLVERTEXATTRIB4NUBPROC>("glVertexAttrib4Nub", load);
			glVertexAttrib4Nubv = GLAD::gladLoadFunction<PFNGLVERTEXATTRIB4NUBVPROC>("glVertexAttrib4Nubv", load);
			glVertexAttrib4Nuiv = GLAD::gladLoadFunction<PFNGLVERTEXATTRIB4NUIVPROC>("glVertexAttrib4Nuiv", load);
			glVertexAttrib4Nusv = GLAD::gladLoadFunction<PFNGLVERTEXATTRIB4NUSVPROC>("glVertexAttrib4Nusv", load);
			glVertexAttrib4bv = GLAD::gladLoadFunction<PFNGLVERTEXATTRIB4BVPROC>("glVertexAttrib4bv", load);
			glVertexAttrib4d = GLAD::gladLoadFunction<PFNGLVERTEXATTRIB4DPROC>("glVertexAttrib4d", load);
			glVertexAttrib4dv = GLAD::gladLoadFunction<PFNGLVERTEXATTRIB4DVPROC>("glVertexAttrib4dv", load);
			glVertexAttrib4f = GLAD::gladLoadFunction<PFNGLVERTEXATTRIB4FPROC>("glVertexAttrib4f", load);
			glVertexAttrib4fv = GLAD::gladLoadFunction<PFNGLVERTEXATTRIB4FVPROC>("glVertexAttrib4fv", load);
			glVertexAttrib4iv = GLAD::gladLoadFunction<PFNGLVERTEXATTRIB4IVPROC>("glVertexAttrib4iv", load);
			glVertexAttrib4s = GLAD::gladLoadFunction<PFNGLVERTEXATTRIB4SPROC>("glVertexAttrib4s", load);
			glVertexAttrib4sv = GLAD::gladLoadFunction<PFNGLVERTEXATTRIB4SVPROC>("glVertexAttrib4sv", load);
			glVertexAttrib4ubv = GLAD::gladLoadFunction<PFNGLVERTEXATTRIB4UBVPROC>("glVertexAttrib4ubv", load);
			glVertexAttrib4uiv = GLAD::gladLoadFunction<PFNGLVERTEXATTRIB4UIVPROC>("glVertexAttrib4uiv", load);
			glVertexAttrib4usv = GLAD::gladLoadFunction<PFNGLVERTEXATTRIB4USVPROC>("glVertexAttrib4usv", load);
			glVertexAttribPointer = GLAD::gladLoadFunction<PFNGLVERTEXATTRIBPOINTERPROC>("glVertexAttribPointer", load);

			GLAD::GLAD_1_5::load_GL_RECURSIVE(load);
		}
	}
}