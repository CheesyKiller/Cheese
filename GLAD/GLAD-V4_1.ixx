export module GLAD:V4_1;

export import :V4_0;

// Alias for function pointer types
export using PFNGLRELEASESHADERCOMPILERPROC = void(*)();
export using PFNGLSHADERBINARYPROC = void(*)(GLsizei count, const GLuint* shaders, GLenum binaryFormat, const void* binary, GLsizei length);
export using PFNGLGETSHADERPRECISIONFORMATPROC = void(*)(GLenum shadertype, GLenum precisiontype, GLint* range, GLint* precision);
export using PFNGLDEPTHRANGEFPROC = void(*)(GLfloat n, GLfloat f);
export using PFNGLCLEARDEPTHFPROC = void(*)(GLfloat d);
export using PFNGLGETPROGRAMBINARYPROC = void(*)(GLuint program, GLsizei bufSize, GLsizei* length, GLenum* binaryFormat, void* binary);
export using PFNGLPROGRAMBINARYPROC = void(*)(GLuint program, GLenum binaryFormat, const void* binary, GLsizei length);
export using PFNGLPROGRAMPARAMETERIPROC = void(*)(GLuint program, GLenum pname, GLint value);
export using PFNGLUSEPROGRAMSTAGESPROC = void(*)(GLuint pipeline, GLbitfield stages, GLuint program);
export using PFNGLACTIVESHADERPROGRAMPROC = void(*)(GLuint pipeline, GLuint program);
export using PFNGLCREATESHADERPROGRAMVPROC = GLuint(*)(GLenum type, GLsizei count, const GLchar* const* strings);
export using PFNGLBINDPROGRAMPIPELINEPROC = void(*)(GLuint pipeline);
export using PFNGLDELETEPROGRAMPIPELINESPROC = void(*)(GLsizei n, const GLuint* pipelines);
export using PFNGLGENPROGRAMPIPELINESPROC = void(*)(GLsizei n, GLuint* pipelines);
export using PFNGLISPROGRAMPIPELINEPROC = GLboolean(*)(GLuint pipeline);
export using PFNGLGETPROGRAMPIPELINEIVPROC = void(*)(GLuint pipeline, GLenum pname, GLint* params);
export using PFNGLPROGRAMUNIFORM1IPROC = void(*)(GLuint program, GLint location, GLint v0);
export using PFNGLPROGRAMUNIFORM1IVPROC = void(*)(GLuint program, GLint location, GLsizei count, const GLint* value);
export using PFNGLPROGRAMUNIFORM1FPROC = void(*)(GLuint program, GLint location, GLfloat v0);
export using PFNGLPROGRAMUNIFORM1FVPROC = void(*)(GLuint program, GLint location, GLsizei count, const GLfloat* value);
export using PFNGLPROGRAMUNIFORM1DPROC = void(*)(GLuint program, GLint location, GLdouble v0);
export using PFNGLPROGRAMUNIFORM1DVPROC = void(*)(GLuint program, GLint location, GLsizei count, const GLdouble* value);
export using PFNGLPROGRAMUNIFORM1UIPROC = void(*)(GLuint program, GLint location, GLuint v0);
export using PFNGLPROGRAMUNIFORM1UIVPROC = void(*)(GLuint program, GLint location, GLsizei count, const GLuint* value);
export using PFNGLPROGRAMUNIFORM2IPROC = void(*)(GLuint program, GLint location, GLint v0, GLint v1);
export using PFNGLPROGRAMUNIFORM2IVPROC = void(*)(GLuint program, GLint location, GLsizei count, const GLint* value);
export using PFNGLPROGRAMUNIFORM2FPROC = void(*)(GLuint program, GLint location, GLfloat v0, GLfloat v1);
export using PFNGLPROGRAMUNIFORM2FVPROC = void(*)(GLuint program, GLint location, GLsizei count, const GLfloat* value);
export using PFNGLPROGRAMUNIFORM2DPROC = void(*)(GLuint program, GLint location, GLdouble v0, GLdouble v1);
export using PFNGLPROGRAMUNIFORM2DVPROC = void(*)(GLuint program, GLint location, GLsizei count, const GLdouble* value);
export using PFNGLPROGRAMUNIFORM2UIPROC = void(*)(GLuint program, GLint location, GLuint v0, GLuint v1);
export using PFNGLPROGRAMUNIFORM2UIVPROC = void(*)(GLuint program, GLint location, GLsizei count, const GLuint* value);
export using PFNGLPROGRAMUNIFORM3IPROC = void(*)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
export using PFNGLPROGRAMUNIFORM3IVPROC = void(*)(GLuint program, GLint location, GLsizei count, const GLint* value);
export using PFNGLPROGRAMUNIFORM3FPROC = void(*)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
export using PFNGLPROGRAMUNIFORM3FVPROC = void(*)(GLuint program, GLint location, GLsizei count, const GLfloat* value);
export using PFNGLPROGRAMUNIFORM3DPROC = void(*)(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2);
export using PFNGLPROGRAMUNIFORM3DVPROC = void(*)(GLuint program, GLint location, GLsizei count, const GLdouble* value);
export using PFNGLPROGRAMUNIFORM3UIPROC = void(*)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
export using PFNGLPROGRAMUNIFORM3UIVPROC = void(*)(GLuint program, GLint location, GLsizei count, const GLuint* value);
export using PFNGLPROGRAMUNIFORM4IPROC = void(*)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
export using PFNGLPROGRAMUNIFORM4IVPROC = void(*)(GLuint program, GLint location, GLsizei count, const GLint* value);
export using PFNGLPROGRAMUNIFORM4FPROC = void(*)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
export using PFNGLPROGRAMUNIFORM4FVPROC = void(*)(GLuint program, GLint location, GLsizei count, const GLfloat* value);
export using PFNGLPROGRAMUNIFORM4DPROC = void(*)(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3);
export using PFNGLPROGRAMUNIFORM4DVPROC = void(*)(GLuint program, GLint location, GLsizei count, const GLdouble* value);
export using PFNGLPROGRAMUNIFORM4UIPROC = void(*)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
export using PFNGLPROGRAMUNIFORM4UIVPROC = void(*)(GLuint program, GLint location, GLsizei count, const GLuint* value);
export using PFNGLPROGRAMUNIFORMMATRIX2FVPROC = void(*)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
export using PFNGLPROGRAMUNIFORMMATRIX3FVPROC = void(*)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
export using PFNGLPROGRAMUNIFORMMATRIX4FVPROC = void(*)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
export using PFNGLPROGRAMUNIFORMMATRIX2DVPROC = void(*)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
export using PFNGLPROGRAMUNIFORMMATRIX3DVPROC = void(*)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
export using PFNGLPROGRAMUNIFORMMATRIX4DVPROC = void(*)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
export using PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC = void(*)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
export using PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC = void(*)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
export using PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC = void(*)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
export using PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC = void(*)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
export using PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC = void(*)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
export using PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC = void(*)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
export using PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC = void(*)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
export using PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC = void(*)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
export using PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC = void(*)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
export using PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC = void(*)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
export using PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC = void(*)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
export using PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC = void(*)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
export using PFNGLVALIDATEPROGRAMPIPELINEPROC = void(*)(GLuint pipeline);
export using PFNGLGETPROGRAMPIPELINEINFOLOGPROC = void(*)(GLuint pipeline, GLsizei bufSize, GLsizei* length, GLchar* infoLog);
export using PFNGLVERTEXATTRIBL1DPROC = void(*)(GLuint index, GLdouble x);
export using PFNGLVERTEXATTRIBL2DPROC = void(*)(GLuint index, GLdouble x, GLdouble y);
export using PFNGLVERTEXATTRIBL3DPROC = void(*)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
export using PFNGLVERTEXATTRIBL4DPROC = void(*)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
export using PFNGLVERTEXATTRIBL1DVPROC = void(*)(GLuint index, const GLdouble* v);
export using PFNGLVERTEXATTRIBL2DVPROC = void(*)(GLuint index, const GLdouble* v);
export using PFNGLVERTEXATTRIBL3DVPROC = void(*)(GLuint index, const GLdouble* v);
export using PFNGLVERTEXATTRIBL4DVPROC = void(*)(GLuint index, const GLdouble* v);
export using PFNGLVERTEXATTRIBLPOINTERPROC = void(*)(GLuint index, GLint size, GLenum type, GLsizei stride, const void* pointer);
export using PFNGLGETVERTEXATTRIBLDVPROC = void(*)(GLuint index, GLenum pname, GLdouble* params);
export using PFNGLVIEWPORTARRAYVPROC = void(*)(GLuint first, GLsizei count, const GLfloat* v);
export using PFNGLVIEWPORTINDEXEDFPROC = void(*)(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h);
export using PFNGLVIEWPORTINDEXEDFVPROC = void(*)(GLuint index, const GLfloat* v);
export using PFNGLSCISSORARRAYVPROC = void(*)(GLuint first, GLsizei count, const GLint* v);
export using PFNGLSCISSORINDEXEDPROC = void(*)(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height);
export using PFNGLSCISSORINDEXEDVPROC = void(*)(GLuint index, const GLint* v);
export using PFNGLDEPTHRANGEARRAYVPROC = void(*)(GLuint first, GLsizei count, const GLdouble* v);
export using PFNGLDEPTHRANGEINDEXEDPROC = void(*)(GLuint index, GLdouble n, GLdouble f);
export using PFNGLGETFLOATI_VPROC = void(*)(GLenum target, GLuint index, GLfloat* data);
export using PFNGLGETDOUBLEI_VPROC = void(*)(GLenum target, GLuint index, GLdouble* data);

// Export the function pointers
export PFNGLRELEASESHADERCOMPILERPROC glReleaseShaderCompiler = nullptr;
export PFNGLSHADERBINARYPROC glShaderBinary = nullptr;
export PFNGLGETSHADERPRECISIONFORMATPROC glGetShaderPrecisionFormat = nullptr;
export PFNGLDEPTHRANGEFPROC glDepthRangef = nullptr;
export PFNGLCLEARDEPTHFPROC glClearDepthf = nullptr;
export PFNGLGETPROGRAMBINARYPROC glGetProgramBinary = nullptr;
export PFNGLPROGRAMBINARYPROC glProgramBinary = nullptr;
export PFNGLPROGRAMPARAMETERIPROC glProgramParameteri = nullptr;
export PFNGLUSEPROGRAMSTAGESPROC glUseProgramStages = nullptr;
export PFNGLACTIVESHADERPROGRAMPROC glActiveShaderProgram = nullptr;
export PFNGLCREATESHADERPROGRAMVPROC glCreateShaderProgramv = nullptr;
export PFNGLBINDPROGRAMPIPELINEPROC glBindProgramPipeline = nullptr;
export PFNGLDELETEPROGRAMPIPELINESPROC glDeleteProgramPipelines = nullptr;
export PFNGLGENPROGRAMPIPELINESPROC glGenProgramPipelines = nullptr;
export PFNGLISPROGRAMPIPELINEPROC glIsProgramPipeline = nullptr;
export PFNGLGETPROGRAMPIPELINEIVPROC glGetProgramPipelineiv = nullptr;
export PFNGLPROGRAMUNIFORM1IPROC glProgramUniform1i = nullptr;
export PFNGLPROGRAMUNIFORM1IVPROC glProgramUniform1iv = nullptr;
export PFNGLPROGRAMUNIFORM1FPROC glProgramUniform1f = nullptr;
export PFNGLPROGRAMUNIFORM1FVPROC glProgramUniform1fv = nullptr;
export PFNGLPROGRAMUNIFORM1DPROC glProgramUniform1d = nullptr;
export PFNGLPROGRAMUNIFORM1DVPROC glProgramUniform1dv = nullptr;
export PFNGLPROGRAMUNIFORM1UIPROC glProgramUniform1ui = nullptr;
export PFNGLPROGRAMUNIFORM1UIVPROC glProgramUniform1uiv = nullptr;
export PFNGLPROGRAMUNIFORM2IPROC glProgramUniform2i = nullptr;
export PFNGLPROGRAMUNIFORM2IVPROC glProgramUniform2iv = nullptr;
export PFNGLPROGRAMUNIFORM2FPROC glProgramUniform2f = nullptr;
export PFNGLPROGRAMUNIFORM2FVPROC glProgramUniform2fv = nullptr;
export PFNGLPROGRAMUNIFORM2DPROC glProgramUniform2d = nullptr;
export PFNGLPROGRAMUNIFORM2DVPROC glProgramUniform2dv = nullptr;
export PFNGLPROGRAMUNIFORM2UIPROC glProgramUniform2ui = nullptr;
export PFNGLPROGRAMUNIFORM2UIVPROC glProgramUniform2uiv = nullptr;
export PFNGLPROGRAMUNIFORM3IPROC glProgramUniform3i = nullptr;
export PFNGLPROGRAMUNIFORM3IVPROC glProgramUniform3iv = nullptr;
export PFNGLPROGRAMUNIFORM3FPROC glProgramUniform3f = nullptr;
export PFNGLPROGRAMUNIFORM3FVPROC glProgramUniform3fv = nullptr;
export PFNGLPROGRAMUNIFORM3DPROC glProgramUniform3d = nullptr;
export PFNGLPROGRAMUNIFORM3DVPROC glProgramUniform3dv = nullptr;
export PFNGLPROGRAMUNIFORM3UIPROC glProgramUniform3ui = nullptr;
export PFNGLPROGRAMUNIFORM3UIVPROC glProgramUniform3uiv = nullptr;
export PFNGLPROGRAMUNIFORM4IPROC glProgramUniform4i = nullptr;
export PFNGLPROGRAMUNIFORM4IVPROC glProgramUniform4iv = nullptr;
export PFNGLPROGRAMUNIFORM4FPROC glProgramUniform4f = nullptr;
export PFNGLPROGRAMUNIFORM4FVPROC glProgramUniform4fv = nullptr;
export PFNGLPROGRAMUNIFORM4DPROC glProgramUniform4d = nullptr;
export PFNGLPROGRAMUNIFORM4DVPROC glProgramUniform4dv = nullptr;
export PFNGLPROGRAMUNIFORM4UIPROC glProgramUniform4ui = nullptr;
export PFNGLPROGRAMUNIFORM4UIVPROC glProgramUniform4uiv = nullptr;
export PFNGLPROGRAMUNIFORMMATRIX2FVPROC glProgramUniformMatrix2fv = nullptr;
export PFNGLPROGRAMUNIFORMMATRIX3FVPROC glProgramUniformMatrix3fv = nullptr;
export PFNGLPROGRAMUNIFORMMATRIX4FVPROC glProgramUniformMatrix4fv = nullptr;
export PFNGLPROGRAMUNIFORMMATRIX2DVPROC glProgramUniformMatrix2dv = nullptr;
export PFNGLPROGRAMUNIFORMMATRIX3DVPROC glProgramUniformMatrix3dv = nullptr;
export PFNGLPROGRAMUNIFORMMATRIX4DVPROC glProgramUniformMatrix4dv = nullptr;
export PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC glProgramUniformMatrix2x3fv = nullptr;
export PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC glProgramUniformMatrix3x2fv = nullptr;
export PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC glProgramUniformMatrix2x4fv = nullptr;
export PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC glProgramUniformMatrix4x2fv = nullptr;
export PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC glProgramUniformMatrix3x4fv = nullptr;
export PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC glProgramUniformMatrix4x3fv = nullptr;
export PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC glProgramUniformMatrix2x3dv = nullptr;
export PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC glProgramUniformMatrix3x2dv = nullptr;
export PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC glProgramUniformMatrix2x4dv = nullptr;
export PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC glProgramUniformMatrix4x2dv = nullptr;
export PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC glProgramUniformMatrix3x4dv = nullptr;
export PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC glProgramUniformMatrix4x3dv = nullptr;
export PFNGLVALIDATEPROGRAMPIPELINEPROC glValidateProgramPipeline = nullptr;
export PFNGLGETPROGRAMPIPELINEINFOLOGPROC glGetProgramPipelineInfoLog = nullptr;
export PFNGLVERTEXATTRIBL1DPROC glVertexAttribL1d = nullptr;
export PFNGLVERTEXATTRIBL2DPROC glVertexAttribL2d = nullptr;
export PFNGLVERTEXATTRIBL3DPROC glVertexAttribL3d = nullptr;
export PFNGLVERTEXATTRIBL4DPROC glVertexAttribL4d = nullptr;
export PFNGLVERTEXATTRIBL1DVPROC glVertexAttribL1dv = nullptr;
export PFNGLVERTEXATTRIBL2DVPROC glVertexAttribL2dv = nullptr;
export PFNGLVERTEXATTRIBL3DVPROC glVertexAttribL3dv = nullptr;
export PFNGLVERTEXATTRIBL4DVPROC glVertexAttribL4dv = nullptr;
export PFNGLVERTEXATTRIBLPOINTERPROC glVertexAttribLPointer = nullptr;
export PFNGLGETVERTEXATTRIBLDVPROC glGetVertexAttribLdv = nullptr;
export PFNGLVIEWPORTARRAYVPROC glViewportArrayv = nullptr;
export PFNGLVIEWPORTINDEXEDFPROC glViewportIndexedf = nullptr;
export PFNGLVIEWPORTINDEXEDFVPROC glViewportIndexedfv = nullptr;
export PFNGLSCISSORARRAYVPROC glScissorArrayv = nullptr;
export PFNGLSCISSORINDEXEDPROC glScissorIndexed = nullptr;
export PFNGLSCISSORINDEXEDVPROC glScissorIndexedv = nullptr;
export PFNGLDEPTHRANGEARRAYVPROC glDepthRangeArrayv = nullptr;
export PFNGLDEPTHRANGEINDEXEDPROC glDepthRangeIndexed = nullptr;
export PFNGLGETFLOATI_VPROC glGetFloati_v = nullptr;
export PFNGLGETDOUBLEI_VPROC glGetDoublei_v = nullptr;

export namespace GLAD_4_1 {
	void load_GL_RECURSIVE(GLADloadproc load) {
		glReleaseShaderCompiler = gladLoadFunction<PFNGLRELEASESHADERCOMPILERPROC>("glReleaseShaderCompiler", load);
		glShaderBinary = gladLoadFunction<PFNGLSHADERBINARYPROC>("glShaderBinary", load);
		glGetShaderPrecisionFormat = gladLoadFunction<PFNGLGETSHADERPRECISIONFORMATPROC>("glGetShaderPrecisionFormat", load);
		glDepthRangef = gladLoadFunction<PFNGLDEPTHRANGEFPROC>("glDepthRangef", load);
		glClearDepthf = gladLoadFunction<PFNGLCLEARDEPTHFPROC>("glClearDepthf", load);
		glGetProgramBinary = gladLoadFunction<PFNGLGETPROGRAMBINARYPROC>("glGetProgramBinary", load);
		glProgramBinary = gladLoadFunction<PFNGLPROGRAMBINARYPROC>("glProgramBinary", load);
		glProgramParameteri = gladLoadFunction<PFNGLPROGRAMPARAMETERIPROC>("glProgramParameteri", load);
		glUseProgramStages = gladLoadFunction<PFNGLUSEPROGRAMSTAGESPROC>("glUseProgramStages", load);
		glActiveShaderProgram = gladLoadFunction<PFNGLACTIVESHADERPROGRAMPROC>("glActiveShaderProgram", load);
		glCreateShaderProgramv = gladLoadFunction<PFNGLCREATESHADERPROGRAMVPROC>("glCreateShaderProgramv", load);
		glBindProgramPipeline = gladLoadFunction<PFNGLBINDPROGRAMPIPELINEPROC>("glBindProgramPipeline", load);
		glDeleteProgramPipelines = gladLoadFunction<PFNGLDELETEPROGRAMPIPELINESPROC>("glDeleteProgramPipelines", load);
		glGenProgramPipelines = gladLoadFunction<PFNGLGENPROGRAMPIPELINESPROC>("glGenProgramPipelines", load);
		glIsProgramPipeline = gladLoadFunction<PFNGLISPROGRAMPIPELINEPROC>("glIsProgramPipeline", load);
		glGetProgramPipelineiv = gladLoadFunction<PFNGLGETPROGRAMPIPELINEIVPROC>("glGetProgramPipelineiv", load);
		glProgramParameteri = gladLoadFunction<PFNGLPROGRAMPARAMETERIPROC>("glProgramParameteri", load);
		glProgramUniform1i = gladLoadFunction<PFNGLPROGRAMUNIFORM1IPROC>("glProgramUniform1i", load);
		glProgramUniform1iv = gladLoadFunction<PFNGLPROGRAMUNIFORM1IVPROC>("glProgramUniform1iv", load);
		glProgramUniform1f = gladLoadFunction<PFNGLPROGRAMUNIFORM1FPROC>("glProgramUniform1f", load);
		glProgramUniform1fv = gladLoadFunction<PFNGLPROGRAMUNIFORM1FVPROC>("glProgramUniform1fv", load);
		glProgramUniform1d = gladLoadFunction<PFNGLPROGRAMUNIFORM1DPROC>("glProgramUniform1d", load);
		glProgramUniform1dv = gladLoadFunction<PFNGLPROGRAMUNIFORM1DVPROC>("glProgramUniform1dv", load);
		glProgramUniform1ui = gladLoadFunction<PFNGLPROGRAMUNIFORM1UIPROC>("glProgramUniform1ui", load);
		glProgramUniform1uiv = gladLoadFunction<PFNGLPROGRAMUNIFORM1UIVPROC>("glProgramUniform1uiv", load);
		glProgramUniform2i = gladLoadFunction<PFNGLPROGRAMUNIFORM2IPROC>("glProgramUniform2i", load);
		glProgramUniform2iv = gladLoadFunction<PFNGLPROGRAMUNIFORM2IVPROC>("glProgramUniform2iv", load);
		glProgramUniform2f = gladLoadFunction<PFNGLPROGRAMUNIFORM2FPROC>("glProgramUniform2f", load);
		glProgramUniform2fv = gladLoadFunction<PFNGLPROGRAMUNIFORM2FVPROC>("glProgramUniform2fv", load);
		glProgramUniform2d = gladLoadFunction<PFNGLPROGRAMUNIFORM2DPROC>("glProgramUniform2d", load);
		glProgramUniform2dv = gladLoadFunction<PFNGLPROGRAMUNIFORM2DVPROC>("glProgramUniform2dv", load);
		glProgramUniform2ui = gladLoadFunction<PFNGLPROGRAMUNIFORM2UIPROC>("glProgramUniform2ui", load);
		glProgramUniform2uiv = gladLoadFunction<PFNGLPROGRAMUNIFORM2UIVPROC>("glProgramUniform2uiv", load);
		glProgramUniform3i = gladLoadFunction<PFNGLPROGRAMUNIFORM3IPROC>("glProgramUniform3i", load);
		glProgramUniform3iv = gladLoadFunction<PFNGLPROGRAMUNIFORM3IVPROC>("glProgramUniform3iv", load);
		glProgramUniform3f = gladLoadFunction<PFNGLPROGRAMUNIFORM3FPROC>("glProgramUniform3f", load);
		glProgramUniform3fv = gladLoadFunction<PFNGLPROGRAMUNIFORM3FVPROC>("glProgramUniform3fv", load);
		glProgramUniform3d = gladLoadFunction<PFNGLPROGRAMUNIFORM3DPROC>("glProgramUniform3d", load);
		glProgramUniform3dv = gladLoadFunction<PFNGLPROGRAMUNIFORM3DVPROC>("glProgramUniform3dv", load);
		glProgramUniform3ui = gladLoadFunction<PFNGLPROGRAMUNIFORM3UIPROC>("glProgramUniform3ui", load);
		glProgramUniform3uiv = gladLoadFunction<PFNGLPROGRAMUNIFORM3UIVPROC>("glProgramUniform3uiv", load);
		glProgramUniform4i = gladLoadFunction<PFNGLPROGRAMUNIFORM4IPROC>("glProgramUniform4i", load);
		glProgramUniform4iv = gladLoadFunction<PFNGLPROGRAMUNIFORM4IVPROC>("glProgramUniform4iv", load);
		glProgramUniform4f = gladLoadFunction<PFNGLPROGRAMUNIFORM4FPROC>("glProgramUniform4f", load);
		glProgramUniform4fv = gladLoadFunction<PFNGLPROGRAMUNIFORM4FVPROC>("glProgramUniform4fv", load);
		glProgramUniform4d = gladLoadFunction<PFNGLPROGRAMUNIFORM4DPROC>("glProgramUniform4d", load);
		glProgramUniform4dv = gladLoadFunction<PFNGLPROGRAMUNIFORM4DVPROC>("glProgramUniform4dv", load);
		glProgramUniform4ui = gladLoadFunction<PFNGLPROGRAMUNIFORM4UIPROC>("glProgramUniform4ui", load);
		glProgramUniform4uiv = gladLoadFunction<PFNGLPROGRAMUNIFORM4UIVPROC>("glProgramUniform4uiv", load);
		glProgramUniformMatrix2fv = gladLoadFunction<PFNGLPROGRAMUNIFORMMATRIX2FVPROC>("glProgramUniformMatrix2fv", load);
		glProgramUniformMatrix3fv = gladLoadFunction<PFNGLPROGRAMUNIFORMMATRIX3FVPROC>("glProgramUniformMatrix3fv", load);
		glProgramUniformMatrix4fv = gladLoadFunction<PFNGLPROGRAMUNIFORMMATRIX4FVPROC>("glProgramUniformMatrix4fv", load);
		glProgramUniformMatrix2dv = gladLoadFunction<PFNGLPROGRAMUNIFORMMATRIX2DVPROC>("glProgramUniformMatrix2dv", load);
		glProgramUniformMatrix3dv = gladLoadFunction<PFNGLPROGRAMUNIFORMMATRIX3DVPROC>("glProgramUniformMatrix3dv", load);
		glProgramUniformMatrix4dv = gladLoadFunction<PFNGLPROGRAMUNIFORMMATRIX4DVPROC>("glProgramUniformMatrix4dv", load);
		glProgramUniformMatrix2x3fv = gladLoadFunction<PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC>("glProgramUniformMatrix2x3fv", load);
		glProgramUniformMatrix3x2fv = gladLoadFunction<PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC>("glProgramUniformMatrix3x2fv", load);
		glProgramUniformMatrix2x4fv = gladLoadFunction<PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC>("glProgramUniformMatrix2x4fv", load);
		glProgramUniformMatrix4x2fv = gladLoadFunction<PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC>("glProgramUniformMatrix4x2fv", load);
		glProgramUniformMatrix3x4fv = gladLoadFunction<PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC>("glProgramUniformMatrix3x4fv", load);
		glProgramUniformMatrix4x3fv = gladLoadFunction<PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC>("glProgramUniformMatrix4x3fv", load);
		glProgramUniformMatrix2x3dv = gladLoadFunction<PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC>("glProgramUniformMatrix2x3dv", load);
		glProgramUniformMatrix3x2dv = gladLoadFunction<PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC>("glProgramUniformMatrix3x2dv", load);
		glProgramUniformMatrix2x4dv = gladLoadFunction<PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC>("glProgramUniformMatrix2x4dv", load);
		glProgramUniformMatrix4x2dv = gladLoadFunction<PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC>("glProgramUniformMatrix4x2dv", load);
		glProgramUniformMatrix3x4dv = gladLoadFunction<PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC>("glProgramUniformMatrix3x4dv", load);
		glProgramUniformMatrix4x3dv = gladLoadFunction<PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC>("glProgramUniformMatrix4x3dv", load);
		glValidateProgramPipeline = gladLoadFunction<PFNGLVALIDATEPROGRAMPIPELINEPROC>("glValidateProgramPipeline", load);
		glGetProgramPipelineInfoLog = gladLoadFunction<PFNGLGETPROGRAMPIPELINEINFOLOGPROC>("glGetProgramPipelineInfoLog", load);
		glVertexAttribL1d = gladLoadFunction<PFNGLVERTEXATTRIBL1DPROC>("glVertexAttribL1d", load);
		glVertexAttribL2d = gladLoadFunction<PFNGLVERTEXATTRIBL2DPROC>("glVertexAttribL2d", load);
		glVertexAttribL3d = gladLoadFunction<PFNGLVERTEXATTRIBL3DPROC>("glVertexAttribL3d", load);
		glVertexAttribL4d = gladLoadFunction<PFNGLVERTEXATTRIBL4DPROC>("glVertexAttribL4d", load);
		glVertexAttribL1dv = gladLoadFunction<PFNGLVERTEXATTRIBL1DVPROC>("glVertexAttribL1dv", load);
		glVertexAttribL2dv = gladLoadFunction<PFNGLVERTEXATTRIBL2DVPROC>("glVertexAttribL2dv", load);
		glVertexAttribL3dv = gladLoadFunction<PFNGLVERTEXATTRIBL3DVPROC>("glVertexAttribL3dv", load);
		glVertexAttribL4dv = gladLoadFunction<PFNGLVERTEXATTRIBL4DVPROC>("glVertexAttribL4dv", load);
		glVertexAttribLPointer = gladLoadFunction<PFNGLVERTEXATTRIBLPOINTERPROC>("glVertexAttribLPointer", load);
		glGetVertexAttribLdv = gladLoadFunction<PFNGLGETVERTEXATTRIBLDVPROC>("glGetVertexAttribLdv", load);
		glViewportArrayv = gladLoadFunction<PFNGLVIEWPORTARRAYVPROC>("glViewportArrayv", load);
		glViewportIndexedf = gladLoadFunction<PFNGLVIEWPORTINDEXEDFPROC>("glViewportIndexedf", load);
		glViewportIndexedfv = gladLoadFunction<PFNGLVIEWPORTINDEXEDFVPROC>("glViewportIndexedfv", load);
		glScissorArrayv = gladLoadFunction<PFNGLSCISSORARRAYVPROC>("glScissorArrayv", load);
		glScissorIndexed = gladLoadFunction<PFNGLSCISSORINDEXEDPROC>("glScissorIndexed", load);
		glScissorIndexedv = gladLoadFunction<PFNGLSCISSORINDEXEDVPROC>("glScissorIndexedv", load);
		glDepthRangeArrayv = gladLoadFunction<PFNGLDEPTHRANGEARRAYVPROC>("glDepthRangeArrayv", load);
		glDepthRangeIndexed = gladLoadFunction<PFNGLDEPTHRANGEINDEXEDPROC>("glDepthRangeIndexed", load);
		glGetFloati_v = gladLoadFunction<PFNGLGETFLOATI_VPROC>("glGetFloati_v", load);
		glGetDoublei_v = gladLoadFunction<PFNGLGETDOUBLEI_VPROC>("glGetDoublei_v", load);
		
		GLAD_4_0::load_GL_RECURSIVE(load);
	}
}