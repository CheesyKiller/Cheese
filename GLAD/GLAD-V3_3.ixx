export module GLAD:V3_3;

export import :V3_2;

// Alias for function pointer types
export using PFNGLBINDFRAGDATALOCATIONINDEXEDPROC = void(*)(GLuint program, GLuint colorNumber, GLuint index, const GLchar* name);
export using PFNGLGETFRAGDATAINDEXPROC = GLint(*)(GLuint program, const GLchar* name);
export using PFNGLGENSAMPLERSPROC = void(*)(GLsizei count, GLuint* samplers);
export using PFNGLDELETESAMPLERSPROC = void(*)(GLsizei count, const GLuint* samplers);
export using PFNGLISSAMPLERPROC = GLboolean(*)(GLuint sampler);
export using PFNGLBINDSAMPLERPROC = void(*)(GLuint unit, GLuint sampler);
export using PFNGLSAMPLERPARAMETERIPROC = void(*)(GLuint sampler, GLenum pname, GLint param);
export using PFNGLSAMPLERPARAMETERIVPROC = void(*)(GLuint sampler, GLenum pname, const GLint* param);
export using PFNGLSAMPLERPARAMETERFPROC = void(*)(GLuint sampler, GLenum pname, GLfloat param);
export using PFNGLSAMPLERPARAMETERFVPROC = void(*)(GLuint sampler, GLenum pname, const GLfloat* param);
export using PFNGLSAMPLERPARAMETERIIVPROC = void(*)(GLuint sampler, GLenum pname, const GLint* param);
export using PFNGLSAMPLERPARAMETERIUIVPROC = void(*)(GLuint sampler, GLenum pname, const GLuint* param);
export using PFNGLGETSAMPLERPARAMETERIVPROC = void(*)(GLuint sampler, GLenum pname, GLint* params);
export using PFNGLGETSAMPLERPARAMETERIIVPROC = void(*)(GLuint sampler, GLenum pname, GLint* params);
export using PFNGLGETSAMPLERPARAMETERFVPROC = void(*)(GLuint sampler, GLenum pname, GLfloat* params);
export using PFNGLGETSAMPLERPARAMETERIUIVPROC = void(*)(GLuint sampler, GLenum pname, GLuint* params);
export using PFNGLQUERYCOUNTERPROC = void(*)(GLuint id, GLenum target);
export using PFNGLGETQUERYOBJECTI64VPROC = void(*)(GLuint id, GLenum pname, GLint64* params);
export using PFNGLGETQUERYOBJECTUI64VPROC = void(*)(GLuint id, GLenum pname, GLuint64* params);
export using PFNGLVERTEXATTRIBDIVISORPROC = void(*)(GLuint index, GLuint divisor);
export using PFNGLVERTEXATTRIBP1UIPROC = void(*)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
export using PFNGLVERTEXATTRIBP1UIVPROC = void(*)(GLuint index, GLenum type, GLboolean normalized, const GLuint* value);
export using PFNGLVERTEXATTRIBP2UIPROC = void(*)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
export using PFNGLVERTEXATTRIBP2UIVPROC = void(*)(GLuint index, GLenum type, GLboolean normalized, const GLuint* value);
export using PFNGLVERTEXATTRIBP3UIPROC = void(*)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
export using PFNGLVERTEXATTRIBP3UIVPROC = void(*)(GLuint index, GLenum type, GLboolean normalized, const GLuint* value);
export using PFNGLVERTEXATTRIBP4UIPROC = void(*)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
export using PFNGLVERTEXATTRIBP4UIVPROC = void(*)(GLuint index, GLenum type, GLboolean normalized, const GLuint* value);
export using PFNGLVERTEXP2UIPROC = void(*)(GLenum type, GLuint value);
export using PFNGLVERTEXP2UIVPROC = void(*)(GLenum type, const GLuint* value);
export using PFNGLVERTEXP3UIPROC = void(*)(GLenum type, GLuint value);
export using PFNGLVERTEXP3UIVPROC = void(*)(GLenum type, const GLuint* value);
export using PFNGLVERTEXP4UIPROC = void(*)(GLenum type, GLuint value);
export using PFNGLVERTEXP4UIVPROC = void(*)(GLenum type, const GLuint* value);
export using PFNGLTEXCOORDP1UIPROC = void(*)(GLenum type, GLuint coords);
export using PFNGLTEXCOORDP1UIVPROC = void(*)(GLenum type, const GLuint* coords);
export using PFNGLTEXCOORDP2UIPROC = void(*)(GLenum type, GLuint coords);
export using PFNGLTEXCOORDP2UIVPROC = void(*)(GLenum type, const GLuint* coords);
export using PFNGLTEXCOORDP3UIPROC = void(*)(GLenum type, GLuint coords);
export using PFNGLTEXCOORDP3UIVPROC = void(*)(GLenum type, const GLuint* coords);
export using PFNGLTEXCOORDP4UIPROC = void(*)(GLenum type, GLuint coords);
export using PFNGLTEXCOORDP4UIVPROC = void(*)(GLenum type, const GLuint* coords);
export using PFNGLMULTITEXCOORDP1UIPROC = void(*)(GLenum texture, GLenum type, GLuint coords);
export using PFNGLMULTITEXCOORDP1UIVPROC = void(*)(GLenum texture, GLenum type, const GLuint* coords);
export using PFNGLMULTITEXCOORDP2UIPROC = void(*)(GLenum texture, GLenum type, GLuint coords);
export using PFNGLMULTITEXCOORDP2UIVPROC = void(*)(GLenum texture, GLenum type, const GLuint* coords);
export using PFNGLMULTITEXCOORDP3UIPROC = void(*)(GLenum texture, GLenum type, GLuint coords);
export using PFNGLMULTITEXCOORDP3UIVPROC = void(*)(GLenum texture, GLenum type, const GLuint* coords);
export using PFNGLMULTITEXCOORDP4UIPROC = void(*)(GLenum texture, GLenum type, GLuint coords);
export using PFNGLMULTITEXCOORDP4UIVPROC = void(*)(GLenum texture, GLenum type, const GLuint* coords);
export using PFNGLNORMALP3UIPROC = void(*)(GLenum type, GLuint coords);
export using PFNGLNORMALP3UIVPROC = void(*)(GLenum type, const GLuint* coords);
export using PFNGLCOLORP3UIPROC = void(*)(GLenum type, GLuint color);
export using PFNGLCOLORP3UIVPROC = void(*)(GLenum type, const GLuint* color);
export using PFNGLCOLORP4UIPROC = void(*)(GLenum type, GLuint color);
export using PFNGLCOLORP4UIVPROC = void(*)(GLenum type, const GLuint* color);
export using PFNGLSECONDARYCOLORP3UIPROC = void(*)(GLenum type, GLuint color);
export using PFNGLSECONDARYCOLORP3UIVPROC = void(*)(GLenum type, const GLuint* color);

// Declare function pointers as variables
export PFNGLBINDFRAGDATALOCATIONINDEXEDPROC glBindFragDataLocationIndexed = nullptr;
export PFNGLGETFRAGDATAINDEXPROC glGetFragDataIndex = nullptr;
export PFNGLGENSAMPLERSPROC glGenSamplers = nullptr;
export PFNGLDELETESAMPLERSPROC glDeleteSamplers = nullptr;
export PFNGLISSAMPLERPROC glIsSampler = nullptr;
export PFNGLBINDSAMPLERPROC glBindSampler = nullptr;
export PFNGLSAMPLERPARAMETERIPROC glSamplerParameteri = nullptr;
export PFNGLSAMPLERPARAMETERIVPROC glSamplerParameteriv = nullptr;
export PFNGLSAMPLERPARAMETERFPROC glSamplerParameterf = nullptr;
export PFNGLSAMPLERPARAMETERFVPROC glSamplerParameterfv = nullptr;
export PFNGLSAMPLERPARAMETERIIVPROC glSamplerParameterIiv = nullptr;
export PFNGLSAMPLERPARAMETERIUIVPROC glSamplerParameterIuiv = nullptr;
export PFNGLGETSAMPLERPARAMETERIVPROC glGetSamplerParameteriv = nullptr;
export PFNGLGETSAMPLERPARAMETERIIVPROC glGetSamplerParameterIiv = nullptr;
export PFNGLGETSAMPLERPARAMETERFVPROC glGetSamplerParameterfv = nullptr;
export PFNGLGETSAMPLERPARAMETERIUIVPROC glGetSamplerParameterIuiv = nullptr;
export PFNGLQUERYCOUNTERPROC glQueryCounter = nullptr;
export PFNGLGETQUERYOBJECTI64VPROC glGetQueryObjecti64v = nullptr;
export PFNGLGETQUERYOBJECTUI64VPROC glGetQueryObjectui64v = nullptr;
export PFNGLVERTEXATTRIBDIVISORPROC glVertexAttribDivisor = nullptr;
export PFNGLVERTEXATTRIBP1UIPROC glVertexAttribP1ui = nullptr;
export PFNGLVERTEXATTRIBP1UIVPROC glVertexAttribP1uiv = nullptr;
export PFNGLVERTEXATTRIBP2UIPROC glVertexAttribP2ui = nullptr;
export PFNGLVERTEXATTRIBP2UIVPROC glVertexAttribP2uiv = nullptr;
export PFNGLVERTEXATTRIBP3UIPROC glVertexAttribP3ui = nullptr;
export PFNGLVERTEXATTRIBP3UIVPROC glVertexAttribP3uiv = nullptr;
export PFNGLVERTEXATTRIBP4UIPROC glVertexAttribP4ui = nullptr;
export PFNGLVERTEXATTRIBP4UIVPROC glVertexAttribP4uiv = nullptr;
export PFNGLVERTEXP2UIPROC glVertexP2ui = nullptr;
export PFNGLVERTEXP2UIVPROC glVertexP2uiv = nullptr;
export PFNGLVERTEXP3UIPROC glVertexP3ui = nullptr;
export PFNGLVERTEXP3UIVPROC glVertexP3uiv = nullptr;
export PFNGLVERTEXP4UIPROC glVertexP4ui = nullptr;
export PFNGLVERTEXP4UIVPROC glVertexP4uiv = nullptr;
export PFNGLTEXCOORDP1UIPROC glTexCoordP1ui = nullptr;
export PFNGLTEXCOORDP1UIVPROC glTexCoordP1uiv = nullptr;
export PFNGLTEXCOORDP2UIPROC glTexCoordP2ui = nullptr;
export PFNGLTEXCOORDP2UIVPROC glTexCoordP2uiv = nullptr;
export PFNGLTEXCOORDP3UIPROC glTexCoordP3ui = nullptr;
export PFNGLTEXCOORDP3UIVPROC glTexCoordP3uiv = nullptr;
export PFNGLTEXCOORDP4UIPROC glTexCoordP4ui = nullptr;
export PFNGLTEXCOORDP4UIVPROC glTexCoordP4uiv = nullptr;
export PFNGLMULTITEXCOORDP1UIPROC glMultiTexCoordP1ui = nullptr;
export PFNGLMULTITEXCOORDP1UIVPROC glMultiTexCoordP1uiv = nullptr;
export PFNGLMULTITEXCOORDP2UIPROC glMultiTexCoordP2ui = nullptr;
export PFNGLMULTITEXCOORDP2UIVPROC glMultiTexCoordP2uiv = nullptr;
export PFNGLMULTITEXCOORDP3UIPROC glMultiTexCoordP3ui = nullptr;
export PFNGLMULTITEXCOORDP3UIVPROC glMultiTexCoordP3uiv = nullptr;
export PFNGLMULTITEXCOORDP4UIPROC glMultiTexCoordP4ui = nullptr;
export PFNGLMULTITEXCOORDP4UIVPROC glMultiTexCoordP4uiv = nullptr;
export PFNGLNORMALP3UIPROC glNormalP3ui = nullptr;
export PFNGLNORMALP3UIVPROC glNormalP3uiv = nullptr;
export PFNGLCOLORP3UIPROC glColorP3ui = nullptr;
export PFNGLCOLORP3UIVPROC glColorP3uiv = nullptr;
export PFNGLCOLORP4UIPROC glColorP4ui = nullptr;
export PFNGLCOLORP4UIVPROC glColorP4uiv = nullptr;
export PFNGLSECONDARYCOLORP3UIPROC glSecondaryColorP3ui = nullptr;
export PFNGLSECONDARYCOLORP3UIVPROC glSecondaryColorP3uiv = nullptr;

export namespace GLAD_3_3 {
	void load_GL_RECURSIVE(GLADloadproc load) {
		glBindFragDataLocationIndexed = gladLoadFunction<PFNGLBINDFRAGDATALOCATIONINDEXEDPROC>("glBindFragDataLocationIndexed", load);
		glGetFragDataIndex = gladLoadFunction<PFNGLGETFRAGDATAINDEXPROC>("glGetFragDataIndex", load);
		glGenSamplers = gladLoadFunction<PFNGLGENSAMPLERSPROC>("glGenSamplers", load);
		glDeleteSamplers = gladLoadFunction<PFNGLDELETESAMPLERSPROC>("glDeleteSamplers", load);
		glIsSampler = gladLoadFunction<PFNGLISSAMPLERPROC>("glIsSampler", load);
		glBindSampler = gladLoadFunction<PFNGLBINDSAMPLERPROC>("glBindSampler", load);
		glSamplerParameteri = gladLoadFunction<PFNGLSAMPLERPARAMETERIPROC>("glSamplerParameteri", load);
		glSamplerParameteriv = gladLoadFunction<PFNGLSAMPLERPARAMETERIVPROC>("glSamplerParameteriv", load);
		glSamplerParameterf = gladLoadFunction<PFNGLSAMPLERPARAMETERFPROC>("glSamplerParameterf", load);
		glSamplerParameterfv = gladLoadFunction<PFNGLSAMPLERPARAMETERFVPROC>("glSamplerParameterfv", load);
		glSamplerParameterIiv = gladLoadFunction<PFNGLSAMPLERPARAMETERIIVPROC>("glSamplerParameterIiv", load);
		glSamplerParameterIuiv = gladLoadFunction<PFNGLSAMPLERPARAMETERIUIVPROC>("glSamplerParameterIuiv", load);
		glGetSamplerParameteriv = gladLoadFunction<PFNGLGETSAMPLERPARAMETERIVPROC>("glGetSamplerParameteriv", load);
		glGetSamplerParameterIiv = gladLoadFunction<PFNGLGETSAMPLERPARAMETERIIVPROC>("glGetSamplerParameterIiv", load);
		glGetSamplerParameterfv = gladLoadFunction<PFNGLGETSAMPLERPARAMETERFVPROC>("glGetSamplerParameterfv", load);
		glGetSamplerParameterIuiv = gladLoadFunction<PFNGLGETSAMPLERPARAMETERIUIVPROC>("glGetSamplerParameterIuiv", load);
		glQueryCounter = gladLoadFunction<PFNGLQUERYCOUNTERPROC>("glQueryCounter", load);
		glGetQueryObjecti64v = gladLoadFunction<PFNGLGETQUERYOBJECTI64VPROC>("glGetQueryObjecti64v", load);
		glGetQueryObjectui64v = gladLoadFunction<PFNGLGETQUERYOBJECTUI64VPROC>("glGetQueryObjectui64v", load);
		glVertexAttribDivisor = gladLoadFunction<PFNGLVERTEXATTRIBDIVISORPROC>("glVertexAttribDivisor", load);
		glVertexAttribP1ui = gladLoadFunction<PFNGLVERTEXATTRIBP1UIPROC>("glVertexAttribP1ui", load);
		glVertexAttribP1uiv = gladLoadFunction<PFNGLVERTEXATTRIBP1UIVPROC>("glVertexAttribP1uiv", load);
		glVertexAttribP2ui = gladLoadFunction<PFNGLVERTEXATTRIBP2UIPROC>("glVertexAttribP2ui", load);
		glVertexAttribP2uiv = gladLoadFunction<PFNGLVERTEXATTRIBP2UIVPROC>("glVertexAttribP2uiv", load);
		glVertexAttribP3ui = gladLoadFunction<PFNGLVERTEXATTRIBP3UIPROC>("glVertexAttribP3ui", load);
		glVertexAttribP3uiv = gladLoadFunction<PFNGLVERTEXATTRIBP3UIVPROC>("glVertexAttribP3uiv", load);
		glVertexAttribP4ui = gladLoadFunction<PFNGLVERTEXATTRIBP4UIPROC>("glVertexAttribP4ui", load);
		glVertexAttribP4uiv = gladLoadFunction<PFNGLVERTEXATTRIBP4UIVPROC>("glVertexAttribP4uiv", load);
		glVertexP2ui = gladLoadFunction<PFNGLVERTEXP2UIPROC>("glVertexP2ui", load);
		glVertexP2uiv = gladLoadFunction<PFNGLVERTEXP2UIVPROC>("glVertexP2uiv", load);
		glVertexP3ui = gladLoadFunction<PFNGLVERTEXP3UIPROC>("glVertexP3ui", load);
		glVertexP3uiv = gladLoadFunction<PFNGLVERTEXP3UIVPROC>("glVertexP3uiv", load);
		glVertexP4ui = gladLoadFunction<PFNGLVERTEXP4UIPROC>("glVertexP4ui", load);
		glVertexP4uiv = gladLoadFunction<PFNGLVERTEXP4UIVPROC>("glVertexP4uiv", load);
		glTexCoordP1ui = gladLoadFunction<PFNGLTEXCOORDP1UIPROC>("glTexCoordP1ui", load);
		glTexCoordP1uiv = gladLoadFunction<PFNGLTEXCOORDP1UIVPROC>("glTexCoordP1uiv", load);
		glTexCoordP2ui = gladLoadFunction<PFNGLTEXCOORDP2UIPROC>("glTexCoordP2ui", load);
		glTexCoordP2uiv = gladLoadFunction<PFNGLTEXCOORDP2UIVPROC>("glTexCoordP2uiv", load);
		glTexCoordP3ui = gladLoadFunction<PFNGLTEXCOORDP3UIPROC>("glTexCoordP3ui", load);
		glTexCoordP3uiv = gladLoadFunction<PFNGLTEXCOORDP3UIVPROC>("glTexCoordP3uiv", load);
		glTexCoordP4ui = gladLoadFunction<PFNGLTEXCOORDP4UIPROC>("glTexCoordP4ui", load);
		glTexCoordP4uiv = gladLoadFunction<PFNGLTEXCOORDP4UIVPROC>("glTexCoordP4uiv", load);
		glMultiTexCoordP1ui = gladLoadFunction<PFNGLMULTITEXCOORDP1UIPROC>("glMultiTexCoordP1ui", load);
		glMultiTexCoordP1uiv = gladLoadFunction<PFNGLMULTITEXCOORDP1UIVPROC>("glMultiTexCoordP1uiv", load);
		glMultiTexCoordP2ui = gladLoadFunction<PFNGLMULTITEXCOORDP2UIPROC>("glMultiTexCoordP2ui", load);
		glMultiTexCoordP2uiv = gladLoadFunction<PFNGLMULTITEXCOORDP2UIVPROC>("glMultiTexCoordP2uiv", load);
		glMultiTexCoordP3ui = gladLoadFunction<PFNGLMULTITEXCOORDP3UIPROC>("glMultiTexCoordP3ui", load);
		glMultiTexCoordP3uiv = gladLoadFunction<PFNGLMULTITEXCOORDP3UIVPROC>("glMultiTexCoordP3uiv", load);
		glMultiTexCoordP4ui = gladLoadFunction<PFNGLMULTITEXCOORDP4UIPROC>("glMultiTexCoordP4ui", load);
		glMultiTexCoordP4uiv = gladLoadFunction<PFNGLMULTITEXCOORDP4UIVPROC>("glMultiTexCoordP4uiv", load);
		glNormalP3ui = gladLoadFunction<PFNGLNORMALP3UIPROC>("glNormalP3ui", load);
		glNormalP3uiv = gladLoadFunction<PFNGLNORMALP3UIVPROC>("glNormalP3uiv", load);
		glColorP3ui = gladLoadFunction<PFNGLCOLORP3UIPROC>("glColorP3ui", load);
		glColorP3uiv = gladLoadFunction<PFNGLCOLORP3UIVPROC>("glColorP3uiv", load);
		glColorP4ui = gladLoadFunction<PFNGLCOLORP4UIPROC>("glColorP4ui", load);
		glColorP4uiv = gladLoadFunction<PFNGLCOLORP4UIVPROC>("glColorP4uiv", load);
		glSecondaryColorP3ui = gladLoadFunction<PFNGLSECONDARYCOLORP3UIPROC>("glSecondaryColorP3ui", load);
		glSecondaryColorP3uiv = gladLoadFunction<PFNGLSECONDARYCOLORP3UIVPROC>("glSecondaryColorP3uiv", load);

		GLAD_3_2::load_GL_RECURSIVE(load);
	}
}