export module GLAD2:A0;

import GLADTypes;

export namespace GLAD {
	// Alias for function pointer types
	using PFNGLBLENDEQUATIONSEPARATEPROC = void(*)(GLenum modeRGB, GLenum modeAlpha);
	using PFNGLDRAWBUFFERSPROC = void(*)(GLsizei n, const GLenum* bufs);
	using PFNGLSTENCILOPSEPARATEPROC = void(*)(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
	using PFNGLSTENCILFUNCSEPARATEPROC = void(*)(GLenum face, GLenum func, GLint ref, GLuint mask);
	using PFNGLSTENCILMASKSEPARATEPROC = void(*)(GLenum face, GLuint mask);
	using PFNGLATTACHSHADERPROC = void(*)(GLuint program, GLuint shader);
	using PFNGLBINDATTRIBLOCATIONPROC = void(*)(GLuint program, GLuint index, const GLchar* name);
	using PFNGLCOMPILESHADERPROC = void(*)(GLuint shader);
	using PFNGLCREATEPROGRAMPROC = GLuint(*)(void);
	using PFNGLCREATESHADERPROC = GLuint(*)(GLenum type);
	using PFNGLDELETEPROGRAMPROC = void(*)(GLuint program);
	using PFNGLDELETESHADERPROC = void(*)(GLuint shader);
	using PFNGLDETACHSHADERPROC = void(*)(GLuint program, GLuint shader);
	using PFNGLDISABLEVERTEXATTRIBARRAYPROC = void(*)(GLuint index);
	using PFNGLENABLEVERTEXATTRIBARRAYPROC = void(*)(GLuint index);
	using PFNGLGETACTIVEATTRIBPROC = void(*)(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLint* size, GLenum* type, GLchar* name);
	using PFNGLGETACTIVEUNIFORMPROC = void(*)(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLint* size, GLenum* type, GLchar* name);
	using PFNGLGETATTACHEDSHADERSPROC = void(*)(GLuint program, GLsizei maxCount, GLsizei* count, GLuint* shaders);
	using PFNGLGETATTRIBLOCATIONPROC = GLint(*)(GLuint program, const GLchar* name);
	using PFNGLGETPROGRAMIVPROC = void(*)(GLuint program, GLenum pname, GLint* params);
	using PFNGLGETPROGRAMINFOLOGPROC = void(*)(GLuint program, GLsizei bufSize, GLsizei* length, GLchar* infoLog);
	using PFNGLGETSHADERIVPROC = void(*)(GLuint shader, GLenum pname, GLint* params);
	using PFNGLGETSHADERINFOLOGPROC = void(*)(GLuint shader, GLsizei bufSize, GLsizei* length, GLchar* infoLog);
	using PFNGLGETSHADERSOURCEPROC = void(*)(GLuint shader, GLsizei bufSize, GLsizei* length, GLchar* source);
	using PFNGLGETUNIFORMLOCATIONPROC = GLint(*)(GLuint program, const GLchar* name);
	using PFNGLGETUNIFORMFVPROC = void(*)(GLuint program, GLint location, GLfloat* params);
	using PFNGLGETUNIFORMIVPROC = void(*)(GLuint program, GLint location, GLint* params);
	using PFNGLGETVERTEXATTRIBDVPROC = void(*)(GLuint index, GLenum pname, GLdouble* params);
	using PFNGLGETVERTEXATTRIBFVPROC = void(*)(GLuint index, GLenum pname, GLfloat* params);
	using PFNGLGETVERTEXATTRIBIVPROC = void(*)(GLuint index, GLenum pname, GLint* params);
	using PFNGLGETVERTEXATTRIBPOINTERVPROC = void(*)(GLuint index, GLenum pname, void** pointer);
	using PFNGLISPROGRAMPROC = GLboolean(*)(GLuint program);
	using PFNGLISSHADERPROC = GLboolean(*)(GLuint shader);
	using PFNGLLINKPROGRAMPROC = void(*)(GLuint program);
	using PFNGLSHADERSOURCEPROC = void(*)(GLuint shader, GLsizei count, const GLchar* const* string, const GLint* length);
	using PFNGLUSEPROGRAMPROC = void(*)(GLuint program);
	using PFNGLUNIFORM1FPROC = void(*)(GLint location, GLfloat v0);
	using PFNGLUNIFORM2FPROC = void(*)(GLint location, GLfloat v0, GLfloat v1);
	using PFNGLUNIFORM3FPROC = void(*)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
	using PFNGLUNIFORM4FPROC = void(*)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
	using PFNGLUNIFORM1IPROC = void(*)(GLint location, GLint v0);
	using PFNGLUNIFORM2IPROC = void(*)(GLint location, GLint v0, GLint v1);
	using PFNGLUNIFORM3IPROC = void(*)(GLint location, GLint v0, GLint v1, GLint v2);
	using PFNGLUNIFORM4IPROC = void(*)(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
	using PFNGLUNIFORM1FVPROC = void(*)(GLint location, GLsizei count, const GLfloat* value);
	using PFNGLUNIFORM2FVPROC = void(*)(GLint location, GLsizei count, const GLfloat* value);
	using PFNGLUNIFORM3FVPROC = void(*)(GLint location, GLsizei count, const GLfloat* value);
	using PFNGLUNIFORM4FVPROC = void(*)(GLint location, GLsizei count, const GLfloat* value);
	using PFNGLUNIFORM1IVPROC = void(*)(GLint location, GLsizei count, const GLint* value);
	using PFNGLUNIFORM2IVPROC = void(*)(GLint location, GLsizei count, const GLint* value);
	using PFNGLUNIFORM3IVPROC = void(*)(GLint location, GLsizei count, const GLint* value);
	using PFNGLUNIFORM4IVPROC = void(*)(GLint location, GLsizei count, const GLint* value);
	using PFNGLUNIFORMMATRIX2FVPROC = void(*)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
	using PFNGLUNIFORMMATRIX3FVPROC = void(*)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
	using PFNGLUNIFORMMATRIX4FVPROC = void(*)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
	using PFNGLVALIDATEPROGRAMPROC = void(*)(GLuint program);
	using PFNGLVERTEXATTRIB1DPROC = void(*)(GLuint index, GLdouble x);
	using PFNGLVERTEXATTRIB1DVPROC = void(*)(GLuint index, const GLdouble* v);
	using PFNGLVERTEXATTRIB1FPROC = void(*)(GLuint index, GLfloat x);
	using PFNGLVERTEXATTRIB1FVPROC = void(*)(GLuint index, const GLfloat* v);
	using PFNGLVERTEXATTRIB1SPROC = void(*)(GLuint index, GLshort x);
	using PFNGLVERTEXATTRIB1SVPROC = void(*)(GLuint index, const GLshort* v);
	using PFNGLVERTEXATTRIB2DPROC = void(*)(GLuint index, GLdouble x, GLdouble y);
	using PFNGLVERTEXATTRIB2DVPROC = void(*)(GLuint index, const GLdouble* v);
	using PFNGLVERTEXATTRIB2FPROC = void(*)(GLuint index, GLfloat x, GLfloat y);
	using PFNGLVERTEXATTRIB2FVPROC = void(*)(GLuint index, const GLfloat* v);
	using PFNGLVERTEXATTRIB2SPROC = void(*)(GLuint index, GLshort x, GLshort y);
	using PFNGLVERTEXATTRIB2SVPROC = void(*)(GLuint index, const GLshort* v);
	using PFNGLVERTEXATTRIB3DPROC = void(*)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
	using PFNGLVERTEXATTRIB3DVPROC = void(*)(GLuint index, const GLdouble* v);
	using PFNGLVERTEXATTRIB3FPROC = void(*)(GLuint index, GLfloat x, GLfloat y, GLfloat z);
	using PFNGLVERTEXATTRIB3FVPROC = void(*)(GLuint index, const GLfloat* v);
	using PFNGLVERTEXATTRIB3SPROC = void(*)(GLuint index, GLshort x, GLshort y, GLshort z);
	using PFNGLVERTEXATTRIB3SVPROC = void(*)(GLuint index, const GLshort* v);
	using PFNGLVERTEXATTRIB4NBVPROC = void(*)(GLuint index, const GLbyte* v);
	using PFNGLVERTEXATTRIB4NIVPROC = void(*)(GLuint index, const GLint* v);
	using PFNGLVERTEXATTRIB4NSVPROC = void(*)(GLuint index, const GLshort* v);
	using PFNGLVERTEXATTRIB4NUBPROC = void(*)(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
	using PFNGLVERTEXATTRIB4NUBVPROC = void(*)(GLuint index, const GLubyte* v);
	using PFNGLVERTEXATTRIB4NUIVPROC = void(*)(GLuint index, const GLuint* v);
	using PFNGLVERTEXATTRIB4NUSVPROC = void(*)(GLuint index, const GLushort* v);
	using PFNGLVERTEXATTRIB4BVPROC = void(*)(GLuint index, const GLbyte* v);
	using PFNGLVERTEXATTRIB4DPROC = void(*)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
	using PFNGLVERTEXATTRIB4DVPROC = void(*)(GLuint index, const GLdouble* v);
	using PFNGLVERTEXATTRIB4FPROC = void(*)(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
	using PFNGLVERTEXATTRIB4FVPROC = void(*)(GLuint index, const GLfloat* v);
	using PFNGLVERTEXATTRIB4IVPROC = void(*)(GLuint index, const GLint* v);
	using PFNGLVERTEXATTRIB4SPROC = void(*)(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
	using PFNGLVERTEXATTRIB4SVPROC = void(*)(GLuint index, const GLshort* v);
	using PFNGLVERTEXATTRIB4UBVPROC = void(*)(GLuint index, const GLubyte* v);
	using PFNGLVERTEXATTRIB4UIVPROC = void(*)(GLuint index, const GLuint* v);
	using PFNGLVERTEXATTRIB4USVPROC = void(*)(GLuint index, const GLushort* v);
	using PFNGLVERTEXATTRIBPOINTERPROC = void(*)(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void* pointer);
}