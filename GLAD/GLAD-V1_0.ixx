export module GLAD:V1_0;

export import :BASE;

export namespace GLAD {
	// Alias for function pointer types
	using PFNGLCULLFACEPROC = void(*)(GLenum mode);
	using PFNGLFRONTFACEPROC = void(*)(GLenum mode);
	using PFNGLHINTPROC = void(*)(GLenum target, GLenum mode);
	using PFNGLLINEWIDTHPROC = void(*)(GLfloat width);
	using PFNGLPOINTSIZEPROC = void(*)(GLfloat size);
	using PFNGLPOLYGONMODEPROC = void(*)(GLenum face, GLenum mode);
	using PFNGLSCISSORPROC = void(*)(GLint x, GLint y, GLsizei width, GLsizei height);
	using PFNGLTEXPARAMETERFPROC = void(*)(GLenum target, GLenum pname, GLfloat param);
	using PFNGLTEXPARAMETERFVPROC = void(*)(GLenum target, GLenum pname, const GLfloat* params);
	using PFNGLTEXPARAMETERIPROC = void(*)(GLenum target, GLenum pname, GLint param);
	using PFNGLTEXPARAMETERIVPROC = void(*)(GLenum target, GLenum pname, const GLint* params);
	using PFNGLTEXIMAGE1DPROC = void(*)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void* pixels);
	using PFNGLTEXIMAGE2DPROC = void(*)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void* pixels);
	using PFNGLDRAWBUFFERPROC = void(*)(GLenum buf);
	using PFNGLCLEARPROC = void(*)(GLbitfield mask);
	using PFNGLCLEARCOLORPROC = void(*)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
	using PFNGLCLEARSTENCILPROC = void(*)(GLint s);
	using PFNGLCLEARDEPTHPROC = void(*)(GLdouble depth);
	using PFNGLSTENCILMASKPROC = void(*)(GLuint mask);
	using PFNGLCOLORMASKPROC = void(*)(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
	using PFNGLDEPTHMASKPROC = void(*)(GLboolean flag);
	using PFNGLDISABLEPROC = void(*)(GLenum cap);
	using PFNGLENABLEPROC = void(*)(GLenum cap);
	using PFNGLFINISHPROC = void(*)(void);
	using PFNGLFLUSHPROC = void(*)(void);
	using PFNGLBLENDFUNCPROC = void(*)(GLenum sfactor, GLenum dfactor);
	using PFNGLLOGICOPPROC = void(*)(GLenum opcode);
	using PFNGLSTENCILFUNCPROC = void(*)(GLenum func, GLint ref, GLuint mask);
	using PFNGLSTENCILOPPROC = void(*)(GLenum fail, GLenum zfail, GLenum zpass);
	using PFNGLDEPTHFUNCPROC = void(*)(GLenum func);
	using PFNGLPIXELSTOREFPROC = void(*)(GLenum pname, GLfloat param);
	using PFNGLPIXELSTOREIPROC = void(*)(GLenum pname, GLint param);
	using PFNGLREADBUFFERPROC = void(*)(GLenum src);
	using PFNGLREADPIXELSPROC = void(*)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void* pixels);
	using PFNGLGETBOOLEANVPROC = void(*)(GLenum pname, GLboolean* data);
	using PFNGLGETDOUBLEVPROC = void(*)(GLenum pname, GLdouble* data);
	using PFNGLGETERRORPROC = GLenum(*)(void);
	using PFNGLGETFLOATVPROC = void(*)(GLenum pname, GLfloat* data);
	using PFNGLGETINTEGERVPROC = void(*)(GLenum pname, GLint* data);
	using PFNGLGETSTRINGPROC = const GLubyte* (*)(GLenum name);
	using PFNGLGETTEXIMAGEPROC = void(*)(GLenum target, GLint level, GLenum format, GLenum type, void* pixels);
	using PFNGLGETTEXPARAMETERFVPROC = void(*)(GLenum target, GLenum pname, GLfloat* params);
	using PFNGLGETTEXPARAMETERIVPROC = void(*)(GLenum target, GLenum pname, GLint* params);
	using PFNGLGETTEXLEVELPARAMETERFVPROC = void(*)(GLenum target, GLint level, GLenum pname, GLfloat* params);
	using PFNGLGETTEXLEVELPARAMETERIVPROC = void(*)(GLenum target, GLint level, GLenum pname, GLint* params);
	using PFNGLISENABLEDPROC = GLboolean(*)(GLenum cap);
	using PFNGLDEPTHRANGEPROC = void(*)(GLdouble n, GLdouble f);
	using PFNGLVIEWPORTPROC = void(*)(GLint x, GLint y, GLsizei width, GLsizei height);

	// Declare function pointers as variables
	PFNGLCULLFACEPROC glCullFace = nullptr;
	PFNGLFRONTFACEPROC glFrontFace = nullptr;
	PFNGLHINTPROC glHint = nullptr;
	PFNGLLINEWIDTHPROC glLineWidth = nullptr;
	PFNGLPOINTSIZEPROC glPointSize = nullptr;
	PFNGLPOLYGONMODEPROC glPolygonMode = nullptr;
	PFNGLSCISSORPROC glScissor = nullptr;
	PFNGLTEXPARAMETERFPROC glTexParameterf = nullptr;
	PFNGLTEXPARAMETERFVPROC glTexParameterfv = nullptr;
	PFNGLTEXPARAMETERIPROC glTexParameteri = nullptr;
	PFNGLTEXPARAMETERIVPROC glTexParameteriv = nullptr;
	PFNGLTEXIMAGE1DPROC glTexImage1D = nullptr;
	PFNGLTEXIMAGE2DPROC glTexImage2D = nullptr;
	PFNGLDRAWBUFFERPROC glDrawBuffer = nullptr;
	PFNGLCLEARPROC glClear = nullptr;
	PFNGLCLEARCOLORPROC glClearColor = nullptr;
	PFNGLCLEARSTENCILPROC glClearStencil = nullptr;
	PFNGLCLEARDEPTHPROC glClearDepth = nullptr;
	PFNGLSTENCILMASKPROC glStencilMask = nullptr;
	PFNGLCOLORMASKPROC glColorMask = nullptr;
	PFNGLDEPTHMASKPROC glDepthMask = nullptr;
	PFNGLDISABLEPROC glDisable = nullptr;
	PFNGLENABLEPROC glEnable = nullptr;
	PFNGLFINISHPROC glFinish = nullptr;
	PFNGLFLUSHPROC glFlush = nullptr;
	PFNGLBLENDFUNCPROC glBlendFunc = nullptr;
	PFNGLLOGICOPPROC glLogicOp = nullptr;
	PFNGLSTENCILFUNCPROC glStencilFunc = nullptr;
	PFNGLSTENCILOPPROC glStencilOp = nullptr;
	PFNGLDEPTHFUNCPROC glDepthFunc = nullptr;
	PFNGLPIXELSTOREFPROC glPixelStoref = nullptr;
	PFNGLPIXELSTOREIPROC glPixelStorei = nullptr;
	PFNGLREADBUFFERPROC glReadBuffer = nullptr;
	PFNGLREADPIXELSPROC glReadPixels = nullptr;
	PFNGLGETBOOLEANVPROC glGetBooleanv = nullptr;
	PFNGLGETDOUBLEVPROC glGetDoublev = nullptr;
	PFNGLGETERRORPROC glGetError = nullptr;
	PFNGLGETFLOATVPROC glGetFloatv = nullptr;
	PFNGLGETINTEGERVPROC glGetIntegerv = nullptr;
	PFNGLGETSTRINGPROC glGetString = nullptr;
	PFNGLGETTEXIMAGEPROC glGetTexImage = nullptr;
	PFNGLGETTEXPARAMETERFVPROC glGetTexParameterfv = nullptr;
	PFNGLGETTEXPARAMETERIVPROC glGetTexParameteriv = nullptr;
	PFNGLGETTEXLEVELPARAMETERFVPROC glGetTexLevelParameterfv = nullptr;
	PFNGLGETTEXLEVELPARAMETERIVPROC glGetTexLevelParameteriv = nullptr;
	PFNGLISENABLEDPROC glIsEnabled = nullptr;
	PFNGLDEPTHRANGEPROC glDepthRange = nullptr;
	PFNGLVIEWPORTPROC glViewport = nullptr;

	namespace GLAD_1_0 {
		void load_GL_RECURSIVE(GLADloadproc load) {
			glCullFace = GLAD::gladLoadCoreFunction<PFNGLCULLFACEPROC>("glCullFace", "opengl32.dll");
			glFrontFace = GLAD::gladLoadCoreFunction<PFNGLFRONTFACEPROC>("glFrontFace", "opengl32.dll");
			glHint = GLAD::gladLoadCoreFunction<PFNGLHINTPROC>("glHint", "opengl32.dll");
			glLineWidth = GLAD::gladLoadCoreFunction<PFNGLLINEWIDTHPROC>("glLineWidth", "opengl32.dll");
			glPointSize = GLAD::gladLoadCoreFunction<PFNGLPOINTSIZEPROC>("glPointSize", "opengl32.dll");
			glPolygonMode = GLAD::gladLoadCoreFunction<PFNGLPOLYGONMODEPROC>("glPolygonMode", "opengl32.dll");
			glScissor = GLAD::gladLoadCoreFunction<PFNGLSCISSORPROC>("glScissor", "opengl32.dll");
			glTexParameterf = GLAD::gladLoadCoreFunction<PFNGLTEXPARAMETERFPROC>("glTexParameterf", "opengl32.dll");
			glTexParameterfv = GLAD::gladLoadCoreFunction<PFNGLTEXPARAMETERFVPROC>("glTexParameterfv", "opengl32.dll");
			glTexParameteri = GLAD::gladLoadCoreFunction<PFNGLTEXPARAMETERIPROC>("glTexParameteri", "opengl32.dll");
			glTexParameteriv = GLAD::gladLoadCoreFunction<PFNGLTEXPARAMETERIVPROC>("glTexParameteriv", "opengl32.dll");
			glTexImage1D = GLAD::gladLoadCoreFunction<PFNGLTEXIMAGE1DPROC>("glTexImage1D", "opengl32.dll");
			glTexImage2D = GLAD::gladLoadCoreFunction<PFNGLTEXIMAGE2DPROC>("glTexImage2D", "opengl32.dll");
			glDrawBuffer = GLAD::gladLoadCoreFunction<PFNGLDRAWBUFFERPROC>("glDrawBuffer", "opengl32.dll");
			glClear = GLAD::gladLoadCoreFunction<PFNGLCLEARPROC>("glClear", "opengl32.dll");
			glClearColor = GLAD::gladLoadCoreFunction<PFNGLCLEARCOLORPROC>("glClearColor", "opengl32.dll");
			glClearStencil = GLAD::gladLoadCoreFunction<PFNGLCLEARSTENCILPROC>("glClearStencil", "opengl32.dll");
			glClearDepth = GLAD::gladLoadCoreFunction<PFNGLCLEARDEPTHPROC>("glClearDepth", "opengl32.dll");
			glStencilMask = GLAD::gladLoadCoreFunction<PFNGLSTENCILMASKPROC>("glStencilMask", "opengl32.dll");
			glColorMask = GLAD::gladLoadCoreFunction<PFNGLCOLORMASKPROC>("glColorMask", "opengl32.dll");
			glDepthMask = GLAD::gladLoadCoreFunction<PFNGLDEPTHMASKPROC>("glDepthMask", "opengl32.dll");
			glDisable = GLAD::gladLoadCoreFunction<PFNGLDISABLEPROC>("glDisable", "opengl32.dll");
			glEnable = GLAD::gladLoadCoreFunction<PFNGLENABLEPROC>("glEnable", "opengl32.dll");
			glFinish = GLAD::gladLoadCoreFunction<PFNGLFINISHPROC>("glFinish", "opengl32.dll");
			glFlush = GLAD::gladLoadCoreFunction<PFNGLFLUSHPROC>("glFlush", "opengl32.dll");
			glBlendFunc = GLAD::gladLoadCoreFunction<PFNGLBLENDFUNCPROC>("glBlendFunc", "opengl32.dll");
			glLogicOp = GLAD::gladLoadCoreFunction<PFNGLLOGICOPPROC>("glLogicOp", "opengl32.dll");
			glStencilFunc = GLAD::gladLoadCoreFunction<PFNGLSTENCILFUNCPROC>("glStencilFunc", "opengl32.dll");
			glStencilOp = GLAD::gladLoadCoreFunction<PFNGLSTENCILOPPROC>("glStencilOp", "opengl32.dll");
			glDepthFunc = GLAD::gladLoadCoreFunction<PFNGLDEPTHFUNCPROC>("glDepthFunc", "opengl32.dll");
			glPixelStoref = GLAD::gladLoadCoreFunction<PFNGLPIXELSTOREFPROC>("glPixelStoref", "opengl32.dll");
			glPixelStorei = GLAD::gladLoadCoreFunction<PFNGLPIXELSTOREIPROC>("glPixelStorei", "opengl32.dll");
			glReadBuffer = GLAD::gladLoadCoreFunction<PFNGLREADBUFFERPROC>("glReadBuffer", "opengl32.dll");
			glReadPixels = GLAD::gladLoadCoreFunction<PFNGLREADPIXELSPROC>("glReadPixels", "opengl32.dll");
			glGetBooleanv = GLAD::gladLoadCoreFunction<PFNGLGETBOOLEANVPROC>("glGetBooleanv", "opengl32.dll");
			glGetDoublev = GLAD::gladLoadCoreFunction<PFNGLGETDOUBLEVPROC>("glGetDoublev", "opengl32.dll");
			glGetError = GLAD::gladLoadCoreFunction<PFNGLGETERRORPROC>("glGetError", "opengl32.dll");
			glGetFloatv = GLAD::gladLoadCoreFunction<PFNGLGETFLOATVPROC>("glGetFloatv", "opengl32.dll");
			glGetIntegerv = GLAD::gladLoadCoreFunction<PFNGLGETINTEGERVPROC>("glGetIntegerv", "opengl32.dll");
			glGetString = GLAD::gladLoadCoreFunction<PFNGLGETSTRINGPROC>("glGetString", "opengl32.dll");
			glGetTexImage = GLAD::gladLoadCoreFunction<PFNGLGETTEXIMAGEPROC>("glGetTexImage", "opengl32.dll");
			glGetTexParameterfv = GLAD::gladLoadCoreFunction<PFNGLGETTEXPARAMETERFVPROC>("glGetTexParameterfv", "opengl32.dll");
			glGetTexParameteriv = GLAD::gladLoadCoreFunction<PFNGLGETTEXPARAMETERIVPROC>("glGetTexParameteriv", "opengl32.dll");
			glGetTexLevelParameterfv = GLAD::gladLoadCoreFunction<PFNGLGETTEXLEVELPARAMETERFVPROC>("glGetTexLevelParameterfv", "opengl32.dll");
			glGetTexLevelParameteriv = GLAD::gladLoadCoreFunction<PFNGLGETTEXLEVELPARAMETERIVPROC>("glGetTexLevelParameteriv", "opengl32.dll");
			glIsEnabled = GLAD::gladLoadCoreFunction<PFNGLISENABLEDPROC>("glIsEnabled", "opengl32.dll");
			glDepthRange = GLAD::gladLoadCoreFunction<PFNGLDEPTHRANGEPROC>("glDepthRange", "opengl32.dll");
			glViewport = GLAD::gladLoadCoreFunction<PFNGLVIEWPORTPROC>("glViewport", "opengl32.dll");
		}
	}
}