export module GLAD:V3_0;

export import :V2_1;

// Alias for function pointer types
export using PFNGLCOLORMASKIPROC = void(*)(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
export using PFNGLGETBOOLEANI_VPROC = void(*)(GLenum target, GLuint index, GLboolean* data);
export using PFNGLGETINTEGERI_VPROC = void(*)(GLenum target, GLuint index, GLint* data);
export using PFNGLENABLEIPROC = void(*)(GLenum target, GLuint index);
export using PFNGLDISABLEIPROC = void(*)(GLenum target, GLuint index);
export using PFNGLISENABLEDIPROC = GLboolean(*)(GLenum target, GLuint index);
export using PFNGLBEGINTRANSFORMFEEDBACKPROC = void(*)(GLenum primitiveMode);
export using PFNGLENDTRANSFORMFEEDBACKPROC = void(*)(void);
export using PFNGLBINDBUFFERRANGEPROC = void(*)(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
export using PFNGLBINDBUFFERBASEPROC = void(*)(GLenum target, GLuint index, GLuint buffer);
export using PFNGLTRANSFORMFEEDBACKVARYINGSPROC = void(*)(GLuint program, GLsizei count, const GLchar* const* varyings, GLenum bufferMode);
export using PFNGLGETTRANSFORMFEEDBACKVARYINGPROC = void(*)(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLsizei* size, GLenum* type, GLchar* name);
export using PFNGLCLAMPCOLORPROC = void(*)(GLenum target, GLenum clamp);
export using PFNGLBEGINCONDITIONALRENDERPROC = void(*)(GLuint id, GLenum mode);
export using PFNGLENDCONDITIONALRENDERPROC = void(*)(void);
export using PFNGLVERTEXATTRIBIPOINTERPROC = void(*)(GLuint index, GLint size, GLenum type, GLsizei stride, const void* pointer);
export using PFNGLGETVERTEXATTRIBIIVPROC = void(*)(GLuint index, GLenum pname, GLint* params);
export using PFNGLGETVERTEXATTRIBIUIVPROC = void(*)(GLuint index, GLenum pname, GLuint* params);
export using PFNGLVERTEXATTRIBI1IPROC = void(*)(GLuint index, GLint x);
export using PFNGLVERTEXATTRIBI2IPROC = void(*)(GLuint index, GLint x, GLint y);
export using PFNGLVERTEXATTRIBI3IPROC = void(*)(GLuint index, GLint x, GLint y, GLint z);
export using PFNGLVERTEXATTRIBI4IPROC = void(*)(GLuint index, GLint x, GLint y, GLint z, GLint w);
export using PFNGLVERTEXATTRIBI1UIPROC = void(*)(GLuint index, GLuint x);
export using PFNGLVERTEXATTRIBI2UIPROC = void(*)(GLuint index, GLuint x, GLuint y);
export using PFNGLVERTEXATTRIBI3UIPROC = void(*)(GLuint index, GLuint x, GLuint y, GLuint z);
export using PFNGLVERTEXATTRIBI4UIPROC = void(*)(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
export using PFNGLVERTEXATTRIBI1IVPROC = void(*)(GLuint index, const GLint* v);
export using PFNGLVERTEXATTRIBI2IVPROC = void(*)(GLuint index, const GLint* v);
export using PFNGLVERTEXATTRIBI3IVPROC = void(*)(GLuint index, const GLint* v);
export using PFNGLVERTEXATTRIBI4IVPROC = void(*)(GLuint index, const GLint* v);
export using PFNGLVERTEXATTRIBI1UIVPROC = void(*)(GLuint index, const GLuint* v);
export using PFNGLVERTEXATTRIBI2UIVPROC = void(*)(GLuint index, const GLuint* v);
export using PFNGLVERTEXATTRIBI3UIVPROC = void(*)(GLuint index, const GLuint* v);
export using PFNGLVERTEXATTRIBI4UIVPROC = void(*)(GLuint index, const GLuint* v);
export using PFNGLVERTEXATTRIBI4BVPROC = void(*)(GLuint index, const GLbyte* v);
export using PFNGLVERTEXATTRIBI4SVPROC = void(*)(GLuint index, const GLshort* v);
export using PFNGLVERTEXATTRIBI4UBVPROC = void(*)(GLuint index, const GLubyte* v);
export using PFNGLVERTEXATTRIBI4USVPROC = void(*)(GLuint index, const GLushort* v);
export using PFNGLGETUNIFORMUIVPROC = void(*)(GLuint program, GLint location, GLuint* params);
export using PFNGLBINDFRAGDATALOCATIONPROC = void(*)(GLuint program, GLuint color, const GLchar* name);
export using PFNGLGETFRAGDATALOCATIONPROC = GLint(*)(GLuint program, const GLchar* name);
export using PFNGLUNIFORM1UIPROC = void(*)(GLint location, GLuint v0);
export using PFNGLUNIFORM2UIPROC = void(*)(GLint location, GLuint v0, GLuint v1);
export using PFNGLUNIFORM3UIPROC = void(*)(GLint location, GLuint v0, GLuint v1, GLuint v2);
export using PFNGLUNIFORM4UIPROC = void(*)(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
export using PFNGLUNIFORM1UIVPROC = void(*)(GLint location, GLsizei count, const GLuint* value);
export using PFNGLUNIFORM2UIVPROC = void(*)(GLint location, GLsizei count, const GLuint* value);
export using PFNGLUNIFORM3UIVPROC = void(*)(GLint location, GLsizei count, const GLuint* value);
export using PFNGLUNIFORM4UIVPROC = void(*)(GLint location, GLsizei count, const GLuint* value);
export using PFNGLTEXPARAMETERIIVPROC = void(*)(GLenum target, GLenum pname, const GLint* params);
export using PFNGLTEXPARAMETERIUIVPROC = void(*)(GLenum target, GLenum pname, const GLuint* params);
export using PFNGLGETTEXPARAMETERIIVPROC = void(*)(GLenum target, GLenum pname, GLint* params);
export using PFNGLGETTEXPARAMETERIUIVPROC = void(*)(GLenum target, GLenum pname, GLuint* params);
export using PFNGLCLEARBUFFERIVPROC = void(*)(GLenum buffer, GLint drawbuffer, const GLint* value);
export using PFNGLCLEARBUFFERUIVPROC = void(*)(GLenum buffer, GLint drawbuffer, const GLuint* value);
export using PFNGLCLEARBUFFERFVPROC = void(*)(GLenum buffer, GLint drawbuffer, const GLfloat* value);
export using PFNGLCLEARBUFFERFIPROC = void(*)(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
export using PFNGLGETSTRINGIPROC = const GLubyte* (*)(GLenum name, GLuint index);
export using PFNGLISRENDERBUFFERPROC = GLboolean(*)(GLuint renderbuffer);
export using PFNGLBINDRENDERBUFFERPROC = void(*)(GLenum target, GLuint renderbuffer);
export using PFNGLDELETERENDERBUFFERSPROC = void(*)(GLsizei n, const GLuint* renderbuffers);
export using PFNGLGENRENDERBUFFERSPROC = void(*)(GLsizei n, GLuint* renderbuffers);
export using PFNGLRENDERBUFFERSTORAGEPROC = void(*)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
export using PFNGLGETRENDERBUFFERPARAMETERIVPROC = void(*)(GLenum target, GLenum pname, GLint* params);
export using PFNGLISFRAMEBUFFERPROC = GLboolean(*)(GLuint framebuffer);
export using PFNGLBINDFRAMEBUFFERPROC = void(*)(GLenum target, GLuint framebuffer);
export using PFNGLDELETEFRAMEBUFFERSPROC = void(*)(GLsizei n, const GLuint* framebuffers);
export using PFNGLGENFRAMEBUFFERSPROC = void(*)(GLsizei n, GLuint* framebuffers);
export using PFNGLCHECKFRAMEBUFFERSTATUSPROC = GLenum(*)(GLenum target);
export using PFNGLFRAMEBUFFERTEXTURE1DPROC = void(*)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
export using PFNGLFRAMEBUFFERTEXTURE2DPROC = void(*)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
export using PFNGLFRAMEBUFFERTEXTURE3DPROC = void(*)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
export using PFNGLFRAMEBUFFERRENDERBUFFERPROC = void(*)(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
export using PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC = void(*)(GLenum target, GLenum attachment, GLenum pname, GLint* params);
export using PFNGLGENERATEMIPMAPPROC = void(*)(GLenum target);
export using PFNGLBLITFRAMEBUFFERPROC = void(*)(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
export using PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC = void(*)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
export using PFNGLFRAMEBUFFERTEXTURELAYERPROC = void(*)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
export using PFNGLMAPBUFFERRANGEPROC = void* (*)(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
export using PFNGLFLUSHMAPPEDBUFFERRANGEPROC = void(*)(GLenum target, GLintptr offset, GLsizeiptr length);
export using PFNGLBINDVERTEXARRAYPROC = void(*)(GLuint array);
export using PFNGLDELETEVERTEXARRAYSPROC = void(*)(GLsizei n, const GLuint* arrays);
export using PFNGLGENVERTEXARRAYSPROC = void(*)(GLsizei n, GLuint* arrays);
export using PFNGLISVERTEXARRAYPROC = GLboolean(*)(GLuint array);

// Declare function pointers as variables
export PFNGLCOLORMASKIPROC glColorMaski = nullptr;
export PFNGLGETBOOLEANI_VPROC glGetBooleani_v = nullptr;
export PFNGLGETINTEGERI_VPROC glGetIntegeri_v = nullptr;
export PFNGLENABLEIPROC glEnablei = nullptr;
export PFNGLDISABLEIPROC glDisablei = nullptr;
export PFNGLISENABLEDIPROC glIsEnabledi = nullptr;
export PFNGLBEGINTRANSFORMFEEDBACKPROC glBeginTransformFeedback = nullptr;
export PFNGLENDTRANSFORMFEEDBACKPROC glEndTransformFeedback = nullptr;
export PFNGLBINDBUFFERRANGEPROC glBindBufferRange = nullptr;
export PFNGLBINDBUFFERBASEPROC glBindBufferBase = nullptr;
export PFNGLTRANSFORMFEEDBACKVARYINGSPROC glTransformFeedbackVaryings = nullptr;
export PFNGLGETTRANSFORMFEEDBACKVARYINGPROC glGetTransformFeedbackVarying = nullptr;
export PFNGLCLAMPCOLORPROC glClampColor = nullptr;
export PFNGLBEGINCONDITIONALRENDERPROC glBeginConditionalRender = nullptr;
export PFNGLENDCONDITIONALRENDERPROC glEndConditionalRender = nullptr;
export PFNGLVERTEXATTRIBIPOINTERPROC glVertexAttribIPointer = nullptr;
export PFNGLGETVERTEXATTRIBIIVPROC glGetVertexAttribIiv = nullptr;
export PFNGLGETVERTEXATTRIBIUIVPROC glGetVertexAttribIuiv = nullptr;
export PFNGLVERTEXATTRIBI1IPROC glVertexAttribI1i = nullptr;
export PFNGLVERTEXATTRIBI2IPROC glVertexAttribI2i = nullptr;
export PFNGLVERTEXATTRIBI3IPROC glVertexAttribI3i = nullptr;
export PFNGLVERTEXATTRIBI4IPROC glVertexAttribI4i = nullptr;
export PFNGLVERTEXATTRIBI1UIPROC glVertexAttribI1ui = nullptr;
export PFNGLVERTEXATTRIBI2UIPROC glVertexAttribI2ui = nullptr;
export PFNGLVERTEXATTRIBI3UIPROC glVertexAttribI3ui = nullptr;
export PFNGLVERTEXATTRIBI4UIPROC glVertexAttribI4ui = nullptr;
export PFNGLVERTEXATTRIBI1IVPROC glVertexAttribI1iv = nullptr;
export PFNGLVERTEXATTRIBI2IVPROC glVertexAttribI2iv = nullptr;
export PFNGLVERTEXATTRIBI3IVPROC glVertexAttribI3iv = nullptr;
export PFNGLVERTEXATTRIBI4IVPROC glVertexAttribI4iv = nullptr;
export PFNGLVERTEXATTRIBI1UIVPROC glVertexAttribI1uiv = nullptr;
export PFNGLVERTEXATTRIBI2UIVPROC glVertexAttribI2uiv = nullptr;
export PFNGLVERTEXATTRIBI3UIVPROC glVertexAttribI3uiv = nullptr;
export PFNGLVERTEXATTRIBI4UIVPROC glVertexAttribI4uiv = nullptr;
export PFNGLVERTEXATTRIBI4BVPROC glVertexAttribI4bv = nullptr;
export PFNGLVERTEXATTRIBI4SVPROC glVertexAttribI4sv = nullptr;
export PFNGLVERTEXATTRIBI4UBVPROC glVertexAttribI4ubv = nullptr;
export PFNGLVERTEXATTRIBI4USVPROC glVertexAttribI4usv = nullptr;
export PFNGLGETUNIFORMUIVPROC glGetUniformuiv = nullptr;
export PFNGLBINDFRAGDATALOCATIONPROC glBindFragDataLocation = nullptr;
export PFNGLGETFRAGDATALOCATIONPROC glGetFragDataLocation = nullptr;
export PFNGLUNIFORM1UIPROC glUniform1ui = nullptr;
export PFNGLUNIFORM2UIPROC glUniform2ui = nullptr;
export PFNGLUNIFORM3UIPROC glUniform3ui = nullptr;
export PFNGLUNIFORM4UIPROC glUniform4ui = nullptr;
export PFNGLUNIFORM1UIVPROC glUniform1uiv = nullptr;
export PFNGLUNIFORM2UIVPROC glUniform2uiv = nullptr;
export PFNGLUNIFORM3UIVPROC glUniform3uiv = nullptr;
export PFNGLUNIFORM4UIVPROC glUniform4uiv = nullptr;
export PFNGLTEXPARAMETERIIVPROC glTexParameterIiv = nullptr;
export PFNGLTEXPARAMETERIUIVPROC glTexParameterIuiv = nullptr;
export PFNGLGETTEXPARAMETERIIVPROC glGetTexParameterIiv = nullptr;
export PFNGLGETTEXPARAMETERIUIVPROC glGetTexParameterIuiv = nullptr;
export PFNGLCLEARBUFFERIVPROC glClearBufferiv = nullptr;
export PFNGLCLEARBUFFERUIVPROC glClearBufferuiv = nullptr;
export PFNGLCLEARBUFFERFVPROC glClearBufferfv = nullptr;
export PFNGLCLEARBUFFERFIPROC glClearBufferfi = nullptr;
export PFNGLGETSTRINGIPROC glGetStringi = nullptr;
export PFNGLISRENDERBUFFERPROC glIsRenderbuffer = nullptr;
export PFNGLBINDRENDERBUFFERPROC glBindRenderbuffer = nullptr;
export PFNGLDELETERENDERBUFFERSPROC glDeleteRenderbuffers = nullptr;
export PFNGLGENRENDERBUFFERSPROC glGenRenderbuffers = nullptr;
export PFNGLRENDERBUFFERSTORAGEPROC glRenderbufferStorage = nullptr;
export PFNGLGETRENDERBUFFERPARAMETERIVPROC glGetRenderbufferParameteriv = nullptr;
export PFNGLISFRAMEBUFFERPROC glIsFramebuffer = nullptr;
export PFNGLBINDFRAMEBUFFERPROC glBindFramebuffer = nullptr;
export PFNGLDELETEFRAMEBUFFERSPROC glDeleteFramebuffers = nullptr;
export PFNGLGENFRAMEBUFFERSPROC glGenFramebuffers = nullptr;
export PFNGLCHECKFRAMEBUFFERSTATUSPROC glCheckFramebufferStatus = nullptr;
export PFNGLFRAMEBUFFERTEXTURE1DPROC glFramebufferTexture1D = nullptr;
export PFNGLFRAMEBUFFERTEXTURE2DPROC glFramebufferTexture2D = nullptr;
export PFNGLFRAMEBUFFERTEXTURE3DPROC glFramebufferTexture3D = nullptr;
export PFNGLFRAMEBUFFERRENDERBUFFERPROC glFramebufferRenderbuffer = nullptr;
export PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC glGetFramebufferAttachmentParameteriv = nullptr;
export PFNGLGENERATEMIPMAPPROC glGenerateMipmap = nullptr;
export PFNGLBLITFRAMEBUFFERPROC glBlitFramebuffer = nullptr;
export PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC glRenderbufferStorageMultisample = nullptr;
export PFNGLFRAMEBUFFERTEXTURELAYERPROC glFramebufferTextureLayer = nullptr;
export PFNGLMAPBUFFERRANGEPROC glMapBufferRange = nullptr;
export PFNGLFLUSHMAPPEDBUFFERRANGEPROC glFlushMappedBufferRange = nullptr;
export PFNGLBINDVERTEXARRAYPROC glBindVertexArray = nullptr;
export PFNGLDELETEVERTEXARRAYSPROC glDeleteVertexArrays = nullptr;
export PFNGLGENVERTEXARRAYSPROC glGenVertexArrays = nullptr;
export PFNGLISVERTEXARRAYPROC glIsVertexArray = nullptr;

export namespace GLAD_3_0 {
	void load_GL_RECURSIVE(GLADloadproc load) {
		glColorMaski = gladLoadFunction<PFNGLCOLORMASKIPROC>("glColorMaski", load);
		glGetBooleani_v = gladLoadFunction<PFNGLGETBOOLEANI_VPROC>("glGetBooleani_v", load);
		glGetIntegeri_v = gladLoadFunction<PFNGLGETINTEGERI_VPROC>("glGetIntegeri_v", load);
		glEnablei = gladLoadFunction<PFNGLENABLEIPROC>("glEnablei", load);
		glDisablei = gladLoadFunction<PFNGLDISABLEIPROC>("glDisablei", load);
		glIsEnabledi = gladLoadFunction<PFNGLISENABLEDIPROC>("glIsEnabledi", load);
		glBeginTransformFeedback = gladLoadFunction<PFNGLBEGINTRANSFORMFEEDBACKPROC>("glBeginTransformFeedback", load);
		glEndTransformFeedback = gladLoadFunction<PFNGLENDTRANSFORMFEEDBACKPROC>("glEndTransformFeedback", load);
		glBindBufferRange = gladLoadFunction<PFNGLBINDBUFFERRANGEPROC>("glBindBufferRange", load);
		glBindBufferBase = gladLoadFunction<PFNGLBINDBUFFERBASEPROC>("glBindBufferBase", load);
		glTransformFeedbackVaryings = gladLoadFunction<PFNGLTRANSFORMFEEDBACKVARYINGSPROC>("glTransformFeedbackVaryings", load);
		glGetTransformFeedbackVarying = gladLoadFunction<PFNGLGETTRANSFORMFEEDBACKVARYINGPROC>("glGetTransformFeedbackVarying", load);
		glClampColor = gladLoadFunction<PFNGLCLAMPCOLORPROC>("glClampColor", load);
		glBeginConditionalRender = gladLoadFunction<PFNGLBEGINCONDITIONALRENDERPROC>("glBeginConditionalRender", load);
		glEndConditionalRender = gladLoadFunction<PFNGLENDCONDITIONALRENDERPROC>("glEndConditionalRender", load);
		glVertexAttribIPointer = gladLoadFunction<PFNGLVERTEXATTRIBIPOINTERPROC>("glVertexAttribIPointer", load);
		glGetVertexAttribIiv = gladLoadFunction<PFNGLGETVERTEXATTRIBIIVPROC>("glGetVertexAttribIiv", load);
		glGetVertexAttribIuiv = gladLoadFunction<PFNGLGETVERTEXATTRIBIUIVPROC>("glGetVertexAttribIuiv", load);
		glVertexAttribI1i = gladLoadFunction<PFNGLVERTEXATTRIBI1IPROC>("glVertexAttribI1i", load);
		glVertexAttribI2i = gladLoadFunction<PFNGLVERTEXATTRIBI2IPROC>("glVertexAttribI2i", load);
		glVertexAttribI3i = gladLoadFunction<PFNGLVERTEXATTRIBI3IPROC>("glVertexAttribI3i", load);
		glVertexAttribI4i = gladLoadFunction<PFNGLVERTEXATTRIBI4IPROC>("glVertexAttribI4i", load);
		glVertexAttribI1ui = gladLoadFunction<PFNGLVERTEXATTRIBI1UIPROC>("glVertexAttribI1ui", load);
		glVertexAttribI2ui = gladLoadFunction<PFNGLVERTEXATTRIBI2UIPROC>("glVertexAttribI2ui", load);
		glVertexAttribI3ui = gladLoadFunction<PFNGLVERTEXATTRIBI3UIPROC>("glVertexAttribI3ui", load);
		glVertexAttribI4ui = gladLoadFunction<PFNGLVERTEXATTRIBI4UIPROC>("glVertexAttribI4ui", load);
		glVertexAttribI1iv = gladLoadFunction<PFNGLVERTEXATTRIBI1IVPROC>("glVertexAttribI1iv", load);
		glVertexAttribI2iv = gladLoadFunction<PFNGLVERTEXATTRIBI2IVPROC>("glVertexAttribI2iv", load);
		glVertexAttribI3iv = gladLoadFunction<PFNGLVERTEXATTRIBI3IVPROC>("glVertexAttribI3iv", load);
		glVertexAttribI4iv = gladLoadFunction<PFNGLVERTEXATTRIBI4IVPROC>("glVertexAttribI4iv", load);
		glVertexAttribI1uiv = gladLoadFunction<PFNGLVERTEXATTRIBI1UIVPROC>("glVertexAttribI1uiv", load);
		glVertexAttribI2uiv = gladLoadFunction<PFNGLVERTEXATTRIBI2UIVPROC>("glVertexAttribI2uiv", load);
		glVertexAttribI3uiv = gladLoadFunction<PFNGLVERTEXATTRIBI3UIVPROC>("glVertexAttribI3uiv", load);
		glVertexAttribI4uiv = gladLoadFunction<PFNGLVERTEXATTRIBI4UIVPROC>("glVertexAttribI4uiv", load);
		glVertexAttribI4bv = gladLoadFunction<PFNGLVERTEXATTRIBI4BVPROC>("glVertexAttribI4bv", load);
		glVertexAttribI4sv = gladLoadFunction<PFNGLVERTEXATTRIBI4SVPROC>("glVertexAttribI4sv", load);
		glVertexAttribI4ubv = gladLoadFunction<PFNGLVERTEXATTRIBI4UBVPROC>("glVertexAttribI4ubv", load);
		glVertexAttribI4usv = gladLoadFunction<PFNGLVERTEXATTRIBI4USVPROC>("glVertexAttribI4usv", load);
		glGetUniformuiv = gladLoadFunction<PFNGLGETUNIFORMUIVPROC>("glGetUniformuiv", load);
		glBindFragDataLocation = gladLoadFunction<PFNGLBINDFRAGDATALOCATIONPROC>("glBindFragDataLocation", load);
		glGetFragDataLocation = gladLoadFunction<PFNGLGETFRAGDATALOCATIONPROC>("glGetFragDataLocation", load);
		glUniform1ui = gladLoadFunction<PFNGLUNIFORM1UIPROC>("glUniform1ui", load);
		glUniform2ui = gladLoadFunction<PFNGLUNIFORM2UIPROC>("glUniform2ui", load);
		glUniform3ui = gladLoadFunction<PFNGLUNIFORM3UIPROC>("glUniform3ui", load);
		glUniform4ui = gladLoadFunction<PFNGLUNIFORM4UIPROC>("glUniform4ui", load);
		glUniform1uiv = gladLoadFunction<PFNGLUNIFORM1UIVPROC>("glUniform1uiv", load);
		glUniform2uiv = gladLoadFunction<PFNGLUNIFORM2UIVPROC>("glUniform2uiv", load);
		glUniform3uiv = gladLoadFunction<PFNGLUNIFORM3UIVPROC>("glUniform3uiv", load);
		glUniform4uiv = gladLoadFunction<PFNGLUNIFORM4UIVPROC>("glUniform4uiv", load);
		glTexParameterIiv = gladLoadFunction<PFNGLTEXPARAMETERIIVPROC>("glTexParameterIiv", load);
		glTexParameterIuiv = gladLoadFunction<PFNGLTEXPARAMETERIUIVPROC>("glTexParameterIuiv", load);
		glGetTexParameterIiv = gladLoadFunction<PFNGLGETTEXPARAMETERIIVPROC>("glGetTexParameterIiv", load);
		glGetTexParameterIuiv = gladLoadFunction<PFNGLGETTEXPARAMETERIUIVPROC>("glGetTexParameterIuiv", load);
		glClearBufferiv = gladLoadFunction<PFNGLCLEARBUFFERIVPROC>("glClearBufferiv", load);
		glClearBufferuiv = gladLoadFunction<PFNGLCLEARBUFFERUIVPROC>("glClearBufferuiv", load);
		glClearBufferfv = gladLoadFunction<PFNGLCLEARBUFFERFVPROC>("glClearBufferfv", load);
		glClearBufferfi = gladLoadFunction<PFNGLCLEARBUFFERFIPROC>("glClearBufferfi", load);
		glGetStringi = gladLoadFunction<PFNGLGETSTRINGIPROC>("glGetStringi", load);
		glIsRenderbuffer = gladLoadFunction<PFNGLISRENDERBUFFERPROC>("glIsRenderbuffer", load);
		glBindRenderbuffer = gladLoadFunction<PFNGLBINDRENDERBUFFERPROC>("glBindRenderbuffer", load);
		glDeleteRenderbuffers = gladLoadFunction<PFNGLDELETERENDERBUFFERSPROC>("glDeleteRenderbuffers", load);
		glGenRenderbuffers = gladLoadFunction<PFNGLGENRENDERBUFFERSPROC>("glGenRenderbuffers", load);
		glRenderbufferStorage = gladLoadFunction<PFNGLRENDERBUFFERSTORAGEPROC>("glRenderbufferStorage", load);
		glGetRenderbufferParameteriv = gladLoadFunction<PFNGLGETRENDERBUFFERPARAMETERIVPROC>("glGetRenderbufferParameteriv", load);
		glIsFramebuffer = gladLoadFunction<PFNGLISFRAMEBUFFERPROC>("glIsFramebuffer", load);
		glBindFramebuffer = gladLoadFunction<PFNGLBINDFRAMEBUFFERPROC>("glBindFramebuffer", load);
		glDeleteFramebuffers = gladLoadFunction<PFNGLDELETEFRAMEBUFFERSPROC>("glDeleteFramebuffers", load);
		glGenFramebuffers = gladLoadFunction<PFNGLGENFRAMEBUFFERSPROC>("glGenFramebuffers", load);
		glCheckFramebufferStatus = gladLoadFunction<PFNGLCHECKFRAMEBUFFERSTATUSPROC>("glCheckFramebufferStatus", load);
		glFramebufferTexture1D = gladLoadFunction<PFNGLFRAMEBUFFERTEXTURE1DPROC>("glFramebufferTexture1D", load);
		glFramebufferTexture2D = gladLoadFunction<PFNGLFRAMEBUFFERTEXTURE2DPROC>("glFramebufferTexture2D", load);
		glFramebufferTexture3D = gladLoadFunction<PFNGLFRAMEBUFFERTEXTURE3DPROC>("glFramebufferTexture3D", load);
		glFramebufferRenderbuffer = gladLoadFunction<PFNGLFRAMEBUFFERRENDERBUFFERPROC>("glFramebufferRenderbuffer", load);
		glGetFramebufferAttachmentParameteriv = gladLoadFunction<PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC>("glGetFramebufferAttachmentParameteriv", load);
		glGenerateMipmap = gladLoadFunction<PFNGLGENERATEMIPMAPPROC>("glGenerateMipmap", load);
		glBlitFramebuffer = gladLoadFunction<PFNGLBLITFRAMEBUFFERPROC>("glBlitFramebuffer", load);
		glRenderbufferStorageMultisample = gladLoadFunction<PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC>("glRenderbufferStorageMultisample", load);
		glFramebufferTextureLayer = gladLoadFunction<PFNGLFRAMEBUFFERTEXTURELAYERPROC>("glFramebufferTextureLayer", load);
		glMapBufferRange = gladLoadFunction<PFNGLMAPBUFFERRANGEPROC>("glMapBufferRange", load);
		glFlushMappedBufferRange = gladLoadFunction<PFNGLFLUSHMAPPEDBUFFERRANGEPROC>("glFlushMappedBufferRange", load);
		glBindVertexArray = gladLoadFunction<PFNGLBINDVERTEXARRAYPROC>("glBindVertexArray", load);
		glDeleteVertexArrays = gladLoadFunction<PFNGLDELETEVERTEXARRAYSPROC>("glDeleteVertexArrays", load);
		glGenVertexArrays = gladLoadFunction<PFNGLGENVERTEXARRAYSPROC>("glGenVertexArrays", load);
		glIsVertexArray = gladLoadFunction<PFNGLISVERTEXARRAYPROC>("glIsVertexArray", load);

		GLAD_2_1::load_GL_RECURSIVE(load);
	}
}