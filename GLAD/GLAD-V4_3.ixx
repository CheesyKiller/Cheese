export module GLAD:V4_3;

export import :V4_2;

export using PFNGLCLEARBUFFERDATAPROC = void(*)(GLenum target, GLenum internalformat, GLenum format, GLenum type, const void* data);
export using PFNGLCLEARBUFFERSUBDATAPROC = void(*)(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void* data);
export using PFNGLDISPATCHCOMPUTEPROC = void(*)(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z);
export using PFNGLDISPATCHCOMPUTEINDIRECTPROC = void(*)(GLintptr indirect);
export using PFNGLCOPYIMAGESUBDATAPROC = void(*)(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);
export using PFNGLFRAMEBUFFERPARAMETERIPROC = void(*)(GLenum target, GLenum pname, GLint param);
export using PFNGLGETFRAMEBUFFERPARAMETERIVPROC = void(*)(GLenum target, GLenum pname, GLint* params);
export using PFNGLGETINTERNALFORMATI64VPROC = void(*)(GLenum target, GLenum internalformat, GLenum pname, GLsizei count, GLint64* params);
export using PFNGLINVALIDATETEXSUBIMAGEPROC = void(*)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth);
export using PFNGLINVALIDATETEXIMAGEPROC = void(*)(GLuint texture, GLint level);
export using PFNGLINVALIDATEBUFFERSUBDATAPROC = void(*)(GLuint buffer, GLintptr offset, GLsizeiptr length);
export using PFNGLINVALIDATEBUFFERDATAPROC = void(*)(GLuint buffer);
export using PFNGLINVALIDATEFRAMEBUFFERPROC = void(*)(GLenum target, GLsizei numAttachments, const GLenum* attachments);
export using PFNGLINVALIDATESUBFRAMEBUFFERPROC = void(*)(GLenum target, GLsizei numAttachments, const GLenum* attachments, GLint x, GLint y, GLsizei width, GLsizei height);
export using PFNGLMULTIDRAWARRAYSINDIRECTPROC = void(*)(GLenum mode, const void* indirect, GLsizei drawcount, GLsizei stride);
export using PFNGLMULTIDRAWELEMENTSINDIRECTPROC = void(*)(GLenum mode, GLenum type, const void* indirect, GLsizei drawcount, GLsizei stride);
export using PFNGLGETPROGRAMINTERFACEIVPROC = void(*)(GLuint program, GLenum programInterface, GLenum pname, GLint* params);
export using PFNGLGETPROGRAMRESOURCEINDEXPROC = GLuint(*)(GLuint program, GLenum programInterface, const GLchar* name);
export using PFNGLGETPROGRAMRESOURCENAMEPROC = void(*)(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei* length, GLchar* name);
export using PFNGLGETPROGRAMRESOURCEIVPROC = void(*)(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum* props, GLsizei count, GLsizei* length, GLint* params);
export using PFNGLGETPROGRAMRESOURCELOCATIONPROC = GLint(*)(GLuint program, GLenum programInterface, const GLchar* name);
export using PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC = GLint(*)(GLuint program, GLenum programInterface, const GLchar* name);
export using PFNGLSHADERSTORAGEBLOCKBINDINGPROC = void(*)(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding);
export using PFNGLTEXBUFFERRANGEPROC = void(*)(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
export using PFNGLTEXSTORAGE2DMULTISAMPLEPROC = void(*)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
export using PFNGLTEXSTORAGE3DMULTISAMPLEPROC = void(*)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
export using PFNGLTEXTUREVIEWPROC = void(*)(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers);
export using PFNGLBINDVERTEXBUFFERPROC = void(*)(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
export using PFNGLVERTEXATTRIBFORMATPROC = void(*)(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
export using PFNGLVERTEXATTRIBIFORMATPROC = void(*)(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
export using PFNGLVERTEXATTRIBLFORMATPROC = void(*)(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
export using PFNGLVERTEXATTRIBBINDINGPROC = void(*)(GLuint attribindex, GLuint bindingindex);
export using PFNGLVERTEXBINDINGDIVISORPROC = void(*)(GLuint bindingindex, GLuint divisor);
export using PFNGLDEBUGMESSAGECONTROLPROC = void(*)(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint* ids, GLboolean enabled);
export using PFNGLDEBUGMESSAGEINSERTPROC = void(*)(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar* buf);
export using PFNGLDEBUGMESSAGECALLBACKPROC = void(*)(GLDEBUGPROC callback, const void* userParam);
export using PFNGLGETDEBUGMESSAGELOGPROC = GLuint(*)(GLuint count, GLsizei bufSize, GLenum* sources, GLenum* types, GLuint* ids, GLenum* severities, GLsizei* lengths, GLchar* messageLog);
export using PFNGLPUSHDEBUGGROUPPROC = void(*)(GLenum source, GLuint id, GLsizei length, const GLchar* message);
export using PFNGLPOPDEBUGGROUPPROC = void(*)(void);
export using PFNGLOBJECTLABELPROC = void(*)(GLenum identifier, GLuint name, GLsizei length, const GLchar* label);
export using PFNGLGETOBJECTLABELPROC = void(*)(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei* length, GLchar* label);
export using PFNGLOBJECTPTRLABELPROC = void(*)(const void* ptr, GLsizei length, const GLchar* label);
export using PFNGLGETOBJECTPTRLABELPROC = void(*)(const void* ptr, GLsizei bufSize, GLsizei* length, GLchar* label);
export using PFNGLGETPOINTERVPROC = void(*)(GLenum pname, void** params);

// Export the function pointers
export PFNGLCLEARBUFFERDATAPROC glClearBufferData = nullptr;
export PFNGLCLEARBUFFERSUBDATAPROC glClearBufferSubData = nullptr;
export PFNGLDISPATCHCOMPUTEPROC glDispatchCompute = nullptr;
export PFNGLDISPATCHCOMPUTEINDIRECTPROC glDispatchComputeIndirect = nullptr;
export PFNGLCOPYIMAGESUBDATAPROC glCopyImageSubData = nullptr;
export PFNGLFRAMEBUFFERPARAMETERIPROC glFramebufferParameteri = nullptr;
export PFNGLGETFRAMEBUFFERPARAMETERIVPROC glGetFramebufferParameteriv = nullptr;
export PFNGLGETINTERNALFORMATI64VPROC glGetInternalformati64v = nullptr;
export PFNGLINVALIDATETEXSUBIMAGEPROC glInvalidateTexSubImage = nullptr;
export PFNGLINVALIDATETEXIMAGEPROC glInvalidateTexImage = nullptr;
export PFNGLINVALIDATEBUFFERSUBDATAPROC glInvalidateBufferSubData = nullptr;
export PFNGLINVALIDATEBUFFERDATAPROC glInvalidateBufferData = nullptr;
export PFNGLINVALIDATEFRAMEBUFFERPROC glInvalidateFramebuffer = nullptr;
export PFNGLINVALIDATESUBFRAMEBUFFERPROC glInvalidateSubFramebuffer = nullptr;
export PFNGLMULTIDRAWARRAYSINDIRECTPROC glMultiDrawArraysIndirect = nullptr;
export PFNGLMULTIDRAWELEMENTSINDIRECTPROC glMultiDrawElementsIndirect = nullptr;
export PFNGLGETPROGRAMINTERFACEIVPROC glGetProgramInterfaceiv = nullptr;
export PFNGLGETPROGRAMRESOURCEINDEXPROC glGetProgramResourceIndex = nullptr;
export PFNGLGETPROGRAMRESOURCENAMEPROC glGetProgramResourceName = nullptr;
export PFNGLGETPROGRAMRESOURCEIVPROC glGetProgramResourceiv = nullptr;
export PFNGLGETPROGRAMRESOURCELOCATIONPROC glGetProgramResourceLocation = nullptr;
export PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC glGetProgramResourceLocationIndex = nullptr;
export PFNGLSHADERSTORAGEBLOCKBINDINGPROC glShaderStorageBlockBinding = nullptr;
export PFNGLTEXBUFFERRANGEPROC glTexBufferRange = nullptr;
export PFNGLTEXSTORAGE2DMULTISAMPLEPROC glTexStorage2DMultisample = nullptr;
export PFNGLTEXSTORAGE3DMULTISAMPLEPROC glTexStorage3DMultisample = nullptr;
export PFNGLTEXTUREVIEWPROC glTextureView = nullptr;
export PFNGLBINDVERTEXBUFFERPROC glBindVertexBuffer = nullptr;
export PFNGLVERTEXATTRIBFORMATPROC glVertexAttribFormat = nullptr;
export PFNGLVERTEXATTRIBIFORMATPROC glVertexAttribIFormat = nullptr;
export PFNGLVERTEXATTRIBLFORMATPROC glVertexAttribLFormat = nullptr;
export PFNGLVERTEXATTRIBBINDINGPROC glVertexAttribBinding = nullptr;
export PFNGLVERTEXBINDINGDIVISORPROC glVertexBindingDivisor = nullptr;
export PFNGLDEBUGMESSAGECONTROLPROC glDebugMessageControl = nullptr;
export PFNGLDEBUGMESSAGEINSERTPROC glDebugMessageInsert = nullptr;
export PFNGLDEBUGMESSAGECALLBACKPROC glDebugMessageCallback = nullptr;
export PFNGLGETDEBUGMESSAGELOGPROC glGetDebugMessageLog = nullptr;
export PFNGLPUSHDEBUGGROUPPROC glPushDebugGroup = nullptr;
export PFNGLPOPDEBUGGROUPPROC glPopDebugGroup = nullptr;
export PFNGLOBJECTLABELPROC glObjectLabel = nullptr;
export PFNGLGETOBJECTLABELPROC glGetObjectLabel = nullptr;
export PFNGLOBJECTPTRLABELPROC glObjectPtrLabel = nullptr;
export PFNGLGETOBJECTPTRLABELPROC glGetObjectPtrLabel = nullptr;
export PFNGLGETPOINTERVPROC glGetPointerv = nullptr;

export namespace GLAD_4_3 {
	void load_GL_RECURSIVE(GLADloadproc load) {
		glClearBufferData = gladLoadFunction<PFNGLCLEARBUFFERDATAPROC>("glClearBufferData", load);
		glClearBufferSubData = gladLoadFunction<PFNGLCLEARBUFFERSUBDATAPROC>("glClearBufferSubData", load);
		glDispatchCompute = gladLoadFunction<PFNGLDISPATCHCOMPUTEPROC>("glDispatchCompute", load);
		glDispatchComputeIndirect = gladLoadFunction<PFNGLDISPATCHCOMPUTEINDIRECTPROC>("glDispatchComputeIndirect", load);
		glCopyImageSubData = gladLoadFunction<PFNGLCOPYIMAGESUBDATAPROC>("glCopyImageSubData", load);
		glFramebufferParameteri = gladLoadFunction<PFNGLFRAMEBUFFERPARAMETERIPROC>("glFramebufferParameteri", load);
		glGetFramebufferParameteriv = gladLoadFunction<PFNGLGETFRAMEBUFFERPARAMETERIVPROC>("glGetFramebufferParameteriv", load);
		glGetInternalformati64v = gladLoadFunction<PFNGLGETINTERNALFORMATI64VPROC>("glGetInternalformati64v", load);
		glInvalidateTexSubImage = gladLoadFunction<PFNGLINVALIDATETEXSUBIMAGEPROC>("glInvalidateTexSubImage", load);
		glInvalidateTexImage = gladLoadFunction<PFNGLINVALIDATETEXIMAGEPROC>("glInvalidateTexImage", load);
		glInvalidateBufferSubData = gladLoadFunction<PFNGLINVALIDATEBUFFERSUBDATAPROC>("glInvalidateBufferSubData", load);
		glInvalidateBufferData = gladLoadFunction<PFNGLINVALIDATEBUFFERDATAPROC>("glInvalidateBufferData", load);
		glInvalidateFramebuffer = gladLoadFunction<PFNGLINVALIDATEFRAMEBUFFERPROC>("glInvalidateFramebuffer", load);
		glInvalidateSubFramebuffer = gladLoadFunction<PFNGLINVALIDATESUBFRAMEBUFFERPROC>("glInvalidateSubFramebuffer", load);
		glMultiDrawArraysIndirect = gladLoadFunction<PFNGLMULTIDRAWARRAYSINDIRECTPROC>("glMultiDrawArraysIndirect", load);
		glMultiDrawElementsIndirect = gladLoadFunction<PFNGLMULTIDRAWELEMENTSINDIRECTPROC>("glMultiDrawElementsIndirect", load);
		glGetProgramInterfaceiv = gladLoadFunction<PFNGLGETPROGRAMINTERFACEIVPROC>("glGetProgramInterfaceiv", load);
		glGetProgramResourceIndex = gladLoadFunction<PFNGLGETPROGRAMRESOURCEINDEXPROC>("glGetProgramResourceIndex", load);
		glGetProgramResourceName = gladLoadFunction<PFNGLGETPROGRAMRESOURCENAMEPROC>("glGetProgramResourceName", load);
		glGetProgramResourceiv = gladLoadFunction<PFNGLGETPROGRAMRESOURCEIVPROC>("glGetProgramResourceiv", load);
		glGetProgramResourceLocation = gladLoadFunction<PFNGLGETPROGRAMRESOURCELOCATIONPROC>("glGetProgramResourceLocation", load);
		glGetProgramResourceLocationIndex = gladLoadFunction<PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC>("glGetProgramResourceLocationIndex", load);
		glShaderStorageBlockBinding = gladLoadFunction<PFNGLSHADERSTORAGEBLOCKBINDINGPROC>("glShaderStorageBlockBinding", load);
		glTexBufferRange = gladLoadFunction<PFNGLTEXBUFFERRANGEPROC>("glTexBufferRange", load);
		glTexStorage2DMultisample = gladLoadFunction<PFNGLTEXSTORAGE2DMULTISAMPLEPROC>("glTexStorage2DMultisample", load);
		glTexStorage3DMultisample = gladLoadFunction<PFNGLTEXSTORAGE3DMULTISAMPLEPROC>("glTexStorage3DMultisample", load);
		glTextureView = gladLoadFunction<PFNGLTEXTUREVIEWPROC>("glTextureView", load);
		glBindVertexBuffer = gladLoadFunction<PFNGLBINDVERTEXBUFFERPROC>("glBindVertexBuffer", load);
		glVertexAttribFormat = gladLoadFunction<PFNGLVERTEXATTRIBFORMATPROC>("glVertexAttribFormat", load);
		glVertexAttribIFormat = gladLoadFunction<PFNGLVERTEXATTRIBIFORMATPROC>("glVertexAttribIFormat", load);
		glVertexAttribLFormat = gladLoadFunction<PFNGLVERTEXATTRIBLFORMATPROC>("glVertexAttribLFormat", load);
		glVertexAttribBinding = gladLoadFunction<PFNGLVERTEXATTRIBBINDINGPROC>("glVertexAttribBinding", load);
		glVertexBindingDivisor = gladLoadFunction<PFNGLVERTEXBINDINGDIVISORPROC>("glVertexBindingDivisor", load);
		glDebugMessageControl = gladLoadFunction<PFNGLDEBUGMESSAGECONTROLPROC>("glDebugMessageControl", load);
		glDebugMessageInsert = gladLoadFunction<PFNGLDEBUGMESSAGEINSERTPROC>("glDebugMessageInsert", load);
		glDebugMessageCallback = gladLoadFunction<PFNGLDEBUGMESSAGECALLBACKPROC>("glDebugMessageCallback", load);
		glGetDebugMessageLog = gladLoadFunction<PFNGLGETDEBUGMESSAGELOGPROC>("glGetDebugMessageLog", load);
		glPushDebugGroup = gladLoadFunction<PFNGLPUSHDEBUGGROUPPROC>("glPushDebugGroup", load);
		glPopDebugGroup = gladLoadFunction<PFNGLPOPDEBUGGROUPPROC>("glPopDebugGroup", load);
		glObjectLabel = gladLoadFunction<PFNGLOBJECTLABELPROC>("glObjectLabel", load);
		glGetObjectLabel = gladLoadFunction<PFNGLGETOBJECTLABELPROC>("glGetObjectLabel", load);
		glObjectPtrLabel = gladLoadFunction<PFNGLOBJECTPTRLABELPROC>("glObjectPtrLabel", load);
		glGetObjectPtrLabel = gladLoadFunction<PFNGLGETOBJECTPTRLABELPROC>("glGetObjectPtrLabel", load);
		glGetPointerv = gladLoadFunction<PFNGLGETPOINTERVPROC>("glGetPointerv", load);

		GLAD_4_2::load_GL_RECURSIVE(load);
	}
}