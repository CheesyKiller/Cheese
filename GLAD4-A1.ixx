export module GLAD4:A1;

import GLADTypes;

export namespace GLAD {
	// Alias for function pointer types
	using PFNGLRELEASESHADERCOMPILERPROC = void(*)();
	using PFNGLSHADERBINARYPROC = void(*)(GLsizei count, const GLuint* shaders, GLenum binaryFormat, const void* binary, GLsizei length);
	using PFNGLGETSHADERPRECISIONFORMATPROC = void(*)(GLenum shadertype, GLenum precisiontype, GLint* range, GLint* precision);
	using PFNGLDEPTHRANGEFPROC = void(*)(GLfloat n, GLfloat f);
	using PFNGLCLEARDEPTHFPROC = void(*)(GLfloat d);
	using PFNGLGETPROGRAMBINARYPROC = void(*)(GLuint program, GLsizei bufSize, GLsizei* length, GLenum* binaryFormat, void* binary);
	using PFNGLPROGRAMBINARYPROC = void(*)(GLuint program, GLenum binaryFormat, const void* binary, GLsizei length);
	using PFNGLPROGRAMPARAMETERIPROC = void(*)(GLuint program, GLenum pname, GLint value);
	using PFNGLUSEPROGRAMSTAGESPROC = void(*)(GLuint pipeline, GLbitfield stages, GLuint program);
	using PFNGLACTIVESHADERPROGRAMPROC = void(*)(GLuint pipeline, GLuint program);
	using PFNGLCREATESHADERPROGRAMVPROC = GLuint(*)(GLenum type, GLsizei count, const GLchar* const* strings);
	using PFNGLBINDPROGRAMPIPELINEPROC = void(*)(GLuint pipeline);
	using PFNGLDELETEPROGRAMPIPELINESPROC = void(*)(GLsizei n, const GLuint* pipelines);
	using PFNGLGENPROGRAMPIPELINESPROC = void(*)(GLsizei n, GLuint* pipelines);
	using PFNGLISPROGRAMPIPELINEPROC = GLboolean(*)(GLuint pipeline);
	using PFNGLGETPROGRAMPIPELINEIVPROC = void(*)(GLuint pipeline, GLenum pname, GLint* params);
	using PFNGLPROGRAMUNIFORM1IPROC = void(*)(GLuint program, GLint location, GLint v0);
	using PFNGLPROGRAMUNIFORM1IVPROC = void(*)(GLuint program, GLint location, GLsizei count, const GLint* value);
	using PFNGLPROGRAMUNIFORM1FPROC = void(*)(GLuint program, GLint location, GLfloat v0);
	using PFNGLPROGRAMUNIFORM1FVPROC = void(*)(GLuint program, GLint location, GLsizei count, const GLfloat* value);
	using PFNGLPROGRAMUNIFORM1DPROC = void(*)(GLuint program, GLint location, GLdouble v0);
	using PFNGLPROGRAMUNIFORM1DVPROC = void(*)(GLuint program, GLint location, GLsizei count, const GLdouble* value);
	using PFNGLPROGRAMUNIFORM1UIPROC = void(*)(GLuint program, GLint location, GLuint v0);
	using PFNGLPROGRAMUNIFORM1UIVPROC = void(*)(GLuint program, GLint location, GLsizei count, const GLuint* value);
	using PFNGLPROGRAMUNIFORM2IPROC = void(*)(GLuint program, GLint location, GLint v0, GLint v1);
	using PFNGLPROGRAMUNIFORM2IVPROC = void(*)(GLuint program, GLint location, GLsizei count, const GLint* value);
	using PFNGLPROGRAMUNIFORM2FPROC = void(*)(GLuint program, GLint location, GLfloat v0, GLfloat v1);
	using PFNGLPROGRAMUNIFORM2FVPROC = void(*)(GLuint program, GLint location, GLsizei count, const GLfloat* value);
	using PFNGLPROGRAMUNIFORM2DPROC = void(*)(GLuint program, GLint location, GLdouble v0, GLdouble v1);
	using PFNGLPROGRAMUNIFORM2DVPROC = void(*)(GLuint program, GLint location, GLsizei count, const GLdouble* value);
	using PFNGLPROGRAMUNIFORM2UIPROC = void(*)(GLuint program, GLint location, GLuint v0, GLuint v1);
	using PFNGLPROGRAMUNIFORM2UIVPROC = void(*)(GLuint program, GLint location, GLsizei count, const GLuint* value);
	using PFNGLPROGRAMUNIFORM3IPROC = void(*)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
	using PFNGLPROGRAMUNIFORM3IVPROC = void(*)(GLuint program, GLint location, GLsizei count, const GLint* value);
	using PFNGLPROGRAMUNIFORM3FPROC = void(*)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
	using PFNGLPROGRAMUNIFORM3FVPROC = void(*)(GLuint program, GLint location, GLsizei count, const GLfloat* value);
	using PFNGLPROGRAMUNIFORM3DPROC = void(*)(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2);
	using PFNGLPROGRAMUNIFORM3DVPROC = void(*)(GLuint program, GLint location, GLsizei count, const GLdouble* value);
	using PFNGLPROGRAMUNIFORM3UIPROC = void(*)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
	using PFNGLPROGRAMUNIFORM3UIVPROC = void(*)(GLuint program, GLint location, GLsizei count, const GLuint* value);
	using PFNGLPROGRAMUNIFORM4IPROC = void(*)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
	using PFNGLPROGRAMUNIFORM4IVPROC = void(*)(GLuint program, GLint location, GLsizei count, const GLint* value);
	using PFNGLPROGRAMUNIFORM4FPROC = void(*)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
	using PFNGLPROGRAMUNIFORM4FVPROC = void(*)(GLuint program, GLint location, GLsizei count, const GLfloat* value);
	using PFNGLPROGRAMUNIFORM4DPROC = void(*)(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3);
	using PFNGLPROGRAMUNIFORM4DVPROC = void(*)(GLuint program, GLint location, GLsizei count, const GLdouble* value);
	using PFNGLPROGRAMUNIFORM4UIPROC = void(*)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
	using PFNGLPROGRAMUNIFORM4UIVPROC = void(*)(GLuint program, GLint location, GLsizei count, const GLuint* value);
	using PFNGLPROGRAMUNIFORMMATRIX2FVPROC = void(*)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
	using PFNGLPROGRAMUNIFORMMATRIX3FVPROC = void(*)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
	using PFNGLPROGRAMUNIFORMMATRIX4FVPROC = void(*)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
	using PFNGLPROGRAMUNIFORMMATRIX2DVPROC = void(*)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
	using PFNGLPROGRAMUNIFORMMATRIX3DVPROC = void(*)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
	using PFNGLPROGRAMUNIFORMMATRIX4DVPROC = void(*)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
	using PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC = void(*)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
	using PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC = void(*)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
	using PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC = void(*)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
	using PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC = void(*)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
	using PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC = void(*)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
	using PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC = void(*)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
	using PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC = void(*)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
	using PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC = void(*)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
	using PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC = void(*)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
	using PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC = void(*)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
	using PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC = void(*)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
	using PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC = void(*)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
	using PFNGLVALIDATEPROGRAMPIPELINEPROC = void(*)(GLuint pipeline);
	using PFNGLGETPROGRAMPIPELINEINFOLOGPROC = void(*)(GLuint pipeline, GLsizei bufSize, GLsizei* length, GLchar* infoLog);
	using PFNGLVERTEXATTRIBL1DPROC = void(*)(GLuint index, GLdouble x);
	using PFNGLVERTEXATTRIBL2DPROC = void(*)(GLuint index, GLdouble x, GLdouble y);
	using PFNGLVERTEXATTRIBL3DPROC = void(*)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
	using PFNGLVERTEXATTRIBL4DPROC = void(*)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
	using PFNGLVERTEXATTRIBL1DVPROC = void(*)(GLuint index, const GLdouble* v);
	using PFNGLVERTEXATTRIBL2DVPROC = void(*)(GLuint index, const GLdouble* v);
	using PFNGLVERTEXATTRIBL3DVPROC = void(*)(GLuint index, const GLdouble* v);
	using PFNGLVERTEXATTRIBL4DVPROC = void(*)(GLuint index, const GLdouble* v);
	using PFNGLVERTEXATTRIBLPOINTERPROC = void(*)(GLuint index, GLint size, GLenum type, GLsizei stride, const void* pointer);
	using PFNGLGETVERTEXATTRIBLDVPROC = void(*)(GLuint index, GLenum pname, GLdouble* params);
	using PFNGLVIEWPORTARRAYVPROC = void(*)(GLuint first, GLsizei count, const GLfloat* v);
	using PFNGLVIEWPORTINDEXEDFPROC = void(*)(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h);
	using PFNGLVIEWPORTINDEXEDFVPROC = void(*)(GLuint index, const GLfloat* v);
	using PFNGLSCISSORARRAYVPROC = void(*)(GLuint first, GLsizei count, const GLint* v);
	using PFNGLSCISSORINDEXEDPROC = void(*)(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height);
	using PFNGLSCISSORINDEXEDVPROC = void(*)(GLuint index, const GLint* v);
	using PFNGLDEPTHRANGEARRAYVPROC = void(*)(GLuint first, GLsizei count, const GLdouble* v);
	using PFNGLDEPTHRANGEINDEXEDPROC = void(*)(GLuint index, GLdouble n, GLdouble f);
	using PFNGLGETFLOATI_VPROC = void(*)(GLenum target, GLuint index, GLfloat* data);
	using PFNGLGETDOUBLEI_VPROC = void(*)(GLenum target, GLuint index, GLdouble* data);
}