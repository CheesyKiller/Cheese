export module GLAD:V4_3;

export import :V4_2;

export namespace GLAD {
	using PFNGLCLEARBUFFERDATAPROC = void(*)(GLenum target, GLenum internalformat, GLenum format, GLenum type, const void* data);
	using PFNGLCLEARBUFFERSUBDATAPROC = void(*)(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void* data);
	using PFNGLDISPATCHCOMPUTEPROC = void(*)(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z);
	using PFNGLDISPATCHCOMPUTEINDIRECTPROC = void(*)(GLintptr indirect);
	using PFNGLCOPYIMAGESUBDATAPROC = void(*)(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);
	using PFNGLFRAMEBUFFERPARAMETERIPROC = void(*)(GLenum target, GLenum pname, GLint param);
	using PFNGLGETFRAMEBUFFERPARAMETERIVPROC = void(*)(GLenum target, GLenum pname, GLint* params);
	using PFNGLGETINTERNALFORMATI64VPROC = void(*)(GLenum target, GLenum internalformat, GLenum pname, GLsizei count, GLint64* params);
	using PFNGLINVALIDATETEXSUBIMAGEPROC = void(*)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth);
	using PFNGLINVALIDATETEXIMAGEPROC = void(*)(GLuint texture, GLint level);
	using PFNGLINVALIDATEBUFFERSUBDATAPROC = void(*)(GLuint buffer, GLintptr offset, GLsizeiptr length);
	using PFNGLINVALIDATEBUFFERDATAPROC = void(*)(GLuint buffer);
	using PFNGLINVALIDATEFRAMEBUFFERPROC = void(*)(GLenum target, GLsizei numAttachments, const GLenum* attachments);
	using PFNGLINVALIDATESUBFRAMEBUFFERPROC = void(*)(GLenum target, GLsizei numAttachments, const GLenum* attachments, GLint x, GLint y, GLsizei width, GLsizei height);
	using PFNGLMULTIDRAWARRAYSINDIRECTPROC = void(*)(GLenum mode, const void* indirect, GLsizei drawcount, GLsizei stride);
	using PFNGLMULTIDRAWELEMENTSINDIRECTPROC = void(*)(GLenum mode, GLenum type, const void* indirect, GLsizei drawcount, GLsizei stride);
	using PFNGLGETPROGRAMINTERFACEIVPROC = void(*)(GLuint program, GLenum programInterface, GLenum pname, GLint* params);
	using PFNGLGETPROGRAMRESOURCEINDEXPROC = GLuint(*)(GLuint program, GLenum programInterface, const GLchar* name);
	using PFNGLGETPROGRAMRESOURCENAMEPROC = void(*)(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei* length, GLchar* name);
	using PFNGLGETPROGRAMRESOURCEIVPROC = void(*)(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum* props, GLsizei count, GLsizei* length, GLint* params);
	using PFNGLGETPROGRAMRESOURCELOCATIONPROC = GLint(*)(GLuint program, GLenum programInterface, const GLchar* name);
	using PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC = GLint(*)(GLuint program, GLenum programInterface, const GLchar* name);
	using PFNGLSHADERSTORAGEBLOCKBINDINGPROC = void(*)(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding);
	using PFNGLTEXBUFFERRANGEPROC = void(*)(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
	using PFNGLTEXSTORAGE2DMULTISAMPLEPROC = void(*)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
	using PFNGLTEXSTORAGE3DMULTISAMPLEPROC = void(*)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
	using PFNGLTEXTUREVIEWPROC = void(*)(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers);
	using PFNGLBINDVERTEXBUFFERPROC = void(*)(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
	using PFNGLVERTEXATTRIBFORMATPROC = void(*)(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
	using PFNGLVERTEXATTRIBIFORMATPROC = void(*)(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
	using PFNGLVERTEXATTRIBLFORMATPROC = void(*)(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
	using PFNGLVERTEXATTRIBBINDINGPROC = void(*)(GLuint attribindex, GLuint bindingindex);
	using PFNGLVERTEXBINDINGDIVISORPROC = void(*)(GLuint bindingindex, GLuint divisor);
	using PFNGLDEBUGMESSAGECONTROLPROC = void(*)(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint* ids, GLboolean enabled);
	using PFNGLDEBUGMESSAGEINSERTPROC = void(*)(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar* buf);
	using PFNGLDEBUGMESSAGECALLBACKPROC = void(*)(GLDEBUGPROC callback, const void* userParam);
	using PFNGLGETDEBUGMESSAGELOGPROC = GLuint(*)(GLuint count, GLsizei bufSize, GLenum* sources, GLenum* types, GLuint* ids, GLenum* severities, GLsizei* lengths, GLchar* messageLog);
	using PFNGLPUSHDEBUGGROUPPROC = void(*)(GLenum source, GLuint id, GLsizei length, const GLchar* message);
	using PFNGLPOPDEBUGGROUPPROC = void(*)(void);
	using PFNGLOBJECTLABELPROC = void(*)(GLenum identifier, GLuint name, GLsizei length, const GLchar* label);
	using PFNGLGETOBJECTLABELPROC = void(*)(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei* length, GLchar* label);
	using PFNGLOBJECTPTRLABELPROC = void(*)(const void* ptr, GLsizei length, const GLchar* label);
	using PFNGLGETOBJECTPTRLABELPROC = void(*)(const void* ptr, GLsizei bufSize, GLsizei* length, GLchar* label);
	using PFNGLGETPOINTERVPROC = void(*)(GLenum pname, void** params);

	// Export the function pointers
	PFNGLCLEARBUFFERDATAPROC glClearBufferData = nullptr;
	PFNGLCLEARBUFFERSUBDATAPROC glClearBufferSubData = nullptr;
	PFNGLDISPATCHCOMPUTEPROC glDispatchCompute = nullptr;
	PFNGLDISPATCHCOMPUTEINDIRECTPROC glDispatchComputeIndirect = nullptr;
	PFNGLCOPYIMAGESUBDATAPROC glCopyImageSubData = nullptr;
	PFNGLFRAMEBUFFERPARAMETERIPROC glFramebufferParameteri = nullptr;
	PFNGLGETFRAMEBUFFERPARAMETERIVPROC glGetFramebufferParameteriv = nullptr;
	PFNGLGETINTERNALFORMATI64VPROC glGetInternalformati64v = nullptr;
	PFNGLINVALIDATETEXSUBIMAGEPROC glInvalidateTexSubImage = nullptr;
	PFNGLINVALIDATETEXIMAGEPROC glInvalidateTexImage = nullptr;
	PFNGLINVALIDATEBUFFERSUBDATAPROC glInvalidateBufferSubData = nullptr;
	PFNGLINVALIDATEBUFFERDATAPROC glInvalidateBufferData = nullptr;
	PFNGLINVALIDATEFRAMEBUFFERPROC glInvalidateFramebuffer = nullptr;
	PFNGLINVALIDATESUBFRAMEBUFFERPROC glInvalidateSubFramebuffer = nullptr;
	PFNGLMULTIDRAWARRAYSINDIRECTPROC glMultiDrawArraysIndirect = nullptr;
	PFNGLMULTIDRAWELEMENTSINDIRECTPROC glMultiDrawElementsIndirect = nullptr;
	PFNGLGETPROGRAMINTERFACEIVPROC glGetProgramInterfaceiv = nullptr;
	PFNGLGETPROGRAMRESOURCEINDEXPROC glGetProgramResourceIndex = nullptr;
	PFNGLGETPROGRAMRESOURCENAMEPROC glGetProgramResourceName = nullptr;
	PFNGLGETPROGRAMRESOURCEIVPROC glGetProgramResourceiv = nullptr;
	PFNGLGETPROGRAMRESOURCELOCATIONPROC glGetProgramResourceLocation = nullptr;
	PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC glGetProgramResourceLocationIndex = nullptr;
	PFNGLSHADERSTORAGEBLOCKBINDINGPROC glShaderStorageBlockBinding = nullptr;
	PFNGLTEXBUFFERRANGEPROC glTexBufferRange = nullptr;
	PFNGLTEXSTORAGE2DMULTISAMPLEPROC glTexStorage2DMultisample = nullptr;
	PFNGLTEXSTORAGE3DMULTISAMPLEPROC glTexStorage3DMultisample = nullptr;
	PFNGLTEXTUREVIEWPROC glTextureView = nullptr;
	PFNGLBINDVERTEXBUFFERPROC glBindVertexBuffer = nullptr;
	PFNGLVERTEXATTRIBFORMATPROC glVertexAttribFormat = nullptr;
	PFNGLVERTEXATTRIBIFORMATPROC glVertexAttribIFormat = nullptr;
	PFNGLVERTEXATTRIBLFORMATPROC glVertexAttribLFormat = nullptr;
	PFNGLVERTEXATTRIBBINDINGPROC glVertexAttribBinding = nullptr;
	PFNGLVERTEXBINDINGDIVISORPROC glVertexBindingDivisor = nullptr;
	PFNGLDEBUGMESSAGECONTROLPROC glDebugMessageControl = nullptr;
	PFNGLDEBUGMESSAGEINSERTPROC glDebugMessageInsert = nullptr;
	PFNGLDEBUGMESSAGECALLBACKPROC glDebugMessageCallback = nullptr;
	PFNGLGETDEBUGMESSAGELOGPROC glGetDebugMessageLog = nullptr;
	PFNGLPUSHDEBUGGROUPPROC glPushDebugGroup = nullptr;
	PFNGLPOPDEBUGGROUPPROC glPopDebugGroup = nullptr;
	PFNGLOBJECTLABELPROC glObjectLabel = nullptr;
	PFNGLGETOBJECTLABELPROC glGetObjectLabel = nullptr;
	PFNGLOBJECTPTRLABELPROC glObjectPtrLabel = nullptr;
	PFNGLGETOBJECTPTRLABELPROC glGetObjectPtrLabel = nullptr;
	PFNGLGETPOINTERVPROC glGetPointerv = nullptr;

	namespace GLAD_4_3 {
		void load_GL_RECURSIVE(GLADloadproc load) {
			glClearBufferData = GLAD::gladLoadFunction<PFNGLCLEARBUFFERDATAPROC>("glClearBufferData", load);
			glClearBufferSubData = GLAD::gladLoadFunction<PFNGLCLEARBUFFERSUBDATAPROC>("glClearBufferSubData", load);
			glDispatchCompute = GLAD::gladLoadFunction<PFNGLDISPATCHCOMPUTEPROC>("glDispatchCompute", load);
			glDispatchComputeIndirect = GLAD::gladLoadFunction<PFNGLDISPATCHCOMPUTEINDIRECTPROC>("glDispatchComputeIndirect", load);
			glCopyImageSubData = GLAD::gladLoadFunction<PFNGLCOPYIMAGESUBDATAPROC>("glCopyImageSubData", load);
			glFramebufferParameteri = GLAD::gladLoadFunction<PFNGLFRAMEBUFFERPARAMETERIPROC>("glFramebufferParameteri", load);
			glGetFramebufferParameteriv = GLAD::gladLoadFunction<PFNGLGETFRAMEBUFFERPARAMETERIVPROC>("glGetFramebufferParameteriv", load);
			glGetInternalformati64v = GLAD::gladLoadFunction<PFNGLGETINTERNALFORMATI64VPROC>("glGetInternalformati64v", load);
			glInvalidateTexSubImage = GLAD::gladLoadFunction<PFNGLINVALIDATETEXSUBIMAGEPROC>("glInvalidateTexSubImage", load);
			glInvalidateTexImage = GLAD::gladLoadFunction<PFNGLINVALIDATETEXIMAGEPROC>("glInvalidateTexImage", load);
			glInvalidateBufferSubData = GLAD::gladLoadFunction<PFNGLINVALIDATEBUFFERSUBDATAPROC>("glInvalidateBufferSubData", load);
			glInvalidateBufferData = GLAD::gladLoadFunction<PFNGLINVALIDATEBUFFERDATAPROC>("glInvalidateBufferData", load);
			glInvalidateFramebuffer = GLAD::gladLoadFunction<PFNGLINVALIDATEFRAMEBUFFERPROC>("glInvalidateFramebuffer", load);
			glInvalidateSubFramebuffer = GLAD::gladLoadFunction<PFNGLINVALIDATESUBFRAMEBUFFERPROC>("glInvalidateSubFramebuffer", load);
			glMultiDrawArraysIndirect = GLAD::gladLoadFunction<PFNGLMULTIDRAWARRAYSINDIRECTPROC>("glMultiDrawArraysIndirect", load);
			glMultiDrawElementsIndirect = GLAD::gladLoadFunction<PFNGLMULTIDRAWELEMENTSINDIRECTPROC>("glMultiDrawElementsIndirect", load);
			glGetProgramInterfaceiv = GLAD::gladLoadFunction<PFNGLGETPROGRAMINTERFACEIVPROC>("glGetProgramInterfaceiv", load);
			glGetProgramResourceIndex = GLAD::gladLoadFunction<PFNGLGETPROGRAMRESOURCEINDEXPROC>("glGetProgramResourceIndex", load);
			glGetProgramResourceName = GLAD::gladLoadFunction<PFNGLGETPROGRAMRESOURCENAMEPROC>("glGetProgramResourceName", load);
			glGetProgramResourceiv = GLAD::gladLoadFunction<PFNGLGETPROGRAMRESOURCEIVPROC>("glGetProgramResourceiv", load);
			glGetProgramResourceLocation = GLAD::gladLoadFunction<PFNGLGETPROGRAMRESOURCELOCATIONPROC>("glGetProgramResourceLocation", load);
			glGetProgramResourceLocationIndex = GLAD::gladLoadFunction<PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC>("glGetProgramResourceLocationIndex", load);
			glShaderStorageBlockBinding = GLAD::gladLoadFunction<PFNGLSHADERSTORAGEBLOCKBINDINGPROC>("glShaderStorageBlockBinding", load);
			glTexBufferRange = GLAD::gladLoadFunction<PFNGLTEXBUFFERRANGEPROC>("glTexBufferRange", load);
			glTexStorage2DMultisample = GLAD::gladLoadFunction<PFNGLTEXSTORAGE2DMULTISAMPLEPROC>("glTexStorage2DMultisample", load);
			glTexStorage3DMultisample = GLAD::gladLoadFunction<PFNGLTEXSTORAGE3DMULTISAMPLEPROC>("glTexStorage3DMultisample", load);
			glTextureView = GLAD::gladLoadFunction<PFNGLTEXTUREVIEWPROC>("glTextureView", load);
			glBindVertexBuffer = GLAD::gladLoadFunction<PFNGLBINDVERTEXBUFFERPROC>("glBindVertexBuffer", load);
			glVertexAttribFormat = GLAD::gladLoadFunction<PFNGLVERTEXATTRIBFORMATPROC>("glVertexAttribFormat", load);
			glVertexAttribIFormat = GLAD::gladLoadFunction<PFNGLVERTEXATTRIBIFORMATPROC>("glVertexAttribIFormat", load);
			glVertexAttribLFormat = GLAD::gladLoadFunction<PFNGLVERTEXATTRIBLFORMATPROC>("glVertexAttribLFormat", load);
			glVertexAttribBinding = GLAD::gladLoadFunction<PFNGLVERTEXATTRIBBINDINGPROC>("glVertexAttribBinding", load);
			glVertexBindingDivisor = GLAD::gladLoadFunction<PFNGLVERTEXBINDINGDIVISORPROC>("glVertexBindingDivisor", load);
			glDebugMessageControl = GLAD::gladLoadFunction<PFNGLDEBUGMESSAGECONTROLPROC>("glDebugMessageControl", load);
			glDebugMessageInsert = GLAD::gladLoadFunction<PFNGLDEBUGMESSAGEINSERTPROC>("glDebugMessageInsert", load);
			glDebugMessageCallback = GLAD::gladLoadFunction<PFNGLDEBUGMESSAGECALLBACKPROC>("glDebugMessageCallback", load);
			glGetDebugMessageLog = GLAD::gladLoadFunction<PFNGLGETDEBUGMESSAGELOGPROC>("glGetDebugMessageLog", load);
			glPushDebugGroup = GLAD::gladLoadFunction<PFNGLPUSHDEBUGGROUPPROC>("glPushDebugGroup", load);
			glPopDebugGroup = GLAD::gladLoadFunction<PFNGLPOPDEBUGGROUPPROC>("glPopDebugGroup", load);
			glObjectLabel = GLAD::gladLoadFunction<PFNGLOBJECTLABELPROC>("glObjectLabel", load);
			glGetObjectLabel = GLAD::gladLoadFunction<PFNGLGETOBJECTLABELPROC>("glGetObjectLabel", load);
			glObjectPtrLabel = GLAD::gladLoadFunction<PFNGLOBJECTPTRLABELPROC>("glObjectPtrLabel", load);
			glGetObjectPtrLabel = GLAD::gladLoadFunction<PFNGLGETOBJECTPTRLABELPROC>("glGetObjectPtrLabel", load);
			glGetPointerv = GLAD::gladLoadFunction<PFNGLGETPOINTERVPROC>("glGetPointerv", load);

			GLAD::GLAD_4_2::load_GL_RECURSIVE(load);
		}
	}
}