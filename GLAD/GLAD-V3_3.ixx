export module GLAD:V3_3;

export import :V3_2;

export namespace GLAD {
	// Alias for function pointer types
	using PFNGLBINDFRAGDATALOCATIONINDEXEDPROC = void(*)(GLuint program, GLuint colorNumber, GLuint index, const GLchar* name);
	using PFNGLGETFRAGDATAINDEXPROC = GLint(*)(GLuint program, const GLchar* name);
	using PFNGLGENSAMPLERSPROC = void(*)(GLsizei count, GLuint* samplers);
	using PFNGLDELETESAMPLERSPROC = void(*)(GLsizei count, const GLuint* samplers);
	using PFNGLISSAMPLERPROC = GLboolean(*)(GLuint sampler);
	using PFNGLBINDSAMPLERPROC = void(*)(GLuint unit, GLuint sampler);
	using PFNGLSAMPLERPARAMETERIPROC = void(*)(GLuint sampler, GLenum pname, GLint param);
	using PFNGLSAMPLERPARAMETERIVPROC = void(*)(GLuint sampler, GLenum pname, const GLint* param);
	using PFNGLSAMPLERPARAMETERFPROC = void(*)(GLuint sampler, GLenum pname, GLfloat param);
	using PFNGLSAMPLERPARAMETERFVPROC = void(*)(GLuint sampler, GLenum pname, const GLfloat* param);
	using PFNGLSAMPLERPARAMETERIIVPROC = void(*)(GLuint sampler, GLenum pname, const GLint* param);
	using PFNGLSAMPLERPARAMETERIUIVPROC = void(*)(GLuint sampler, GLenum pname, const GLuint* param);
	using PFNGLGETSAMPLERPARAMETERIVPROC = void(*)(GLuint sampler, GLenum pname, GLint* params);
	using PFNGLGETSAMPLERPARAMETERIIVPROC = void(*)(GLuint sampler, GLenum pname, GLint* params);
	using PFNGLGETSAMPLERPARAMETERFVPROC = void(*)(GLuint sampler, GLenum pname, GLfloat* params);
	using PFNGLGETSAMPLERPARAMETERIUIVPROC = void(*)(GLuint sampler, GLenum pname, GLuint* params);
	using PFNGLQUERYCOUNTERPROC = void(*)(GLuint id, GLenum target);
	using PFNGLGETQUERYOBJECTI64VPROC = void(*)(GLuint id, GLenum pname, GLint64* params);
	using PFNGLGETQUERYOBJECTUI64VPROC = void(*)(GLuint id, GLenum pname, GLuint64* params);
	using PFNGLVERTEXATTRIBDIVISORPROC = void(*)(GLuint index, GLuint divisor);
	using PFNGLVERTEXATTRIBP1UIPROC = void(*)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
	using PFNGLVERTEXATTRIBP1UIVPROC = void(*)(GLuint index, GLenum type, GLboolean normalized, const GLuint* value);
	using PFNGLVERTEXATTRIBP2UIPROC = void(*)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
	using PFNGLVERTEXATTRIBP2UIVPROC = void(*)(GLuint index, GLenum type, GLboolean normalized, const GLuint* value);
	using PFNGLVERTEXATTRIBP3UIPROC = void(*)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
	using PFNGLVERTEXATTRIBP3UIVPROC = void(*)(GLuint index, GLenum type, GLboolean normalized, const GLuint* value);
	using PFNGLVERTEXATTRIBP4UIPROC = void(*)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
	using PFNGLVERTEXATTRIBP4UIVPROC = void(*)(GLuint index, GLenum type, GLboolean normalized, const GLuint* value);
	using PFNGLVERTEXP2UIPROC = void(*)(GLenum type, GLuint value);
	using PFNGLVERTEXP2UIVPROC = void(*)(GLenum type, const GLuint* value);
	using PFNGLVERTEXP3UIPROC = void(*)(GLenum type, GLuint value);
	using PFNGLVERTEXP3UIVPROC = void(*)(GLenum type, const GLuint* value);
	using PFNGLVERTEXP4UIPROC = void(*)(GLenum type, GLuint value);
	using PFNGLVERTEXP4UIVPROC = void(*)(GLenum type, const GLuint* value);
	using PFNGLTEXCOORDP1UIPROC = void(*)(GLenum type, GLuint coords);
	using PFNGLTEXCOORDP1UIVPROC = void(*)(GLenum type, const GLuint* coords);
	using PFNGLTEXCOORDP2UIPROC = void(*)(GLenum type, GLuint coords);
	using PFNGLTEXCOORDP2UIVPROC = void(*)(GLenum type, const GLuint* coords);
	using PFNGLTEXCOORDP3UIPROC = void(*)(GLenum type, GLuint coords);
	using PFNGLTEXCOORDP3UIVPROC = void(*)(GLenum type, const GLuint* coords);
	using PFNGLTEXCOORDP4UIPROC = void(*)(GLenum type, GLuint coords);
	using PFNGLTEXCOORDP4UIVPROC = void(*)(GLenum type, const GLuint* coords);
	using PFNGLMULTITEXCOORDP1UIPROC = void(*)(GLenum texture, GLenum type, GLuint coords);
	using PFNGLMULTITEXCOORDP1UIVPROC = void(*)(GLenum texture, GLenum type, const GLuint* coords);
	using PFNGLMULTITEXCOORDP2UIPROC = void(*)(GLenum texture, GLenum type, GLuint coords);
	using PFNGLMULTITEXCOORDP2UIVPROC = void(*)(GLenum texture, GLenum type, const GLuint* coords);
	using PFNGLMULTITEXCOORDP3UIPROC = void(*)(GLenum texture, GLenum type, GLuint coords);
	using PFNGLMULTITEXCOORDP3UIVPROC = void(*)(GLenum texture, GLenum type, const GLuint* coords);
	using PFNGLMULTITEXCOORDP4UIPROC = void(*)(GLenum texture, GLenum type, GLuint coords);
	using PFNGLMULTITEXCOORDP4UIVPROC = void(*)(GLenum texture, GLenum type, const GLuint* coords);
	using PFNGLNORMALP3UIPROC = void(*)(GLenum type, GLuint coords);
	using PFNGLNORMALP3UIVPROC = void(*)(GLenum type, const GLuint* coords);
	using PFNGLCOLORP3UIPROC = void(*)(GLenum type, GLuint color);
	using PFNGLCOLORP3UIVPROC = void(*)(GLenum type, const GLuint* color);
	using PFNGLCOLORP4UIPROC = void(*)(GLenum type, GLuint color);
	using PFNGLCOLORP4UIVPROC = void(*)(GLenum type, const GLuint* color);
	using PFNGLSECONDARYCOLORP3UIPROC = void(*)(GLenum type, GLuint color);
	using PFNGLSECONDARYCOLORP3UIVPROC = void(*)(GLenum type, const GLuint* color);

	// Declare function pointers as variables
	PFNGLBINDFRAGDATALOCATIONINDEXEDPROC glBindFragDataLocationIndexed = nullptr;
	PFNGLGETFRAGDATAINDEXPROC glGetFragDataIndex = nullptr;
	PFNGLGENSAMPLERSPROC glGenSamplers = nullptr;
	PFNGLDELETESAMPLERSPROC glDeleteSamplers = nullptr;
	PFNGLISSAMPLERPROC glIsSampler = nullptr;
	PFNGLBINDSAMPLERPROC glBindSampler = nullptr;
	PFNGLSAMPLERPARAMETERIPROC glSamplerParameteri = nullptr;
	PFNGLSAMPLERPARAMETERIVPROC glSamplerParameteriv = nullptr;
	PFNGLSAMPLERPARAMETERFPROC glSamplerParameterf = nullptr;
	PFNGLSAMPLERPARAMETERFVPROC glSamplerParameterfv = nullptr;
	PFNGLSAMPLERPARAMETERIIVPROC glSamplerParameterIiv = nullptr;
	PFNGLSAMPLERPARAMETERIUIVPROC glSamplerParameterIuiv = nullptr;
	PFNGLGETSAMPLERPARAMETERIVPROC glGetSamplerParameteriv = nullptr;
	PFNGLGETSAMPLERPARAMETERIIVPROC glGetSamplerParameterIiv = nullptr;
	PFNGLGETSAMPLERPARAMETERFVPROC glGetSamplerParameterfv = nullptr;
	PFNGLGETSAMPLERPARAMETERIUIVPROC glGetSamplerParameterIuiv = nullptr;
	PFNGLQUERYCOUNTERPROC glQueryCounter = nullptr;
	PFNGLGETQUERYOBJECTI64VPROC glGetQueryObjecti64v = nullptr;
	PFNGLGETQUERYOBJECTUI64VPROC glGetQueryObjectui64v = nullptr;
	PFNGLVERTEXATTRIBDIVISORPROC glVertexAttribDivisor = nullptr;
	PFNGLVERTEXATTRIBP1UIPROC glVertexAttribP1ui = nullptr;
	PFNGLVERTEXATTRIBP1UIVPROC glVertexAttribP1uiv = nullptr;
	PFNGLVERTEXATTRIBP2UIPROC glVertexAttribP2ui = nullptr;
	PFNGLVERTEXATTRIBP2UIVPROC glVertexAttribP2uiv = nullptr;
	PFNGLVERTEXATTRIBP3UIPROC glVertexAttribP3ui = nullptr;
	PFNGLVERTEXATTRIBP3UIVPROC glVertexAttribP3uiv = nullptr;
	PFNGLVERTEXATTRIBP4UIPROC glVertexAttribP4ui = nullptr;
	PFNGLVERTEXATTRIBP4UIVPROC glVertexAttribP4uiv = nullptr;
	PFNGLVERTEXP2UIPROC glVertexP2ui = nullptr;
	PFNGLVERTEXP2UIVPROC glVertexP2uiv = nullptr;
	PFNGLVERTEXP3UIPROC glVertexP3ui = nullptr;
	PFNGLVERTEXP3UIVPROC glVertexP3uiv = nullptr;
	PFNGLVERTEXP4UIPROC glVertexP4ui = nullptr;
	PFNGLVERTEXP4UIVPROC glVertexP4uiv = nullptr;
	PFNGLTEXCOORDP1UIPROC glTexCoordP1ui = nullptr;
	PFNGLTEXCOORDP1UIVPROC glTexCoordP1uiv = nullptr;
	PFNGLTEXCOORDP2UIPROC glTexCoordP2ui = nullptr;
	PFNGLTEXCOORDP2UIVPROC glTexCoordP2uiv = nullptr;
	PFNGLTEXCOORDP3UIPROC glTexCoordP3ui = nullptr;
	PFNGLTEXCOORDP3UIVPROC glTexCoordP3uiv = nullptr;
	PFNGLTEXCOORDP4UIPROC glTexCoordP4ui = nullptr;
	PFNGLTEXCOORDP4UIVPROC glTexCoordP4uiv = nullptr;
	PFNGLMULTITEXCOORDP1UIPROC glMultiTexCoordP1ui = nullptr;
	PFNGLMULTITEXCOORDP1UIVPROC glMultiTexCoordP1uiv = nullptr;
	PFNGLMULTITEXCOORDP2UIPROC glMultiTexCoordP2ui = nullptr;
	PFNGLMULTITEXCOORDP2UIVPROC glMultiTexCoordP2uiv = nullptr;
	PFNGLMULTITEXCOORDP3UIPROC glMultiTexCoordP3ui = nullptr;
	PFNGLMULTITEXCOORDP3UIVPROC glMultiTexCoordP3uiv = nullptr;
	PFNGLMULTITEXCOORDP4UIPROC glMultiTexCoordP4ui = nullptr;
	PFNGLMULTITEXCOORDP4UIVPROC glMultiTexCoordP4uiv = nullptr;
	PFNGLNORMALP3UIPROC glNormalP3ui = nullptr;
	PFNGLNORMALP3UIVPROC glNormalP3uiv = nullptr;
	PFNGLCOLORP3UIPROC glColorP3ui = nullptr;
	PFNGLCOLORP3UIVPROC glColorP3uiv = nullptr;
	PFNGLCOLORP4UIPROC glColorP4ui = nullptr;
	PFNGLCOLORP4UIVPROC glColorP4uiv = nullptr;
	PFNGLSECONDARYCOLORP3UIPROC glSecondaryColorP3ui = nullptr;
	PFNGLSECONDARYCOLORP3UIVPROC glSecondaryColorP3uiv = nullptr;

	namespace GLAD_3_3 {
		void load_GL_RECURSIVE(GLADloadproc load) {
			glBindFragDataLocationIndexed = GLAD::gladLoadFunction<PFNGLBINDFRAGDATALOCATIONINDEXEDPROC>("glBindFragDataLocationIndexed", load);
			glGetFragDataIndex = GLAD::gladLoadFunction<PFNGLGETFRAGDATAINDEXPROC>("glGetFragDataIndex", load);
			glGenSamplers = GLAD::gladLoadFunction<PFNGLGENSAMPLERSPROC>("glGenSamplers", load);
			glDeleteSamplers = GLAD::gladLoadFunction<PFNGLDELETESAMPLERSPROC>("glDeleteSamplers", load);
			glIsSampler = GLAD::gladLoadFunction<PFNGLISSAMPLERPROC>("glIsSampler", load);
			glBindSampler = GLAD::gladLoadFunction<PFNGLBINDSAMPLERPROC>("glBindSampler", load);
			glSamplerParameteri = GLAD::gladLoadFunction<PFNGLSAMPLERPARAMETERIPROC>("glSamplerParameteri", load);
			glSamplerParameteriv = GLAD::gladLoadFunction<PFNGLSAMPLERPARAMETERIVPROC>("glSamplerParameteriv", load);
			glSamplerParameterf = GLAD::gladLoadFunction<PFNGLSAMPLERPARAMETERFPROC>("glSamplerParameterf", load);
			glSamplerParameterfv = GLAD::gladLoadFunction<PFNGLSAMPLERPARAMETERFVPROC>("glSamplerParameterfv", load);
			glSamplerParameterIiv = GLAD::gladLoadFunction<PFNGLSAMPLERPARAMETERIIVPROC>("glSamplerParameterIiv", load);
			glSamplerParameterIuiv = GLAD::gladLoadFunction<PFNGLSAMPLERPARAMETERIUIVPROC>("glSamplerParameterIuiv", load);
			glGetSamplerParameteriv = GLAD::gladLoadFunction<PFNGLGETSAMPLERPARAMETERIVPROC>("glGetSamplerParameteriv", load);
			glGetSamplerParameterIiv = GLAD::gladLoadFunction<PFNGLGETSAMPLERPARAMETERIIVPROC>("glGetSamplerParameterIiv", load);
			glGetSamplerParameterfv = GLAD::gladLoadFunction<PFNGLGETSAMPLERPARAMETERFVPROC>("glGetSamplerParameterfv", load);
			glGetSamplerParameterIuiv = GLAD::gladLoadFunction<PFNGLGETSAMPLERPARAMETERIUIVPROC>("glGetSamplerParameterIuiv", load);
			glQueryCounter = GLAD::gladLoadFunction<PFNGLQUERYCOUNTERPROC>("glQueryCounter", load);
			glGetQueryObjecti64v = GLAD::gladLoadFunction<PFNGLGETQUERYOBJECTI64VPROC>("glGetQueryObjecti64v", load);
			glGetQueryObjectui64v = GLAD::gladLoadFunction<PFNGLGETQUERYOBJECTUI64VPROC>("glGetQueryObjectui64v", load);
			glVertexAttribDivisor = GLAD::gladLoadFunction<PFNGLVERTEXATTRIBDIVISORPROC>("glVertexAttribDivisor", load);
			glVertexAttribP1ui = GLAD::gladLoadFunction<PFNGLVERTEXATTRIBP1UIPROC>("glVertexAttribP1ui", load);
			glVertexAttribP1uiv = GLAD::gladLoadFunction<PFNGLVERTEXATTRIBP1UIVPROC>("glVertexAttribP1uiv", load);
			glVertexAttribP2ui = GLAD::gladLoadFunction<PFNGLVERTEXATTRIBP2UIPROC>("glVertexAttribP2ui", load);
			glVertexAttribP2uiv = GLAD::gladLoadFunction<PFNGLVERTEXATTRIBP2UIVPROC>("glVertexAttribP2uiv", load);
			glVertexAttribP3ui = GLAD::gladLoadFunction<PFNGLVERTEXATTRIBP3UIPROC>("glVertexAttribP3ui", load);
			glVertexAttribP3uiv = GLAD::gladLoadFunction<PFNGLVERTEXATTRIBP3UIVPROC>("glVertexAttribP3uiv", load);
			glVertexAttribP4ui = GLAD::gladLoadFunction<PFNGLVERTEXATTRIBP4UIPROC>("glVertexAttribP4ui", load);
			glVertexAttribP4uiv = GLAD::gladLoadFunction<PFNGLVERTEXATTRIBP4UIVPROC>("glVertexAttribP4uiv", load);
			glVertexP2ui = GLAD::gladLoadFunction<PFNGLVERTEXP2UIPROC>("glVertexP2ui", load);
			glVertexP2uiv = GLAD::gladLoadFunction<PFNGLVERTEXP2UIVPROC>("glVertexP2uiv", load);
			glVertexP3ui = GLAD::gladLoadFunction<PFNGLVERTEXP3UIPROC>("glVertexP3ui", load);
			glVertexP3uiv = GLAD::gladLoadFunction<PFNGLVERTEXP3UIVPROC>("glVertexP3uiv", load);
			glVertexP4ui = GLAD::gladLoadFunction<PFNGLVERTEXP4UIPROC>("glVertexP4ui", load);
			glVertexP4uiv = GLAD::gladLoadFunction<PFNGLVERTEXP4UIVPROC>("glVertexP4uiv", load);
			glTexCoordP1ui = GLAD::gladLoadFunction<PFNGLTEXCOORDP1UIPROC>("glTexCoordP1ui", load);
			glTexCoordP1uiv = GLAD::gladLoadFunction<PFNGLTEXCOORDP1UIVPROC>("glTexCoordP1uiv", load);
			glTexCoordP2ui = GLAD::gladLoadFunction<PFNGLTEXCOORDP2UIPROC>("glTexCoordP2ui", load);
			glTexCoordP2uiv = GLAD::gladLoadFunction<PFNGLTEXCOORDP2UIVPROC>("glTexCoordP2uiv", load);
			glTexCoordP3ui = GLAD::gladLoadFunction<PFNGLTEXCOORDP3UIPROC>("glTexCoordP3ui", load);
			glTexCoordP3uiv = GLAD::gladLoadFunction<PFNGLTEXCOORDP3UIVPROC>("glTexCoordP3uiv", load);
			glTexCoordP4ui = GLAD::gladLoadFunction<PFNGLTEXCOORDP4UIPROC>("glTexCoordP4ui", load);
			glTexCoordP4uiv = GLAD::gladLoadFunction<PFNGLTEXCOORDP4UIVPROC>("glTexCoordP4uiv", load);
			glMultiTexCoordP1ui = GLAD::gladLoadFunction<PFNGLMULTITEXCOORDP1UIPROC>("glMultiTexCoordP1ui", load);
			glMultiTexCoordP1uiv = GLAD::gladLoadFunction<PFNGLMULTITEXCOORDP1UIVPROC>("glMultiTexCoordP1uiv", load);
			glMultiTexCoordP2ui = GLAD::gladLoadFunction<PFNGLMULTITEXCOORDP2UIPROC>("glMultiTexCoordP2ui", load);
			glMultiTexCoordP2uiv = GLAD::gladLoadFunction<PFNGLMULTITEXCOORDP2UIVPROC>("glMultiTexCoordP2uiv", load);
			glMultiTexCoordP3ui = GLAD::gladLoadFunction<PFNGLMULTITEXCOORDP3UIPROC>("glMultiTexCoordP3ui", load);
			glMultiTexCoordP3uiv = GLAD::gladLoadFunction<PFNGLMULTITEXCOORDP3UIVPROC>("glMultiTexCoordP3uiv", load);
			glMultiTexCoordP4ui = GLAD::gladLoadFunction<PFNGLMULTITEXCOORDP4UIPROC>("glMultiTexCoordP4ui", load);
			glMultiTexCoordP4uiv = GLAD::gladLoadFunction<PFNGLMULTITEXCOORDP4UIVPROC>("glMultiTexCoordP4uiv", load);
			glNormalP3ui = GLAD::gladLoadFunction<PFNGLNORMALP3UIPROC>("glNormalP3ui", load);
			glNormalP3uiv = GLAD::gladLoadFunction<PFNGLNORMALP3UIVPROC>("glNormalP3uiv", load);
			glColorP3ui = GLAD::gladLoadFunction<PFNGLCOLORP3UIPROC>("glColorP3ui", load);
			glColorP3uiv = GLAD::gladLoadFunction<PFNGLCOLORP3UIVPROC>("glColorP3uiv", load);
			glColorP4ui = GLAD::gladLoadFunction<PFNGLCOLORP4UIPROC>("glColorP4ui", load);
			glColorP4uiv = GLAD::gladLoadFunction<PFNGLCOLORP4UIVPROC>("glColorP4uiv", load);
			glSecondaryColorP3ui = GLAD::gladLoadFunction<PFNGLSECONDARYCOLORP3UIPROC>("glSecondaryColorP3ui", load);
			glSecondaryColorP3uiv = GLAD::gladLoadFunction<PFNGLSECONDARYCOLORP3UIVPROC>("glSecondaryColorP3uiv", load);

			GLAD::GLAD_3_2::load_GL_RECURSIVE(load);
		}
	}
}