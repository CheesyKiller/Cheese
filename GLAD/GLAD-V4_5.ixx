export module GLAD:V4_5;

export import :V4_4;

export namespace GLAD {
	using PFNGLCLIPCONTROLPROC = void (*)(GLenum origin, GLenum depth);
	using PFNGLCREATETRANSFORMFEEDBACKSPROC = void (*)(GLsizei n, GLuint* ids);
	using PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC = void (*)(GLuint xfb, GLuint index, GLuint buffer);
	using PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC = void (*)(GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
	using PFNGLGETTRANSFORMFEEDBACKIVPROC = void (*)(GLuint xfb, GLenum pname, GLint* param);
	using PFNGLGETTRANSFORMFEEDBACKI_VPROC = void (*)(GLuint xfb, GLenum pname, GLuint index, GLint* param);
	using PFNGLGETTRANSFORMFEEDBACKI64_VPROC = void (*)(GLuint xfb, GLenum pname, GLuint index, GLint64* param);
	using PFNGLCREATEBUFFERSPROC = void (*)(GLsizei n, GLuint* buffers);
	using PFNGLNAMEDBUFFERSTORAGEPROC = void (*)(GLuint buffer, GLsizeiptr size, const void* data, GLbitfield flags);
	using PFNGLNAMEDBUFFERDATAPROC = void (*)(GLuint buffer, GLsizeiptr size, const void* data, GLenum usage);
	using PFNGLNAMEDBUFFERSUBDATAPROC = void (*)(GLuint buffer, GLintptr offset, GLsizeiptr size, const void* data);
	using PFNGLCOPYNAMEDBUFFERSUBDATAPROC = void (*)(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
	using PFNGLCLEARNAMEDBUFFERDATAPROC = void (*)(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void* data);
	using PFNGLCLEARNAMEDBUFFERSUBDATAPROC = void (*)(GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void* data);
	using PFNGLMAPNAMEDBUFFERPROC = void* (*)(GLuint buffer, GLenum access);
	using PFNGLMAPNAMEDBUFFERRANGEPROC = void* (*)(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access);
	using PFNGLUNMAPNAMEDBUFFERPROC = GLboolean(*)(GLuint buffer);
	using PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC = void (*)(GLuint buffer, GLintptr offset, GLsizeiptr length);
	using PFNGLGETNAMEDBUFFERPARAMETERIVPROC = void (*)(GLuint buffer, GLenum pname, GLint* params);
	using PFNGLGETNAMEDBUFFERPARAMETERI64VPROC = void (*)(GLuint buffer, GLenum pname, GLint64* params);
	using PFNGLGETNAMEDBUFFERPOINTERVPROC = void (*)(GLuint buffer, GLenum pname, void** params);
	using PFNGLGETNAMEDBUFFERSUBDATAPROC = void (*)(GLuint buffer, GLintptr offset, GLsizeiptr size, void* data);
	using PFNGLCREATEFRAMEBUFFERSPROC = void (*)(GLsizei n, GLuint* framebuffers);
	using PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC = void (*)(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
	using PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC = void (*)(GLuint framebuffer, GLenum pname, GLint param);
	using PFNGLNAMEDFRAMEBUFFERTEXTUREPROC = void (*)(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level);
	using PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC = void (*)(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer);
	using PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC = void (*)(GLuint framebuffer, GLenum buf);
	using PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC = void (*)(GLuint framebuffer, GLsizei n, const GLenum* bufs);
	using PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC = void (*)(GLuint framebuffer, GLenum src);
	using PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC = void (*)(GLuint framebuffer, GLsizei numAttachments, const GLenum* attachments);
	using PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC = void (*)(GLuint framebuffer, GLsizei numAttachments, const GLenum* attachments, GLint x, GLint y, GLsizei width, GLsizei height);
	using PFNGLCLEARNAMEDFRAMEBUFFERIVPROC = void (*)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint* value);
	using PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC = void (*)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint* value);
	using PFNGLCLEARNAMEDFRAMEBUFFERFVPROC = void (*)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat* value);
	using PFNGLCLEARNAMEDFRAMEBUFFERFIPROC = void (*)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
	using PFNGLBLITNAMEDFRAMEBUFFERPROC = void (*)(GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
	using PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC = GLenum(*)(GLuint framebuffer, GLenum target);
	using PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC = void (*)(GLuint framebuffer, GLenum pname, GLint* param);
	using PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC = void (*)(GLuint framebuffer, GLenum attachment, GLenum pname, GLint* params);
	using PFNGLCREATERENDERBUFFERSPROC = void (*)(GLsizei n, GLuint* renderbuffers);
	using PFNGLNAMEDRENDERBUFFERSTORAGEPROC = void (*)(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height);
	using PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC = void (*)(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
	using PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC = void (*)(GLuint renderbuffer, GLenum pname, GLint* params);
	using PFNGLCREATETEXTURESPROC = void (*)(GLenum target, GLsizei n, GLuint* textures);
	using PFNGLTEXTUREBUFFERPROC = void (*)(GLuint texture, GLenum internalformat, GLuint buffer);
	using PFNGLTEXTUREBUFFERRANGEPROC = void (*)(GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
	using PFNGLTEXTURESTORAGE1DPROC = void (*)(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width);
	using PFNGLTEXTURESTORAGE2DPROC = void (*)(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
	using PFNGLTEXTURESTORAGE3DPROC = void (*)(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
	using PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC = void (*)(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
	using PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC = void (*)(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
	using PFNGLTEXTURESUBIMAGE1DPROC = void (*)(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void* pixels);
	using PFNGLTEXTURESUBIMAGE2DPROC = void (*)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void* pixels);
	using PFNGLTEXTURESUBIMAGE3DPROC = void (*)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void* pixels);
	using PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC = void (*)(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void* data);
	using PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC = void (*)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void* data);
	using PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC = void (*)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void* data);
	using PFNGLCOPYTEXTURESUBIMAGE1DPROC = void (*)(GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
	using PFNGLCOPYTEXTURESUBIMAGE2DPROC = void (*)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
	using PFNGLCOPYTEXTURESUBIMAGE3DPROC = void (*)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
	using PFNGLTEXTUREPARAMETERFPROC = void (*)(GLuint texture, GLenum pname, GLfloat param);
	using PFNGLTEXTUREPARAMETERFVPROC = void (*)(GLuint texture, GLenum pname, const GLfloat* param);
	using PFNGLTEXTUREPARAMETERIPROC = void (*)(GLuint texture, GLenum pname, GLint param);
	using PFNGLTEXTUREPARAMETERIIVPROC = void (*)(GLuint texture, GLenum pname, const GLint* params);
	using PFNGLTEXTUREPARAMETERIUIVPROC = void (*)(GLuint texture, GLenum pname, const GLuint* params);
	using PFNGLTEXTUREPARAMETERIVPROC = void (*)(GLuint texture, GLenum pname, const GLint* param);
	using PFNGLGENERATETEXTUREMIPMAPPROC = void (*)(GLuint texture);
	using PFNGLBINDTEXTUREUNITPROC = void (*)(GLuint unit, GLuint texture);
	using PFNGLGETTEXTUREIMAGEPROC = void (*)(GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void* pixels);
	using PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC = void (*)(GLuint texture, GLint level, GLsizei bufSize, void* pixels);
	using PFNGLGETTEXTURELEVELPARAMETERFVPROC = void (*)(GLuint texture, GLint level, GLenum pname, GLfloat* params);
	using PFNGLGETTEXTURELEVELPARAMETERIVPROC = void (*)(GLuint texture, GLint level, GLenum pname, GLint* params);
	using PFNGLGETTEXTUREPARAMETERFVPROC = void (*)(GLuint texture, GLenum pname, GLfloat* params);
	using PFNGLGETTEXTUREPARAMETERIIVPROC = void (*)(GLuint texture, GLenum pname, GLint* params);
	using PFNGLGETTEXTUREPARAMETERIUIVPROC = void (*)(GLuint texture, GLenum pname, GLuint* params);
	using PFNGLGETTEXTUREPARAMETERIVPROC = void (*)(GLuint texture, GLenum pname, GLint* params);
	using PFNGLCREATEVERTEXARRAYSPROC = void (*)(GLsizei n, GLuint* arrays);
	using PFNGLDISABLEVERTEXARRAYATTRIBPROC = void (*)(GLuint vaobj, GLuint index);
	using PFNGLENABLEVERTEXARRAYATTRIBPROC = void (*)(GLuint vaobj, GLuint index);
	using PFNGLVERTEXARRAYELEMENTBUFFERPROC = void (*)(GLuint vaobj, GLuint buffer);
	using PFNGLVERTEXARRAYVERTEXBUFFERPROC = void (*)(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
	using PFNGLVERTEXARRAYVERTEXBUFFERSPROC = void (*)(GLuint vaobj, GLuint first, GLsizei count, const GLuint* buffers, const GLintptr* offsets, const GLsizei* strides);
	using PFNGLVERTEXARRAYATTRIBBINDINGPROC = void (*)(GLuint vaobj, GLuint attribindex, GLuint bindingindex);
	using PFNGLVERTEXARRAYATTRIBFORMATPROC = void (*)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
	using PFNGLVERTEXARRAYATTRIBIFORMATPROC = void (*)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
	using PFNGLVERTEXARRAYATTRIBLFORMATPROC = void (*)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
	using PFNGLVERTEXARRAYBINDINGDIVISORPROC = void (*)(GLuint vaobj, GLuint bindingindex, GLuint divisor);
	using PFNGLGETVERTEXARRAYIVPROC = void (*)(GLuint vaobj, GLenum pname, GLint* param);
	using PFNGLGETVERTEXARRAYINDEXEDIVPROC = void (*)(GLuint vaobj, GLuint index, GLenum pname, GLint* param);
	using PFNGLGETVERTEXARRAYINDEXED64IVPROC = void (*)(GLuint vaobj, GLuint index, GLenum pname, GLint64* param);
	using PFNGLCREATESAMPLERSPROC = void (*)(GLsizei n, GLuint* samplers);
	using PFNGLCREATEPROGRAMPIPELINESPROC = void (*)(GLsizei n, GLuint* pipelines);
	using PFNGLCREATEQUERIESPROC = void (*)(GLenum target, GLsizei n, GLuint* ids);
	using PFNGLGETQUERYBUFFEROBJECTI64VPROC = void (*)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
	using PFNGLGETQUERYBUFFEROBJECTIVPROC = void (*)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
	using PFNGLGETQUERYBUFFEROBJECTUI64VPROC = void (*)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
	using PFNGLGETQUERYBUFFEROBJECTUIVPROC = void (*)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
	using PFNGLMEMORYBARRIERBYREGIONPROC = void (*)(GLbitfield barriers);
	using PFNGLGETTEXTURESUBIMAGEPROC = void (*)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void* pixels);
	using PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC = void (*)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void* pixels);
	using PFNGLGETGRAPHICSRESETSTATUSPROC = GLenum(*)(void);
	using PFNGLGETNCOMPRESSEDTEXIMAGEPROC = void (*)(GLenum target, GLint lod, GLsizei bufSize, void* pixels);
	using PFNGLGETNTEXIMAGEPROC = void (*)(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void* pixels);
	using PFNGLGETNUNIFORMDVPROC = void (*)(GLuint program, GLint location, GLsizei bufSize, GLdouble* params);
	using PFNGLGETNUNIFORMFVPROC = void (*)(GLuint program, GLint location, GLsizei bufSize, GLfloat* params);
	using PFNGLGETNUNIFORMIVPROC = void (*)(GLuint program, GLint location, GLsizei bufSize, GLint* params);
	using PFNGLGETNUNIFORMUIVPROC = void (*)(GLuint program, GLint location, GLsizei bufSize, GLuint* params);
	using PFNGLREADNPIXELSPROC = void (*)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void* data);
	using PFNGLGETNMAPDVPROC = void (*)(GLenum target, GLenum query, GLsizei bufSize, GLdouble* v);
	using PFNGLGETNMAPFVPROC = void (*)(GLenum target, GLenum query, GLsizei bufSize, GLfloat* v);
	using PFNGLGETNMAPIVPROC = void (*)(GLenum target, GLenum query, GLsizei bufSize, GLint* v);
	using PFNGLGETNPIXELMAPFVPROC = void (*)(GLenum map, GLsizei bufSize, GLfloat* values);
	using PFNGLGETNPIXELMAPUIVPROC = void (*)(GLenum map, GLsizei bufSize, GLuint* values);
	using PFNGLGETNPIXELMAPUSVPROC = void (*)(GLenum map, GLsizei bufSize, GLushort* values);
	using PFNGLGETNPOLYGONSTIPPLEPROC = void (*)(GLsizei bufSize, GLubyte* pattern);
	using PFNGLGETNCOLORTABLEPROC = void (*)(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void* table);
	using PFNGLGETNCONVOLUTIONFILTERPROC = void (*)(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void* image);
	using PFNGLGETNSEPARABLEFILTERPROC = void (*)(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void* row, GLsizei columnBufSize, void* column, void* span);
	using PFNGLGETNHISTOGRAMPROC = void (*)(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void* values);
	using PFNGLGETNMINMAXPROC = void (*)(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void* values);
	using PFNGLTEXTUREBARRIERPROC = void (*)(void);

	// Export the function pointers
	PFNGLCLIPCONTROLPROC glClipControl = nullptr;
	PFNGLCREATETRANSFORMFEEDBACKSPROC glCreateTransformFeedbacks = nullptr;
	PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC glTransformFeedbackBufferBase = nullptr;
	PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC glTransformFeedbackBufferRange = nullptr;
	PFNGLGETTRANSFORMFEEDBACKIVPROC glGetTransformFeedbackiv = nullptr;
	PFNGLGETTRANSFORMFEEDBACKI_VPROC glGetTransformFeedbacki_v = nullptr;
	PFNGLGETTRANSFORMFEEDBACKI64_VPROC glGetTransformFeedbacki64_v = nullptr;
	PFNGLCREATEBUFFERSPROC glCreateBuffers = nullptr;
	PFNGLNAMEDBUFFERSTORAGEPROC glNamedBufferStorage = nullptr;
	PFNGLNAMEDBUFFERDATAPROC glNamedBufferData = nullptr;
	PFNGLNAMEDBUFFERSUBDATAPROC glNamedBufferSubData = nullptr;
	PFNGLCOPYNAMEDBUFFERSUBDATAPROC glCopyNamedBufferSubData = nullptr;
	PFNGLCLEARNAMEDBUFFERDATAPROC glClearNamedBufferData = nullptr;
	PFNGLCLEARNAMEDBUFFERSUBDATAPROC glClearNamedBufferSubData = nullptr;
	PFNGLMAPNAMEDBUFFERPROC glMapNamedBuffer = nullptr;
	PFNGLMAPNAMEDBUFFERRANGEPROC glMapNamedBufferRange = nullptr;
	PFNGLUNMAPNAMEDBUFFERPROC glUnmapNamedBuffer = nullptr;
	PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC glFlushMappedNamedBufferRange = nullptr;
	PFNGLGETNAMEDBUFFERPARAMETERIVPROC glGetNamedBufferParameteriv = nullptr;
	PFNGLGETNAMEDBUFFERPARAMETERI64VPROC glGetNamedBufferParameteri64v = nullptr;
	PFNGLGETNAMEDBUFFERPOINTERVPROC glGetNamedBufferPointerv = nullptr;
	PFNGLGETNAMEDBUFFERSUBDATAPROC glGetNamedBufferSubData = nullptr;
	PFNGLCREATEFRAMEBUFFERSPROC glCreateFramebuffers = nullptr;
	PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC glNamedFramebufferRenderbuffer = nullptr;
	PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC glNamedFramebufferParameteri = nullptr;
	PFNGLNAMEDFRAMEBUFFERTEXTUREPROC glNamedFramebufferTexture = nullptr;
	PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC glNamedFramebufferTextureLayer = nullptr;
	PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC glNamedFramebufferDrawBuffer = nullptr;
	PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC glNamedFramebufferDrawBuffers = nullptr;
	PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC glNamedFramebufferReadBuffer = nullptr;
	PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC glInvalidateNamedFramebufferData = nullptr;
	PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC glInvalidateNamedFramebufferSubData = nullptr;
	PFNGLCLEARNAMEDFRAMEBUFFERIVPROC glClearNamedFramebufferiv = nullptr;
	PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC glClearNamedFramebufferuiv = nullptr;
	PFNGLCLEARNAMEDFRAMEBUFFERFVPROC glClearNamedFramebufferfv = nullptr;
	PFNGLCLEARNAMEDFRAMEBUFFERFIPROC glClearNamedFramebufferfi = nullptr;
	PFNGLBLITNAMEDFRAMEBUFFERPROC glBlitNamedFramebuffer = nullptr;
	PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC glCheckNamedFramebufferStatus = nullptr;
	PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC glGetNamedFramebufferParameteriv = nullptr;
	PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC glGetNamedFramebufferAttachmentParameteriv = nullptr;
	PFNGLCREATERENDERBUFFERSPROC glCreateRenderbuffers = nullptr;
	PFNGLNAMEDRENDERBUFFERSTORAGEPROC glNamedRenderbufferStorage = nullptr;
	PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC glNamedRenderbufferStorageMultisample = nullptr;
	PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC glGetNamedRenderbufferParameteriv = nullptr;
	PFNGLCREATETEXTURESPROC glCreateTextures = nullptr;
	PFNGLTEXTUREBUFFERPROC glTextureBuffer = nullptr;
	PFNGLTEXTUREBUFFERRANGEPROC glTextureBufferRange = nullptr;
	PFNGLTEXTURESTORAGE1DPROC glTextureStorage1D = nullptr;
	PFNGLTEXTURESTORAGE2DPROC glTextureStorage2D = nullptr;
	PFNGLTEXTURESTORAGE3DPROC glTextureStorage3D = nullptr;
	PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC glTextureStorage2DMultisample = nullptr;
	PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC glTextureStorage3DMultisample = nullptr;
	PFNGLTEXTURESUBIMAGE1DPROC glTextureSubImage1D = nullptr;
	PFNGLTEXTURESUBIMAGE2DPROC glTextureSubImage2D = nullptr;
	PFNGLTEXTURESUBIMAGE3DPROC glTextureSubImage3D = nullptr;
	PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC glCompressedTextureSubImage1D = nullptr;
	PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC glCompressedTextureSubImage2D = nullptr;
	PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC glCompressedTextureSubImage3D = nullptr;
	PFNGLCOPYTEXTURESUBIMAGE1DPROC glCopyTextureSubImage1D = nullptr;
	PFNGLCOPYTEXTURESUBIMAGE2DPROC glCopyTextureSubImage2D = nullptr;
	PFNGLCOPYTEXTURESUBIMAGE3DPROC glCopyTextureSubImage3D = nullptr;
	PFNGLTEXTUREPARAMETERFPROC glTextureParameterf = nullptr;
	PFNGLTEXTUREPARAMETERFVPROC glTextureParameterfv = nullptr;
	PFNGLTEXTUREPARAMETERIPROC glTextureParameteri = nullptr;
	PFNGLTEXTUREPARAMETERIIVPROC glTextureParameterIiv = nullptr;
	PFNGLTEXTUREPARAMETERIUIVPROC glTextureParameterIuiv = nullptr;
	PFNGLTEXTUREPARAMETERIVPROC glTextureParameteriv = nullptr;
	PFNGLGENERATETEXTUREMIPMAPPROC glGenerateTextureMipmap = nullptr;
	PFNGLBINDTEXTUREUNITPROC glBindTextureUnit = nullptr;
	PFNGLGETTEXTUREIMAGEPROC glGetTextureImage = nullptr;
	PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC glGetCompressedTextureImage = nullptr;
	PFNGLGETTEXTURELEVELPARAMETERFVPROC glGetTextureLevelParameterfv = nullptr;
	PFNGLGETTEXTURELEVELPARAMETERIVPROC glGetTextureLevelParameteriv = nullptr;
	PFNGLGETTEXTUREPARAMETERFVPROC glGetTextureParameterfv = nullptr;
	PFNGLGETTEXTUREPARAMETERIIVPROC glGetTextureParameterIiv = nullptr;
	PFNGLGETTEXTUREPARAMETERIUIVPROC glGetTextureParameterIuiv = nullptr;
	PFNGLGETTEXTUREPARAMETERIVPROC glGetTextureParameteriv = nullptr;
	PFNGLCREATEVERTEXARRAYSPROC glCreateVertexArrays = nullptr;
	PFNGLDISABLEVERTEXARRAYATTRIBPROC glDisableVertexArrayAttrib = nullptr;
	PFNGLENABLEVERTEXARRAYATTRIBPROC glEnableVertexArrayAttrib = nullptr;
	PFNGLVERTEXARRAYELEMENTBUFFERPROC glVertexArrayElementBuffer = nullptr;
	PFNGLVERTEXARRAYVERTEXBUFFERPROC glVertexArrayVertexBuffer = nullptr;
	PFNGLVERTEXARRAYVERTEXBUFFERSPROC glVertexArrayVertexBuffers = nullptr;
	PFNGLVERTEXARRAYATTRIBBINDINGPROC glVertexArrayAttribBinding = nullptr;
	PFNGLVERTEXARRAYATTRIBFORMATPROC glVertexArrayAttribFormat = nullptr;
	PFNGLVERTEXARRAYATTRIBIFORMATPROC glVertexArrayAttribIFormat = nullptr;
	PFNGLVERTEXARRAYATTRIBLFORMATPROC glVertexArrayAttribLFormat = nullptr;
	PFNGLVERTEXARRAYBINDINGDIVISORPROC glVertexArrayBindingDivisor = nullptr;
	PFNGLGETVERTEXARRAYIVPROC glGetVertexArrayiv = nullptr;
	PFNGLGETVERTEXARRAYINDEXEDIVPROC glGetVertexArrayIndexediv = nullptr;
	PFNGLGETVERTEXARRAYINDEXED64IVPROC glGetVertexArrayIndexed64iv = nullptr;
	PFNGLCREATESAMPLERSPROC glCreateSamplers = nullptr;
	PFNGLCREATEPROGRAMPIPELINESPROC glCreateProgramPipelines = nullptr;
	PFNGLCREATEQUERIESPROC glCreateQueries = nullptr;
	PFNGLGETQUERYBUFFEROBJECTI64VPROC glGetQueryBufferObjecti64v = nullptr;
	PFNGLGETQUERYBUFFEROBJECTIVPROC glGetQueryBufferObjectiv = nullptr;
	PFNGLGETQUERYBUFFEROBJECTUI64VPROC glGetQueryBufferObjectui64v = nullptr;
	PFNGLGETQUERYBUFFEROBJECTUIVPROC glGetQueryBufferObjectuiv = nullptr;
	PFNGLMEMORYBARRIERBYREGIONPROC glMemoryBarrierByRegion = nullptr;
	PFNGLGETTEXTURESUBIMAGEPROC glGetTextureSubImage = nullptr;
	PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC glGetCompressedTextureSubImage = nullptr;
	PFNGLGETGRAPHICSRESETSTATUSPROC glGetGraphicsResetStatus = nullptr;
	PFNGLGETNCOMPRESSEDTEXIMAGEPROC glGetnCompressedTexImage = nullptr;
	PFNGLGETNTEXIMAGEPROC glGetnTexImage = nullptr;
	PFNGLGETNUNIFORMDVPROC glGetnUniformdv = nullptr;
	PFNGLGETNUNIFORMFVPROC glGetnUniformfv = nullptr;
	PFNGLGETNUNIFORMIVPROC glGetnUniformiv = nullptr;
	PFNGLGETNUNIFORMUIVPROC glGetnUniformuiv = nullptr;
	PFNGLREADNPIXELSPROC glReadnPixels = nullptr;
	PFNGLGETNMAPDVPROC glGetnMapdv = nullptr;
	PFNGLGETNMAPFVPROC glGetnMapfv = nullptr;
	PFNGLGETNMAPIVPROC glGetnMapiv = nullptr;
	PFNGLGETNPIXELMAPFVPROC glGetnPixelMapfv = nullptr;
	PFNGLGETNPIXELMAPUIVPROC glGetnPixelMapuiv = nullptr;
	PFNGLGETNPIXELMAPUSVPROC glGetnPixelMapusv = nullptr;
	PFNGLGETNPOLYGONSTIPPLEPROC glGetnPolygonStipple = nullptr;
	PFNGLGETNCOLORTABLEPROC glGetnColorTable = nullptr;
	PFNGLGETNCONVOLUTIONFILTERPROC glGetnConvolutionFilter = nullptr;
	PFNGLGETNSEPARABLEFILTERPROC glGetnSeparableFilter = nullptr;
	PFNGLGETNHISTOGRAMPROC glGetnHistogram = nullptr;
	PFNGLGETNMINMAXPROC glGetnMinmax = nullptr;
	PFNGLTEXTUREBARRIERPROC glTextureBarrier = nullptr;

	namespace GLAD_4_5 {
		void load_GL_RECURSIVE(GLADloadproc load) {
			glClipControl = GLAD::gladLoadFunction<PFNGLCLIPCONTROLPROC>("glClipControl", load);
			glCreateTransformFeedbacks = GLAD::gladLoadFunction<PFNGLCREATETRANSFORMFEEDBACKSPROC>("glCreateTransformFeedbacks", load);
			glTransformFeedbackBufferBase = GLAD::gladLoadFunction<PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC>("glTransformFeedbackBufferBase", load);
			glTransformFeedbackBufferRange = GLAD::gladLoadFunction<PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC>("glTransformFeedbackBufferRange", load);
			glGetTransformFeedbackiv = GLAD::gladLoadFunction<PFNGLGETTRANSFORMFEEDBACKIVPROC>("glGetTransformFeedbackiv", load);
			glGetTransformFeedbacki_v = GLAD::gladLoadFunction<PFNGLGETTRANSFORMFEEDBACKI_VPROC>("glGetTransformFeedbacki_v", load);
			glGetTransformFeedbacki64_v = GLAD::gladLoadFunction<PFNGLGETTRANSFORMFEEDBACKI64_VPROC>("glGetTransformFeedbacki64_v", load);
			glCreateBuffers = GLAD::gladLoadFunction<PFNGLCREATEBUFFERSPROC>("glCreateBuffers", load);
			glNamedBufferStorage = GLAD::gladLoadFunction<PFNGLNAMEDBUFFERSTORAGEPROC>("glNamedBufferStorage", load);
			glNamedBufferData = GLAD::gladLoadFunction<PFNGLNAMEDBUFFERDATAPROC>("glNamedBufferData", load);
			glNamedBufferSubData = GLAD::gladLoadFunction<PFNGLNAMEDBUFFERSUBDATAPROC>("glNamedBufferSubData", load);
			glCopyNamedBufferSubData = GLAD::gladLoadFunction<PFNGLCOPYNAMEDBUFFERSUBDATAPROC>("glCopyNamedBufferSubData", load);
			glClearNamedBufferData = GLAD::gladLoadFunction<PFNGLCLEARNAMEDBUFFERDATAPROC>("glClearNamedBufferData", load);
			glClearNamedBufferSubData = GLAD::gladLoadFunction<PFNGLCLEARNAMEDBUFFERSUBDATAPROC>("glClearNamedBufferSubData", load);
			glMapNamedBuffer = GLAD::gladLoadFunction<PFNGLMAPNAMEDBUFFERPROC>("glMapNamedBuffer", load);
			glMapNamedBufferRange = GLAD::gladLoadFunction<PFNGLMAPNAMEDBUFFERRANGEPROC>("glMapNamedBufferRange", load);
			glUnmapNamedBuffer = GLAD::gladLoadFunction<PFNGLUNMAPNAMEDBUFFERPROC>("glUnmapNamedBuffer", load);
			glFlushMappedNamedBufferRange = GLAD::gladLoadFunction<PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC>("glFlushMappedNamedBufferRange", load);
			glGetNamedBufferParameteriv = GLAD::gladLoadFunction<PFNGLGETNAMEDBUFFERPARAMETERIVPROC>("glGetNamedBufferParameteriv", load);
			glGetNamedBufferParameteri64v = GLAD::gladLoadFunction<PFNGLGETNAMEDBUFFERPARAMETERI64VPROC>("glGetNamedBufferParameteri64v", load);
			glGetNamedBufferPointerv = GLAD::gladLoadFunction<PFNGLGETNAMEDBUFFERPOINTERVPROC>("glGetNamedBufferPointerv", load);
			glGetNamedBufferSubData = GLAD::gladLoadFunction<PFNGLGETNAMEDBUFFERSUBDATAPROC>("glGetNamedBufferSubData", load);
			glCreateFramebuffers = GLAD::gladLoadFunction<PFNGLCREATEFRAMEBUFFERSPROC>("glCreateFramebuffers", load);
			glNamedFramebufferRenderbuffer = GLAD::gladLoadFunction<PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC>("glNamedFramebufferRenderbuffer", load);
			glNamedFramebufferParameteri = GLAD::gladLoadFunction<PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC>("glNamedFramebufferParameteri", load);
			glNamedFramebufferTexture = GLAD::gladLoadFunction<PFNGLNAMEDFRAMEBUFFERTEXTUREPROC>("glNamedFramebufferTexture", load);
			glNamedFramebufferTextureLayer = GLAD::gladLoadFunction<PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC>("glNamedFramebufferTextureLayer", load);
			glNamedFramebufferDrawBuffer = GLAD::gladLoadFunction<PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC>("glNamedFramebufferDrawBuffer", load);
			glNamedFramebufferDrawBuffers = GLAD::gladLoadFunction<PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC>("glNamedFramebufferDrawBuffers", load);
			glNamedFramebufferReadBuffer = GLAD::gladLoadFunction<PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC>("glNamedFramebufferReadBuffer", load);
			glInvalidateNamedFramebufferData = GLAD::gladLoadFunction<PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC>("glInvalidateNamedFramebufferData", load);
			glInvalidateNamedFramebufferSubData = GLAD::gladLoadFunction<PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC>("glInvalidateNamedFramebufferSubData", load);
			glClearNamedFramebufferiv = GLAD::gladLoadFunction<PFNGLCLEARNAMEDFRAMEBUFFERIVPROC>("glClearNamedFramebufferiv", load);
			glClearNamedFramebufferuiv = GLAD::gladLoadFunction<PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC>("glClearNamedFramebufferuiv", load);
			glClearNamedFramebufferfv = GLAD::gladLoadFunction<PFNGLCLEARNAMEDFRAMEBUFFERFVPROC>("glClearNamedFramebufferfv", load);
			glClearNamedFramebufferfi = GLAD::gladLoadFunction<PFNGLCLEARNAMEDFRAMEBUFFERFIPROC>("glClearNamedFramebufferfi", load);
			glBlitNamedFramebuffer = GLAD::gladLoadFunction<PFNGLBLITNAMEDFRAMEBUFFERPROC>("glBlitNamedFramebuffer", load);
			glCheckNamedFramebufferStatus = GLAD::gladLoadFunction<PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC>("glCheckNamedFramebufferStatus", load);
			glGetNamedFramebufferParameteriv = GLAD::gladLoadFunction<PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC>("glGetNamedFramebufferParameteriv", load);
			glGetNamedFramebufferAttachmentParameteriv = GLAD::gladLoadFunction<PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC>("glGetNamedFramebufferAttachmentParameteriv", load);
			glCreateRenderbuffers = GLAD::gladLoadFunction<PFNGLCREATERENDERBUFFERSPROC>("glCreateRenderbuffers", load);
			glNamedRenderbufferStorage = GLAD::gladLoadFunction<PFNGLNAMEDRENDERBUFFERSTORAGEPROC>("glNamedRenderbufferStorage", load);
			glNamedRenderbufferStorageMultisample = GLAD::gladLoadFunction<PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC>("glNamedRenderbufferStorageMultisample", load);
			glGetNamedRenderbufferParameteriv = GLAD::gladLoadFunction<PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC>("glGetNamedRenderbufferParameteriv", load);
			glCreateTextures = GLAD::gladLoadFunction<PFNGLCREATETEXTURESPROC>("glCreateTextures", load);
			glTextureBuffer = GLAD::gladLoadFunction<PFNGLTEXTUREBUFFERPROC>("glTextureBuffer", load);
			glTextureBufferRange = GLAD::gladLoadFunction<PFNGLTEXTUREBUFFERRANGEPROC>("glTextureBufferRange", load);
			glTextureStorage1D = GLAD::gladLoadFunction<PFNGLTEXTURESTORAGE1DPROC>("glTextureStorage1D", load);
			glTextureStorage2D = GLAD::gladLoadFunction<PFNGLTEXTURESTORAGE2DPROC>("glTextureStorage2D", load);
			glTextureStorage3D = GLAD::gladLoadFunction<PFNGLTEXTURESTORAGE3DPROC>("glTextureStorage3D", load);
			glTextureStorage2DMultisample = GLAD::gladLoadFunction<PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC>("glTextureStorage2DMultisample", load);
			glTextureStorage3DMultisample = GLAD::gladLoadFunction<PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC>("glTextureStorage3DMultisample", load);
			glTextureSubImage1D = GLAD::gladLoadFunction<PFNGLTEXTURESUBIMAGE1DPROC>("glTextureSubImage1D", load);
			glTextureSubImage2D = GLAD::gladLoadFunction<PFNGLTEXTURESUBIMAGE2DPROC>("glTextureSubImage2D", load);
			glTextureSubImage3D = GLAD::gladLoadFunction<PFNGLTEXTURESUBIMAGE3DPROC>("glTextureSubImage3D", load);
			glCompressedTextureSubImage1D = GLAD::gladLoadFunction<PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC>("glCompressedTextureSubImage1D", load);
			glCompressedTextureSubImage2D = GLAD::gladLoadFunction<PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC>("glCompressedTextureSubImage2D", load);
			glCompressedTextureSubImage3D = GLAD::gladLoadFunction<PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC>("glCompressedTextureSubImage3D", load);
			glCopyTextureSubImage1D = GLAD::gladLoadFunction<PFNGLCOPYTEXTURESUBIMAGE1DPROC>("glCopyTextureSubImage1D", load);
			glCopyTextureSubImage2D = GLAD::gladLoadFunction<PFNGLCOPYTEXTURESUBIMAGE2DPROC>("glCopyTextureSubImage2D", load);
			glCopyTextureSubImage3D = GLAD::gladLoadFunction<PFNGLCOPYTEXTURESUBIMAGE3DPROC>("glCopyTextureSubImage3D", load);
			glTextureParameterf = GLAD::gladLoadFunction<PFNGLTEXTUREPARAMETERFPROC>("glTextureParameterf", load);
			glTextureParameterfv = GLAD::gladLoadFunction<PFNGLTEXTUREPARAMETERFVPROC>("glTextureParameterfv", load);
			glTextureParameteri = GLAD::gladLoadFunction<PFNGLTEXTUREPARAMETERIPROC>("glTextureParameteri", load);
			glTextureParameterIiv = GLAD::gladLoadFunction<PFNGLTEXTUREPARAMETERIIVPROC>("glTextureParameterIiv", load);
			glTextureParameterIuiv = GLAD::gladLoadFunction<PFNGLTEXTUREPARAMETERIUIVPROC>("glTextureParameterIuiv", load);
			glTextureParameteriv = GLAD::gladLoadFunction<PFNGLTEXTUREPARAMETERIVPROC>("glTextureParameteriv", load);
			glGenerateTextureMipmap = GLAD::gladLoadFunction<PFNGLGENERATETEXTUREMIPMAPPROC>("glGenerateTextureMipmap", load);
			glBindTextureUnit = GLAD::gladLoadFunction<PFNGLBINDTEXTUREUNITPROC>("glBindTextureUnit", load);
			glGetTextureImage = GLAD::gladLoadFunction<PFNGLGETTEXTUREIMAGEPROC>("glGetTextureImage", load);
			glGetCompressedTextureImage = GLAD::gladLoadFunction<PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC>("glGetCompressedTextureImage", load);
			glGetTextureLevelParameterfv = GLAD::gladLoadFunction<PFNGLGETTEXTURELEVELPARAMETERFVPROC>("glGetTextureLevelParameterfv", load);
			glGetTextureLevelParameteriv = GLAD::gladLoadFunction<PFNGLGETTEXTURELEVELPARAMETERIVPROC>("glGetTextureLevelParameteriv", load);
			glGetTextureParameterfv = GLAD::gladLoadFunction<PFNGLGETTEXTUREPARAMETERFVPROC>("glGetTextureParameterfv", load);
			glGetTextureParameterIiv = GLAD::gladLoadFunction<PFNGLGETTEXTUREPARAMETERIIVPROC>("glGetTextureParameterIiv", load);
			glGetTextureParameterIuiv = GLAD::gladLoadFunction<PFNGLGETTEXTUREPARAMETERIUIVPROC>("glGetTextureParameterIuiv", load);
			glGetTextureParameteriv = GLAD::gladLoadFunction<PFNGLGETTEXTUREPARAMETERIVPROC>("glGetTextureParameteriv", load);
			glCreateVertexArrays = GLAD::gladLoadFunction<PFNGLCREATEVERTEXARRAYSPROC>("glCreateVertexArrays", load);
			glDisableVertexArrayAttrib = GLAD::gladLoadFunction<PFNGLDISABLEVERTEXARRAYATTRIBPROC>("glDisableVertexArrayAttrib", load);
			glEnableVertexArrayAttrib = GLAD::gladLoadFunction<PFNGLENABLEVERTEXARRAYATTRIBPROC>("glEnableVertexArrayAttrib", load);
			glVertexArrayElementBuffer = GLAD::gladLoadFunction<PFNGLVERTEXARRAYELEMENTBUFFERPROC>("glVertexArrayElementBuffer", load);
			glVertexArrayVertexBuffer = GLAD::gladLoadFunction<PFNGLVERTEXARRAYVERTEXBUFFERPROC>("glVertexArrayVertexBuffer", load);
			glVertexArrayVertexBuffers = GLAD::gladLoadFunction<PFNGLVERTEXARRAYVERTEXBUFFERSPROC>("glVertexArrayVertexBuffers", load);
			glVertexArrayAttribBinding = GLAD::gladLoadFunction<PFNGLVERTEXARRAYATTRIBBINDINGPROC>("glVertexArrayAttribBinding", load);
			glVertexArrayAttribFormat = GLAD::gladLoadFunction<PFNGLVERTEXARRAYATTRIBFORMATPROC>("glVertexArrayAttribFormat", load);
			glVertexArrayAttribIFormat = GLAD::gladLoadFunction<PFNGLVERTEXARRAYATTRIBIFORMATPROC>("glVertexArrayAttribIFormat", load);
			glVertexArrayAttribLFormat = GLAD::gladLoadFunction<PFNGLVERTEXARRAYATTRIBLFORMATPROC>("glVertexArrayAttribLFormat", load);
			glVertexArrayBindingDivisor = GLAD::gladLoadFunction<PFNGLVERTEXARRAYBINDINGDIVISORPROC>("glVertexArrayBindingDivisor", load);
			glGetVertexArrayiv = GLAD::gladLoadFunction<PFNGLGETVERTEXARRAYIVPROC>("glGetVertexArrayiv", load);
			glGetVertexArrayIndexediv = GLAD::gladLoadFunction<PFNGLGETVERTEXARRAYINDEXEDIVPROC>("glGetVertexArrayIndexediv", load);
			glGetVertexArrayIndexed64iv = GLAD::gladLoadFunction<PFNGLGETVERTEXARRAYINDEXED64IVPROC>("glGetVertexArrayIndexed64iv", load);
			glCreateSamplers = GLAD::gladLoadFunction<PFNGLCREATESAMPLERSPROC>("glCreateSamplers", load);
			glCreateProgramPipelines = GLAD::gladLoadFunction<PFNGLCREATEPROGRAMPIPELINESPROC>("glCreateProgramPipelines", load);
			glCreateQueries = GLAD::gladLoadFunction<PFNGLCREATEQUERIESPROC>("glCreateQueries", load);
			glGetQueryBufferObjecti64v = GLAD::gladLoadFunction<PFNGLGETQUERYBUFFEROBJECTI64VPROC>("glGetQueryBufferObjecti64v", load);
			glGetQueryBufferObjectiv = GLAD::gladLoadFunction<PFNGLGETQUERYBUFFEROBJECTIVPROC>("glGetQueryBufferObjectiv", load);
			glGetQueryBufferObjectui64v = GLAD::gladLoadFunction<PFNGLGETQUERYBUFFEROBJECTUI64VPROC>("glGetQueryBufferObjectui64v", load);
			glGetQueryBufferObjectuiv = GLAD::gladLoadFunction<PFNGLGETQUERYBUFFEROBJECTUIVPROC>("glGetQueryBufferObjectuiv", load);
			glMemoryBarrierByRegion = GLAD::gladLoadFunction<PFNGLMEMORYBARRIERBYREGIONPROC>("glMemoryBarrierByRegion", load);
			glGetTextureSubImage = GLAD::gladLoadFunction<PFNGLGETTEXTURESUBIMAGEPROC>("glGetTextureSubImage", load);
			glGetCompressedTextureSubImage = GLAD::gladLoadFunction<PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC>("glGetCompressedTextureSubImage", load);
			glGetGraphicsResetStatus = GLAD::gladLoadFunction<PFNGLGETGRAPHICSRESETSTATUSPROC>("glGetGraphicsResetStatus", load);
			glGetnCompressedTexImage = GLAD::gladLoadFunction<PFNGLGETNCOMPRESSEDTEXIMAGEPROC>("glGetnCompressedTexImage", load);
			glGetnTexImage = GLAD::gladLoadFunction<PFNGLGETNTEXIMAGEPROC>("glGetnTexImage", load);
			glGetnUniformdv = GLAD::gladLoadFunction<PFNGLGETNUNIFORMDVPROC>("glGetnUniformdv", load);
			glGetnUniformfv = GLAD::gladLoadFunction<PFNGLGETNUNIFORMFVPROC>("glGetnUniformfv", load);
			glGetnUniformiv = GLAD::gladLoadFunction<PFNGLGETNUNIFORMIVPROC>("glGetnUniformiv", load);
			glGetnUniformuiv = GLAD::gladLoadFunction<PFNGLGETNUNIFORMUIVPROC>("glGetnUniformuiv", load);
			glReadnPixels = GLAD::gladLoadFunction<PFNGLREADNPIXELSPROC>("glReadnPixels", load);
			glGetnMapdv = GLAD::gladLoadFunction<PFNGLGETNMAPDVPROC>("glGetnMapdv", load);
			glGetnMapfv = GLAD::gladLoadFunction<PFNGLGETNMAPFVPROC>("glGetnMapfv", load);
			glGetnMapiv = GLAD::gladLoadFunction<PFNGLGETNMAPIVPROC>("glGetnMapiv", load);
			glGetnPixelMapfv = GLAD::gladLoadFunction<PFNGLGETNPIXELMAPFVPROC>("glGetnPixelMapfv", load);
			glGetnPixelMapuiv = GLAD::gladLoadFunction<PFNGLGETNPIXELMAPUIVPROC>("glGetnPixelMapuiv", load);
			glGetnPixelMapusv = GLAD::gladLoadFunction<PFNGLGETNPIXELMAPUSVPROC>("glGetnPixelMapusv", load);
			glGetnPolygonStipple = GLAD::gladLoadFunction<PFNGLGETNPOLYGONSTIPPLEPROC>("glGetnPolygonStipple", load);
			glGetnColorTable = GLAD::gladLoadFunction<PFNGLGETNCOLORTABLEPROC>("glGetnColorTable", load);
			glGetnConvolutionFilter = GLAD::gladLoadFunction<PFNGLGETNCONVOLUTIONFILTERPROC>("glGetnConvolutionFilter", load);
			glGetnSeparableFilter = GLAD::gladLoadFunction<PFNGLGETNSEPARABLEFILTERPROC>("glGetnSeparableFilter", load);
			glGetnHistogram = GLAD::gladLoadFunction<PFNGLGETNHISTOGRAMPROC>("glGetnHistogram", load);
			glGetnMinmax = GLAD::gladLoadFunction<PFNGLGETNMINMAXPROC>("glGetnMinmax", load);
			glTextureBarrier = GLAD::gladLoadFunction<PFNGLTEXTUREBARRIERPROC>("glTextureBarrier", load);

			GLAD::GLAD_4_4::load_GL_RECURSIVE(load);
		}
	}
}