export module GLAD:V4_1;

export import :V4_0;

export namespace GLAD {
	// Alias for function pointer types
	using PFNGLRELEASESHADERCOMPILERPROC = void(*)();
	using PFNGLSHADERBINARYPROC = void(*)(GLsizei count, const GLuint* shaders, GLenum binaryFormat, const void* binary, GLsizei length);
	using PFNGLGETSHADERPRECISIONFORMATPROC = void(*)(GLenum shadertype, GLenum precisiontype, GLint* range, GLint* precision);
	using PFNGLDEPTHRANGEFPROC = void(*)(GLfloat n, GLfloat f);
	using PFNGLCLEARDEPTHFPROC = void(*)(GLfloat d);
	using PFNGLGETPROGRAMBINARYPROC = void(*)(GLuint program, GLsizei bufSize, GLsizei* length, GLenum* binaryFormat, void* binary);
	using PFNGLPROGRAMBINARYPROC = void(*)(GLuint program, GLenum binaryFormat, const void* binary, GLsizei length);
	using PFNGLPROGRAMPARAMETERIPROC = void(*)(GLuint program, GLenum pname, GLint value);
	using PFNGLUSEPROGRAMSTAGESPROC = void(*)(GLuint pipeline, GLbitfield stages, GLuint program);
	using PFNGLACTIVESHADERPROGRAMPROC = void(*)(GLuint pipeline, GLuint program);
	using PFNGLCREATESHADERPROGRAMVPROC = GLuint(*)(GLenum type, GLsizei count, const GLchar* const* strings);
	using PFNGLBINDPROGRAMPIPELINEPROC = void(*)(GLuint pipeline);
	using PFNGLDELETEPROGRAMPIPELINESPROC = void(*)(GLsizei n, const GLuint* pipelines);
	using PFNGLGENPROGRAMPIPELINESPROC = void(*)(GLsizei n, GLuint* pipelines);
	using PFNGLISPROGRAMPIPELINEPROC = GLboolean(*)(GLuint pipeline);
	using PFNGLGETPROGRAMPIPELINEIVPROC = void(*)(GLuint pipeline, GLenum pname, GLint* params);
	using PFNGLPROGRAMUNIFORM1IPROC = void(*)(GLuint program, GLint location, GLint v0);
	using PFNGLPROGRAMUNIFORM1IVPROC = void(*)(GLuint program, GLint location, GLsizei count, const GLint* value);
	using PFNGLPROGRAMUNIFORM1FPROC = void(*)(GLuint program, GLint location, GLfloat v0);
	using PFNGLPROGRAMUNIFORM1FVPROC = void(*)(GLuint program, GLint location, GLsizei count, const GLfloat* value);
	using PFNGLPROGRAMUNIFORM1DPROC = void(*)(GLuint program, GLint location, GLdouble v0);
	using PFNGLPROGRAMUNIFORM1DVPROC = void(*)(GLuint program, GLint location, GLsizei count, const GLdouble* value);
	using PFNGLPROGRAMUNIFORM1UIPROC = void(*)(GLuint program, GLint location, GLuint v0);
	using PFNGLPROGRAMUNIFORM1UIVPROC = void(*)(GLuint program, GLint location, GLsizei count, const GLuint* value);
	using PFNGLPROGRAMUNIFORM2IPROC = void(*)(GLuint program, GLint location, GLint v0, GLint v1);
	using PFNGLPROGRAMUNIFORM2IVPROC = void(*)(GLuint program, GLint location, GLsizei count, const GLint* value);
	using PFNGLPROGRAMUNIFORM2FPROC = void(*)(GLuint program, GLint location, GLfloat v0, GLfloat v1);
	using PFNGLPROGRAMUNIFORM2FVPROC = void(*)(GLuint program, GLint location, GLsizei count, const GLfloat* value);
	using PFNGLPROGRAMUNIFORM2DPROC = void(*)(GLuint program, GLint location, GLdouble v0, GLdouble v1);
	using PFNGLPROGRAMUNIFORM2DVPROC = void(*)(GLuint program, GLint location, GLsizei count, const GLdouble* value);
	using PFNGLPROGRAMUNIFORM2UIPROC = void(*)(GLuint program, GLint location, GLuint v0, GLuint v1);
	using PFNGLPROGRAMUNIFORM2UIVPROC = void(*)(GLuint program, GLint location, GLsizei count, const GLuint* value);
	using PFNGLPROGRAMUNIFORM3IPROC = void(*)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
	using PFNGLPROGRAMUNIFORM3IVPROC = void(*)(GLuint program, GLint location, GLsizei count, const GLint* value);
	using PFNGLPROGRAMUNIFORM3FPROC = void(*)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
	using PFNGLPROGRAMUNIFORM3FVPROC = void(*)(GLuint program, GLint location, GLsizei count, const GLfloat* value);
	using PFNGLPROGRAMUNIFORM3DPROC = void(*)(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2);
	using PFNGLPROGRAMUNIFORM3DVPROC = void(*)(GLuint program, GLint location, GLsizei count, const GLdouble* value);
	using PFNGLPROGRAMUNIFORM3UIPROC = void(*)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
	using PFNGLPROGRAMUNIFORM3UIVPROC = void(*)(GLuint program, GLint location, GLsizei count, const GLuint* value);
	using PFNGLPROGRAMUNIFORM4IPROC = void(*)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
	using PFNGLPROGRAMUNIFORM4IVPROC = void(*)(GLuint program, GLint location, GLsizei count, const GLint* value);
	using PFNGLPROGRAMUNIFORM4FPROC = void(*)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
	using PFNGLPROGRAMUNIFORM4FVPROC = void(*)(GLuint program, GLint location, GLsizei count, const GLfloat* value);
	using PFNGLPROGRAMUNIFORM4DPROC = void(*)(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3);
	using PFNGLPROGRAMUNIFORM4DVPROC = void(*)(GLuint program, GLint location, GLsizei count, const GLdouble* value);
	using PFNGLPROGRAMUNIFORM4UIPROC = void(*)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
	using PFNGLPROGRAMUNIFORM4UIVPROC = void(*)(GLuint program, GLint location, GLsizei count, const GLuint* value);
	using PFNGLPROGRAMUNIFORMMATRIX2FVPROC = void(*)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
	using PFNGLPROGRAMUNIFORMMATRIX3FVPROC = void(*)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
	using PFNGLPROGRAMUNIFORMMATRIX4FVPROC = void(*)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
	using PFNGLPROGRAMUNIFORMMATRIX2DVPROC = void(*)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
	using PFNGLPROGRAMUNIFORMMATRIX3DVPROC = void(*)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
	using PFNGLPROGRAMUNIFORMMATRIX4DVPROC = void(*)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
	using PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC = void(*)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
	using PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC = void(*)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
	using PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC = void(*)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
	using PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC = void(*)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
	using PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC = void(*)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
	using PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC = void(*)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
	using PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC = void(*)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
	using PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC = void(*)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
	using PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC = void(*)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
	using PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC = void(*)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
	using PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC = void(*)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
	using PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC = void(*)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
	using PFNGLVALIDATEPROGRAMPIPELINEPROC = void(*)(GLuint pipeline);
	using PFNGLGETPROGRAMPIPELINEINFOLOGPROC = void(*)(GLuint pipeline, GLsizei bufSize, GLsizei* length, GLchar* infoLog);
	using PFNGLVERTEXATTRIBL1DPROC = void(*)(GLuint index, GLdouble x);
	using PFNGLVERTEXATTRIBL2DPROC = void(*)(GLuint index, GLdouble x, GLdouble y);
	using PFNGLVERTEXATTRIBL3DPROC = void(*)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
	using PFNGLVERTEXATTRIBL4DPROC = void(*)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
	using PFNGLVERTEXATTRIBL1DVPROC = void(*)(GLuint index, const GLdouble* v);
	using PFNGLVERTEXATTRIBL2DVPROC = void(*)(GLuint index, const GLdouble* v);
	using PFNGLVERTEXATTRIBL3DVPROC = void(*)(GLuint index, const GLdouble* v);
	using PFNGLVERTEXATTRIBL4DVPROC = void(*)(GLuint index, const GLdouble* v);
	using PFNGLVERTEXATTRIBLPOINTERPROC = void(*)(GLuint index, GLint size, GLenum type, GLsizei stride, const void* pointer);
	using PFNGLGETVERTEXATTRIBLDVPROC = void(*)(GLuint index, GLenum pname, GLdouble* params);
	using PFNGLVIEWPORTARRAYVPROC = void(*)(GLuint first, GLsizei count, const GLfloat* v);
	using PFNGLVIEWPORTINDEXEDFPROC = void(*)(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h);
	using PFNGLVIEWPORTINDEXEDFVPROC = void(*)(GLuint index, const GLfloat* v);
	using PFNGLSCISSORARRAYVPROC = void(*)(GLuint first, GLsizei count, const GLint* v);
	using PFNGLSCISSORINDEXEDPROC = void(*)(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height);
	using PFNGLSCISSORINDEXEDVPROC = void(*)(GLuint index, const GLint* v);
	using PFNGLDEPTHRANGEARRAYVPROC = void(*)(GLuint first, GLsizei count, const GLdouble* v);
	using PFNGLDEPTHRANGEINDEXEDPROC = void(*)(GLuint index, GLdouble n, GLdouble f);
	using PFNGLGETFLOATI_VPROC = void(*)(GLenum target, GLuint index, GLfloat* data);
	using PFNGLGETDOUBLEI_VPROC = void(*)(GLenum target, GLuint index, GLdouble* data);

	// Export the function pointers
	PFNGLRELEASESHADERCOMPILERPROC glReleaseShaderCompiler = nullptr;
	PFNGLSHADERBINARYPROC glShaderBinary = nullptr;
	PFNGLGETSHADERPRECISIONFORMATPROC glGetShaderPrecisionFormat = nullptr;
	PFNGLDEPTHRANGEFPROC glDepthRangef = nullptr;
	PFNGLCLEARDEPTHFPROC glClearDepthf = nullptr;
	PFNGLGETPROGRAMBINARYPROC glGetProgramBinary = nullptr;
	PFNGLPROGRAMBINARYPROC glProgramBinary = nullptr;
	PFNGLPROGRAMPARAMETERIPROC glProgramParameteri = nullptr;
	PFNGLUSEPROGRAMSTAGESPROC glUseProgramStages = nullptr;
	PFNGLACTIVESHADERPROGRAMPROC glActiveShaderProgram = nullptr;
	PFNGLCREATESHADERPROGRAMVPROC glCreateShaderProgramv = nullptr;
	PFNGLBINDPROGRAMPIPELINEPROC glBindProgramPipeline = nullptr;
	PFNGLDELETEPROGRAMPIPELINESPROC glDeleteProgramPipelines = nullptr;
	PFNGLGENPROGRAMPIPELINESPROC glGenProgramPipelines = nullptr;
	PFNGLISPROGRAMPIPELINEPROC glIsProgramPipeline = nullptr;
	PFNGLGETPROGRAMPIPELINEIVPROC glGetProgramPipelineiv = nullptr;
	PFNGLPROGRAMUNIFORM1IPROC glProgramUniform1i = nullptr;
	PFNGLPROGRAMUNIFORM1IVPROC glProgramUniform1iv = nullptr;
	PFNGLPROGRAMUNIFORM1FPROC glProgramUniform1f = nullptr;
	PFNGLPROGRAMUNIFORM1FVPROC glProgramUniform1fv = nullptr;
	PFNGLPROGRAMUNIFORM1DPROC glProgramUniform1d = nullptr;
	PFNGLPROGRAMUNIFORM1DVPROC glProgramUniform1dv = nullptr;
	PFNGLPROGRAMUNIFORM1UIPROC glProgramUniform1ui = nullptr;
	PFNGLPROGRAMUNIFORM1UIVPROC glProgramUniform1uiv = nullptr;
	PFNGLPROGRAMUNIFORM2IPROC glProgramUniform2i = nullptr;
	PFNGLPROGRAMUNIFORM2IVPROC glProgramUniform2iv = nullptr;
	PFNGLPROGRAMUNIFORM2FPROC glProgramUniform2f = nullptr;
	PFNGLPROGRAMUNIFORM2FVPROC glProgramUniform2fv = nullptr;
	PFNGLPROGRAMUNIFORM2DPROC glProgramUniform2d = nullptr;
	PFNGLPROGRAMUNIFORM2DVPROC glProgramUniform2dv = nullptr;
	PFNGLPROGRAMUNIFORM2UIPROC glProgramUniform2ui = nullptr;
	PFNGLPROGRAMUNIFORM2UIVPROC glProgramUniform2uiv = nullptr;
	PFNGLPROGRAMUNIFORM3IPROC glProgramUniform3i = nullptr;
	PFNGLPROGRAMUNIFORM3IVPROC glProgramUniform3iv = nullptr;
	PFNGLPROGRAMUNIFORM3FPROC glProgramUniform3f = nullptr;
	PFNGLPROGRAMUNIFORM3FVPROC glProgramUniform3fv = nullptr;
	PFNGLPROGRAMUNIFORM3DPROC glProgramUniform3d = nullptr;
	PFNGLPROGRAMUNIFORM3DVPROC glProgramUniform3dv = nullptr;
	PFNGLPROGRAMUNIFORM3UIPROC glProgramUniform3ui = nullptr;
	PFNGLPROGRAMUNIFORM3UIVPROC glProgramUniform3uiv = nullptr;
	PFNGLPROGRAMUNIFORM4IPROC glProgramUniform4i = nullptr;
	PFNGLPROGRAMUNIFORM4IVPROC glProgramUniform4iv = nullptr;
	PFNGLPROGRAMUNIFORM4FPROC glProgramUniform4f = nullptr;
	PFNGLPROGRAMUNIFORM4FVPROC glProgramUniform4fv = nullptr;
	PFNGLPROGRAMUNIFORM4DPROC glProgramUniform4d = nullptr;
	PFNGLPROGRAMUNIFORM4DVPROC glProgramUniform4dv = nullptr;
	PFNGLPROGRAMUNIFORM4UIPROC glProgramUniform4ui = nullptr;
	PFNGLPROGRAMUNIFORM4UIVPROC glProgramUniform4uiv = nullptr;
	PFNGLPROGRAMUNIFORMMATRIX2FVPROC glProgramUniformMatrix2fv = nullptr;
	PFNGLPROGRAMUNIFORMMATRIX3FVPROC glProgramUniformMatrix3fv = nullptr;
	PFNGLPROGRAMUNIFORMMATRIX4FVPROC glProgramUniformMatrix4fv = nullptr;
	PFNGLPROGRAMUNIFORMMATRIX2DVPROC glProgramUniformMatrix2dv = nullptr;
	PFNGLPROGRAMUNIFORMMATRIX3DVPROC glProgramUniformMatrix3dv = nullptr;
	PFNGLPROGRAMUNIFORMMATRIX4DVPROC glProgramUniformMatrix4dv = nullptr;
	PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC glProgramUniformMatrix2x3fv = nullptr;
	PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC glProgramUniformMatrix3x2fv = nullptr;
	PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC glProgramUniformMatrix2x4fv = nullptr;
	PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC glProgramUniformMatrix4x2fv = nullptr;
	PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC glProgramUniformMatrix3x4fv = nullptr;
	PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC glProgramUniformMatrix4x3fv = nullptr;
	PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC glProgramUniformMatrix2x3dv = nullptr;
	PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC glProgramUniformMatrix3x2dv = nullptr;
	PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC glProgramUniformMatrix2x4dv = nullptr;
	PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC glProgramUniformMatrix4x2dv = nullptr;
	PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC glProgramUniformMatrix3x4dv = nullptr;
	PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC glProgramUniformMatrix4x3dv = nullptr;
	PFNGLVALIDATEPROGRAMPIPELINEPROC glValidateProgramPipeline = nullptr;
	PFNGLGETPROGRAMPIPELINEINFOLOGPROC glGetProgramPipelineInfoLog = nullptr;
	PFNGLVERTEXATTRIBL1DPROC glVertexAttribL1d = nullptr;
	PFNGLVERTEXATTRIBL2DPROC glVertexAttribL2d = nullptr;
	PFNGLVERTEXATTRIBL3DPROC glVertexAttribL3d = nullptr;
	PFNGLVERTEXATTRIBL4DPROC glVertexAttribL4d = nullptr;
	PFNGLVERTEXATTRIBL1DVPROC glVertexAttribL1dv = nullptr;
	PFNGLVERTEXATTRIBL2DVPROC glVertexAttribL2dv = nullptr;
	PFNGLVERTEXATTRIBL3DVPROC glVertexAttribL3dv = nullptr;
	PFNGLVERTEXATTRIBL4DVPROC glVertexAttribL4dv = nullptr;
	PFNGLVERTEXATTRIBLPOINTERPROC glVertexAttribLPointer = nullptr;
	PFNGLGETVERTEXATTRIBLDVPROC glGetVertexAttribLdv = nullptr;
	PFNGLVIEWPORTARRAYVPROC glViewportArrayv = nullptr;
	PFNGLVIEWPORTINDEXEDFPROC glViewportIndexedf = nullptr;
	PFNGLVIEWPORTINDEXEDFVPROC glViewportIndexedfv = nullptr;
	PFNGLSCISSORARRAYVPROC glScissorArrayv = nullptr;
	PFNGLSCISSORINDEXEDPROC glScissorIndexed = nullptr;
	PFNGLSCISSORINDEXEDVPROC glScissorIndexedv = nullptr;
	PFNGLDEPTHRANGEARRAYVPROC glDepthRangeArrayv = nullptr;
	PFNGLDEPTHRANGEINDEXEDPROC glDepthRangeIndexed = nullptr;
	PFNGLGETFLOATI_VPROC glGetFloati_v = nullptr;
	PFNGLGETDOUBLEI_VPROC glGetDoublei_v = nullptr;

	namespace GLAD_4_1 {
		void load_GL_RECURSIVE(GLADloadproc load) {
			glReleaseShaderCompiler = GLAD::gladLoadFunction<PFNGLRELEASESHADERCOMPILERPROC>("glReleaseShaderCompiler", load);
			glShaderBinary = GLAD::gladLoadFunction<PFNGLSHADERBINARYPROC>("glShaderBinary", load);
			glGetShaderPrecisionFormat = GLAD::gladLoadFunction<PFNGLGETSHADERPRECISIONFORMATPROC>("glGetShaderPrecisionFormat", load);
			glDepthRangef = GLAD::gladLoadFunction<PFNGLDEPTHRANGEFPROC>("glDepthRangef", load);
			glClearDepthf = GLAD::gladLoadFunction<PFNGLCLEARDEPTHFPROC>("glClearDepthf", load);
			glGetProgramBinary = GLAD::gladLoadFunction<PFNGLGETPROGRAMBINARYPROC>("glGetProgramBinary", load);
			glProgramBinary = GLAD::gladLoadFunction<PFNGLPROGRAMBINARYPROC>("glProgramBinary", load);
			glProgramParameteri = GLAD::gladLoadFunction<PFNGLPROGRAMPARAMETERIPROC>("glProgramParameteri", load);
			glUseProgramStages = GLAD::gladLoadFunction<PFNGLUSEPROGRAMSTAGESPROC>("glUseProgramStages", load);
			glActiveShaderProgram = GLAD::gladLoadFunction<PFNGLACTIVESHADERPROGRAMPROC>("glActiveShaderProgram", load);
			glCreateShaderProgramv = GLAD::gladLoadFunction<PFNGLCREATESHADERPROGRAMVPROC>("glCreateShaderProgramv", load);
			glBindProgramPipeline = GLAD::gladLoadFunction<PFNGLBINDPROGRAMPIPELINEPROC>("glBindProgramPipeline", load);
			glDeleteProgramPipelines = GLAD::gladLoadFunction<PFNGLDELETEPROGRAMPIPELINESPROC>("glDeleteProgramPipelines", load);
			glGenProgramPipelines = GLAD::gladLoadFunction<PFNGLGENPROGRAMPIPELINESPROC>("glGenProgramPipelines", load);
			glIsProgramPipeline = GLAD::gladLoadFunction<PFNGLISPROGRAMPIPELINEPROC>("glIsProgramPipeline", load);
			glGetProgramPipelineiv = GLAD::gladLoadFunction<PFNGLGETPROGRAMPIPELINEIVPROC>("glGetProgramPipelineiv", load);
			glProgramParameteri = GLAD::gladLoadFunction<PFNGLPROGRAMPARAMETERIPROC>("glProgramParameteri", load);
			glProgramUniform1i = GLAD::gladLoadFunction<PFNGLPROGRAMUNIFORM1IPROC>("glProgramUniform1i", load);
			glProgramUniform1iv = GLAD::gladLoadFunction<PFNGLPROGRAMUNIFORM1IVPROC>("glProgramUniform1iv", load);
			glProgramUniform1f = GLAD::gladLoadFunction<PFNGLPROGRAMUNIFORM1FPROC>("glProgramUniform1f", load);
			glProgramUniform1fv = GLAD::gladLoadFunction<PFNGLPROGRAMUNIFORM1FVPROC>("glProgramUniform1fv", load);
			glProgramUniform1d = GLAD::gladLoadFunction<PFNGLPROGRAMUNIFORM1DPROC>("glProgramUniform1d", load);
			glProgramUniform1dv = GLAD::gladLoadFunction<PFNGLPROGRAMUNIFORM1DVPROC>("glProgramUniform1dv", load);
			glProgramUniform1ui = GLAD::gladLoadFunction<PFNGLPROGRAMUNIFORM1UIPROC>("glProgramUniform1ui", load);
			glProgramUniform1uiv = GLAD::gladLoadFunction<PFNGLPROGRAMUNIFORM1UIVPROC>("glProgramUniform1uiv", load);
			glProgramUniform2i = GLAD::gladLoadFunction<PFNGLPROGRAMUNIFORM2IPROC>("glProgramUniform2i", load);
			glProgramUniform2iv = GLAD::gladLoadFunction<PFNGLPROGRAMUNIFORM2IVPROC>("glProgramUniform2iv", load);
			glProgramUniform2f = GLAD::gladLoadFunction<PFNGLPROGRAMUNIFORM2FPROC>("glProgramUniform2f", load);
			glProgramUniform2fv = GLAD::gladLoadFunction<PFNGLPROGRAMUNIFORM2FVPROC>("glProgramUniform2fv", load);
			glProgramUniform2d = GLAD::gladLoadFunction<PFNGLPROGRAMUNIFORM2DPROC>("glProgramUniform2d", load);
			glProgramUniform2dv = GLAD::gladLoadFunction<PFNGLPROGRAMUNIFORM2DVPROC>("glProgramUniform2dv", load);
			glProgramUniform2ui = GLAD::gladLoadFunction<PFNGLPROGRAMUNIFORM2UIPROC>("glProgramUniform2ui", load);
			glProgramUniform2uiv = GLAD::gladLoadFunction<PFNGLPROGRAMUNIFORM2UIVPROC>("glProgramUniform2uiv", load);
			glProgramUniform3i = GLAD::gladLoadFunction<PFNGLPROGRAMUNIFORM3IPROC>("glProgramUniform3i", load);
			glProgramUniform3iv = GLAD::gladLoadFunction<PFNGLPROGRAMUNIFORM3IVPROC>("glProgramUniform3iv", load);
			glProgramUniform3f = GLAD::gladLoadFunction<PFNGLPROGRAMUNIFORM3FPROC>("glProgramUniform3f", load);
			glProgramUniform3fv = GLAD::gladLoadFunction<PFNGLPROGRAMUNIFORM3FVPROC>("glProgramUniform3fv", load);
			glProgramUniform3d = GLAD::gladLoadFunction<PFNGLPROGRAMUNIFORM3DPROC>("glProgramUniform3d", load);
			glProgramUniform3dv = GLAD::gladLoadFunction<PFNGLPROGRAMUNIFORM3DVPROC>("glProgramUniform3dv", load);
			glProgramUniform3ui = GLAD::gladLoadFunction<PFNGLPROGRAMUNIFORM3UIPROC>("glProgramUniform3ui", load);
			glProgramUniform3uiv = GLAD::gladLoadFunction<PFNGLPROGRAMUNIFORM3UIVPROC>("glProgramUniform3uiv", load);
			glProgramUniform4i = GLAD::gladLoadFunction<PFNGLPROGRAMUNIFORM4IPROC>("glProgramUniform4i", load);
			glProgramUniform4iv = GLAD::gladLoadFunction<PFNGLPROGRAMUNIFORM4IVPROC>("glProgramUniform4iv", load);
			glProgramUniform4f = GLAD::gladLoadFunction<PFNGLPROGRAMUNIFORM4FPROC>("glProgramUniform4f", load);
			glProgramUniform4fv = GLAD::gladLoadFunction<PFNGLPROGRAMUNIFORM4FVPROC>("glProgramUniform4fv", load);
			glProgramUniform4d = GLAD::gladLoadFunction<PFNGLPROGRAMUNIFORM4DPROC>("glProgramUniform4d", load);
			glProgramUniform4dv = GLAD::gladLoadFunction<PFNGLPROGRAMUNIFORM4DVPROC>("glProgramUniform4dv", load);
			glProgramUniform4ui = GLAD::gladLoadFunction<PFNGLPROGRAMUNIFORM4UIPROC>("glProgramUniform4ui", load);
			glProgramUniform4uiv = GLAD::gladLoadFunction<PFNGLPROGRAMUNIFORM4UIVPROC>("glProgramUniform4uiv", load);
			glProgramUniformMatrix2fv = GLAD::gladLoadFunction<PFNGLPROGRAMUNIFORMMATRIX2FVPROC>("glProgramUniformMatrix2fv", load);
			glProgramUniformMatrix3fv = GLAD::gladLoadFunction<PFNGLPROGRAMUNIFORMMATRIX3FVPROC>("glProgramUniformMatrix3fv", load);
			glProgramUniformMatrix4fv = GLAD::gladLoadFunction<PFNGLPROGRAMUNIFORMMATRIX4FVPROC>("glProgramUniformMatrix4fv", load);
			glProgramUniformMatrix2dv = GLAD::gladLoadFunction<PFNGLPROGRAMUNIFORMMATRIX2DVPROC>("glProgramUniformMatrix2dv", load);
			glProgramUniformMatrix3dv = GLAD::gladLoadFunction<PFNGLPROGRAMUNIFORMMATRIX3DVPROC>("glProgramUniformMatrix3dv", load);
			glProgramUniformMatrix4dv = GLAD::gladLoadFunction<PFNGLPROGRAMUNIFORMMATRIX4DVPROC>("glProgramUniformMatrix4dv", load);
			glProgramUniformMatrix2x3fv = GLAD::gladLoadFunction<PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC>("glProgramUniformMatrix2x3fv", load);
			glProgramUniformMatrix3x2fv = GLAD::gladLoadFunction<PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC>("glProgramUniformMatrix3x2fv", load);
			glProgramUniformMatrix2x4fv = GLAD::gladLoadFunction<PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC>("glProgramUniformMatrix2x4fv", load);
			glProgramUniformMatrix4x2fv = GLAD::gladLoadFunction<PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC>("glProgramUniformMatrix4x2fv", load);
			glProgramUniformMatrix3x4fv = GLAD::gladLoadFunction<PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC>("glProgramUniformMatrix3x4fv", load);
			glProgramUniformMatrix4x3fv = GLAD::gladLoadFunction<PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC>("glProgramUniformMatrix4x3fv", load);
			glProgramUniformMatrix2x3dv = GLAD::gladLoadFunction<PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC>("glProgramUniformMatrix2x3dv", load);
			glProgramUniformMatrix3x2dv = GLAD::gladLoadFunction<PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC>("glProgramUniformMatrix3x2dv", load);
			glProgramUniformMatrix2x4dv = GLAD::gladLoadFunction<PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC>("glProgramUniformMatrix2x4dv", load);
			glProgramUniformMatrix4x2dv = GLAD::gladLoadFunction<PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC>("glProgramUniformMatrix4x2dv", load);
			glProgramUniformMatrix3x4dv = GLAD::gladLoadFunction<PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC>("glProgramUniformMatrix3x4dv", load);
			glProgramUniformMatrix4x3dv = GLAD::gladLoadFunction<PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC>("glProgramUniformMatrix4x3dv", load);
			glValidateProgramPipeline = GLAD::gladLoadFunction<PFNGLVALIDATEPROGRAMPIPELINEPROC>("glValidateProgramPipeline", load);
			glGetProgramPipelineInfoLog = GLAD::gladLoadFunction<PFNGLGETPROGRAMPIPELINEINFOLOGPROC>("glGetProgramPipelineInfoLog", load);
			glVertexAttribL1d = GLAD::gladLoadFunction<PFNGLVERTEXATTRIBL1DPROC>("glVertexAttribL1d", load);
			glVertexAttribL2d = GLAD::gladLoadFunction<PFNGLVERTEXATTRIBL2DPROC>("glVertexAttribL2d", load);
			glVertexAttribL3d = GLAD::gladLoadFunction<PFNGLVERTEXATTRIBL3DPROC>("glVertexAttribL3d", load);
			glVertexAttribL4d = GLAD::gladLoadFunction<PFNGLVERTEXATTRIBL4DPROC>("glVertexAttribL4d", load);
			glVertexAttribL1dv = GLAD::gladLoadFunction<PFNGLVERTEXATTRIBL1DVPROC>("glVertexAttribL1dv", load);
			glVertexAttribL2dv = GLAD::gladLoadFunction<PFNGLVERTEXATTRIBL2DVPROC>("glVertexAttribL2dv", load);
			glVertexAttribL3dv = GLAD::gladLoadFunction<PFNGLVERTEXATTRIBL3DVPROC>("glVertexAttribL3dv", load);
			glVertexAttribL4dv = GLAD::gladLoadFunction<PFNGLVERTEXATTRIBL4DVPROC>("glVertexAttribL4dv", load);
			glVertexAttribLPointer = GLAD::gladLoadFunction<PFNGLVERTEXATTRIBLPOINTERPROC>("glVertexAttribLPointer", load);
			glGetVertexAttribLdv = GLAD::gladLoadFunction<PFNGLGETVERTEXATTRIBLDVPROC>("glGetVertexAttribLdv", load);
			glViewportArrayv = GLAD::gladLoadFunction<PFNGLVIEWPORTARRAYVPROC>("glViewportArrayv", load);
			glViewportIndexedf = GLAD::gladLoadFunction<PFNGLVIEWPORTINDEXEDFPROC>("glViewportIndexedf", load);
			glViewportIndexedfv = GLAD::gladLoadFunction<PFNGLVIEWPORTINDEXEDFVPROC>("glViewportIndexedfv", load);
			glScissorArrayv = GLAD::gladLoadFunction<PFNGLSCISSORARRAYVPROC>("glScissorArrayv", load);
			glScissorIndexed = GLAD::gladLoadFunction<PFNGLSCISSORINDEXEDPROC>("glScissorIndexed", load);
			glScissorIndexedv = GLAD::gladLoadFunction<PFNGLSCISSORINDEXEDVPROC>("glScissorIndexedv", load);
			glDepthRangeArrayv = GLAD::gladLoadFunction<PFNGLDEPTHRANGEARRAYVPROC>("glDepthRangeArrayv", load);
			glDepthRangeIndexed = GLAD::gladLoadFunction<PFNGLDEPTHRANGEINDEXEDPROC>("glDepthRangeIndexed", load);
			glGetFloati_v = GLAD::gladLoadFunction<PFNGLGETFLOATI_VPROC>("glGetFloati_v", load);
			glGetDoublei_v = GLAD::gladLoadFunction<PFNGLGETDOUBLEI_VPROC>("glGetDoublei_v", load);

			GLAD::GLAD_4_0::load_GL_RECURSIVE(load);
		}
	}
}